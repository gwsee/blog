// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/palacesmemo"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PalacesMemoCreate is the builder for creating a PalacesMemo entity.
type PalacesMemoCreate struct {
	config
	mutation *PalacesMemoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pmc *PalacesMemoCreate) SetCreatedAt(i int64) *PalacesMemoCreate {
	pmc.mutation.SetCreatedAt(i)
	return pmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmc *PalacesMemoCreate) SetNillableCreatedAt(i *int64) *PalacesMemoCreate {
	if i != nil {
		pmc.SetCreatedAt(*i)
	}
	return pmc
}

// SetCreatedBy sets the "created_by" field.
func (pmc *PalacesMemoCreate) SetCreatedBy(i int64) *PalacesMemoCreate {
	pmc.mutation.SetCreatedBy(i)
	return pmc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pmc *PalacesMemoCreate) SetNillableCreatedBy(i *int64) *PalacesMemoCreate {
	if i != nil {
		pmc.SetCreatedBy(*i)
	}
	return pmc
}

// SetUpdatedAt sets the "updated_at" field.
func (pmc *PalacesMemoCreate) SetUpdatedAt(i int64) *PalacesMemoCreate {
	pmc.mutation.SetUpdatedAt(i)
	return pmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pmc *PalacesMemoCreate) SetNillableUpdatedAt(i *int64) *PalacesMemoCreate {
	if i != nil {
		pmc.SetUpdatedAt(*i)
	}
	return pmc
}

// SetUpdatedBy sets the "updated_by" field.
func (pmc *PalacesMemoCreate) SetUpdatedBy(i int64) *PalacesMemoCreate {
	pmc.mutation.SetUpdatedBy(i)
	return pmc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pmc *PalacesMemoCreate) SetNillableUpdatedBy(i *int64) *PalacesMemoCreate {
	if i != nil {
		pmc.SetUpdatedBy(*i)
	}
	return pmc
}

// SetDeletedAt sets the "deleted_at" field.
func (pmc *PalacesMemoCreate) SetDeletedAt(i int64) *PalacesMemoCreate {
	pmc.mutation.SetDeletedAt(i)
	return pmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmc *PalacesMemoCreate) SetNillableDeletedAt(i *int64) *PalacesMemoCreate {
	if i != nil {
		pmc.SetDeletedAt(*i)
	}
	return pmc
}

// SetDeletedBy sets the "deleted_by" field.
func (pmc *PalacesMemoCreate) SetDeletedBy(i int64) *PalacesMemoCreate {
	pmc.mutation.SetDeletedBy(i)
	return pmc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pmc *PalacesMemoCreate) SetNillableDeletedBy(i *int64) *PalacesMemoCreate {
	if i != nil {
		pmc.SetDeletedBy(*i)
	}
	return pmc
}

// SetAccountID sets the "account_id" field.
func (pmc *PalacesMemoCreate) SetAccountID(i int) *PalacesMemoCreate {
	pmc.mutation.SetAccountID(i)
	return pmc
}

// SetName sets the "name" field.
func (pmc *PalacesMemoCreate) SetName(s string) *PalacesMemoCreate {
	pmc.mutation.SetName(s)
	return pmc
}

// SetContent sets the "content" field.
func (pmc *PalacesMemoCreate) SetContent(s string) *PalacesMemoCreate {
	pmc.mutation.SetContent(s)
	return pmc
}

// SetStatus sets the "status" field.
func (pmc *PalacesMemoCreate) SetStatus(i int8) *PalacesMemoCreate {
	pmc.mutation.SetStatus(i)
	return pmc
}

// SetID sets the "id" field.
func (pmc *PalacesMemoCreate) SetID(i int) *PalacesMemoCreate {
	pmc.mutation.SetID(i)
	return pmc
}

// Mutation returns the PalacesMemoMutation object of the builder.
func (pmc *PalacesMemoCreate) Mutation() *PalacesMemoMutation {
	return pmc.mutation
}

// Save creates the PalacesMemo in the database.
func (pmc *PalacesMemoCreate) Save(ctx context.Context) (*PalacesMemo, error) {
	if err := pmc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *PalacesMemoCreate) SaveX(ctx context.Context) *PalacesMemo {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *PalacesMemoCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *PalacesMemoCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *PalacesMemoCreate) defaults() error {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		v := palacesmemo.DefaultCreatedAt
		pmc.mutation.SetCreatedAt(v)
	}
	if _, ok := pmc.mutation.CreatedBy(); !ok {
		v := palacesmemo.DefaultCreatedBy
		pmc.mutation.SetCreatedBy(v)
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		v := palacesmemo.DefaultUpdatedAt
		pmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pmc.mutation.UpdatedBy(); !ok {
		v := palacesmemo.DefaultUpdatedBy
		pmc.mutation.SetUpdatedBy(v)
	}
	if _, ok := pmc.mutation.DeletedAt(); !ok {
		v := palacesmemo.DefaultDeletedAt
		pmc.mutation.SetDeletedAt(v)
	}
	if _, ok := pmc.mutation.DeletedBy(); !ok {
		v := palacesmemo.DefaultDeletedBy
		pmc.mutation.SetDeletedBy(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pmc *PalacesMemoCreate) check() error {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PalacesMemo.created_at"`)}
	}
	if _, ok := pmc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "PalacesMemo.created_by"`)}
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PalacesMemo.updated_at"`)}
	}
	if _, ok := pmc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "PalacesMemo.updated_by"`)}
	}
	if _, ok := pmc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "PalacesMemo.deleted_at"`)}
	}
	if _, ok := pmc.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "PalacesMemo.deleted_by"`)}
	}
	if _, ok := pmc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "PalacesMemo.account_id"`)}
	}
	if _, ok := pmc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PalacesMemo.name"`)}
	}
	if _, ok := pmc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "PalacesMemo.content"`)}
	}
	if v, ok := pmc.mutation.Content(); ok {
		if err := palacesmemo.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "PalacesMemo.content": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PalacesMemo.status"`)}
	}
	if v, ok := pmc.mutation.ID(); ok {
		if err := palacesmemo.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PalacesMemo.id": %w`, err)}
		}
	}
	return nil
}

func (pmc *PalacesMemoCreate) sqlSave(ctx context.Context) (*PalacesMemo, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *PalacesMemoCreate) createSpec() (*PalacesMemo, *sqlgraph.CreateSpec) {
	var (
		_node = &PalacesMemo{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(palacesmemo.Table, sqlgraph.NewFieldSpec(palacesmemo.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pmc.conflict
	if id, ok := pmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.SetField(palacesmemo.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := pmc.mutation.CreatedBy(); ok {
		_spec.SetField(palacesmemo.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := pmc.mutation.UpdatedAt(); ok {
		_spec.SetField(palacesmemo.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := pmc.mutation.UpdatedBy(); ok {
		_spec.SetField(palacesmemo.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := pmc.mutation.DeletedAt(); ok {
		_spec.SetField(palacesmemo.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := pmc.mutation.DeletedBy(); ok {
		_spec.SetField(palacesmemo.FieldDeletedBy, field.TypeInt64, value)
		_node.DeletedBy = value
	}
	if value, ok := pmc.mutation.AccountID(); ok {
		_spec.SetField(palacesmemo.FieldAccountID, field.TypeInt, value)
		_node.AccountID = value
	}
	if value, ok := pmc.mutation.Name(); ok {
		_spec.SetField(palacesmemo.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pmc.mutation.Content(); ok {
		_spec.SetField(palacesmemo.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := pmc.mutation.Status(); ok {
		_spec.SetField(palacesmemo.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PalacesMemo.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PalacesMemoUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pmc *PalacesMemoCreate) OnConflict(opts ...sql.ConflictOption) *PalacesMemoUpsertOne {
	pmc.conflict = opts
	return &PalacesMemoUpsertOne{
		create: pmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PalacesMemo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmc *PalacesMemoCreate) OnConflictColumns(columns ...string) *PalacesMemoUpsertOne {
	pmc.conflict = append(pmc.conflict, sql.ConflictColumns(columns...))
	return &PalacesMemoUpsertOne{
		create: pmc,
	}
}

type (
	// PalacesMemoUpsertOne is the builder for "upsert"-ing
	//  one PalacesMemo node.
	PalacesMemoUpsertOne struct {
		create *PalacesMemoCreate
	}

	// PalacesMemoUpsert is the "OnConflict" setter.
	PalacesMemoUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PalacesMemoUpsert) SetUpdatedAt(v int64) *PalacesMemoUpsert {
	u.Set(palacesmemo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PalacesMemoUpsert) UpdateUpdatedAt() *PalacesMemoUpsert {
	u.SetExcluded(palacesmemo.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PalacesMemoUpsert) AddUpdatedAt(v int64) *PalacesMemoUpsert {
	u.Add(palacesmemo.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PalacesMemoUpsert) SetUpdatedBy(v int64) *PalacesMemoUpsert {
	u.Set(palacesmemo.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PalacesMemoUpsert) UpdateUpdatedBy() *PalacesMemoUpsert {
	u.SetExcluded(palacesmemo.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PalacesMemoUpsert) AddUpdatedBy(v int64) *PalacesMemoUpsert {
	u.Add(palacesmemo.FieldUpdatedBy, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PalacesMemoUpsert) SetDeletedAt(v int64) *PalacesMemoUpsert {
	u.Set(palacesmemo.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PalacesMemoUpsert) UpdateDeletedAt() *PalacesMemoUpsert {
	u.SetExcluded(palacesmemo.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PalacesMemoUpsert) AddDeletedAt(v int64) *PalacesMemoUpsert {
	u.Add(palacesmemo.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *PalacesMemoUpsert) SetDeletedBy(v int64) *PalacesMemoUpsert {
	u.Set(palacesmemo.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *PalacesMemoUpsert) UpdateDeletedBy() *PalacesMemoUpsert {
	u.SetExcluded(palacesmemo.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *PalacesMemoUpsert) AddDeletedBy(v int64) *PalacesMemoUpsert {
	u.Add(palacesmemo.FieldDeletedBy, v)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *PalacesMemoUpsert) SetAccountID(v int) *PalacesMemoUpsert {
	u.Set(palacesmemo.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PalacesMemoUpsert) UpdateAccountID() *PalacesMemoUpsert {
	u.SetExcluded(palacesmemo.FieldAccountID)
	return u
}

// AddAccountID adds v to the "account_id" field.
func (u *PalacesMemoUpsert) AddAccountID(v int) *PalacesMemoUpsert {
	u.Add(palacesmemo.FieldAccountID, v)
	return u
}

// SetName sets the "name" field.
func (u *PalacesMemoUpsert) SetName(v string) *PalacesMemoUpsert {
	u.Set(palacesmemo.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PalacesMemoUpsert) UpdateName() *PalacesMemoUpsert {
	u.SetExcluded(palacesmemo.FieldName)
	return u
}

// SetContent sets the "content" field.
func (u *PalacesMemoUpsert) SetContent(v string) *PalacesMemoUpsert {
	u.Set(palacesmemo.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PalacesMemoUpsert) UpdateContent() *PalacesMemoUpsert {
	u.SetExcluded(palacesmemo.FieldContent)
	return u
}

// SetStatus sets the "status" field.
func (u *PalacesMemoUpsert) SetStatus(v int8) *PalacesMemoUpsert {
	u.Set(palacesmemo.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PalacesMemoUpsert) UpdateStatus() *PalacesMemoUpsert {
	u.SetExcluded(palacesmemo.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *PalacesMemoUpsert) AddStatus(v int8) *PalacesMemoUpsert {
	u.Add(palacesmemo.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PalacesMemo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(palacesmemo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PalacesMemoUpsertOne) UpdateNewValues() *PalacesMemoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(palacesmemo.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(palacesmemo.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(palacesmemo.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PalacesMemo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PalacesMemoUpsertOne) Ignore() *PalacesMemoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PalacesMemoUpsertOne) DoNothing() *PalacesMemoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PalacesMemoCreate.OnConflict
// documentation for more info.
func (u *PalacesMemoUpsertOne) Update(set func(*PalacesMemoUpsert)) *PalacesMemoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PalacesMemoUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PalacesMemoUpsertOne) SetUpdatedAt(v int64) *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PalacesMemoUpsertOne) AddUpdatedAt(v int64) *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PalacesMemoUpsertOne) UpdateUpdatedAt() *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PalacesMemoUpsertOne) SetUpdatedBy(v int64) *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PalacesMemoUpsertOne) AddUpdatedBy(v int64) *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PalacesMemoUpsertOne) UpdateUpdatedBy() *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PalacesMemoUpsertOne) SetDeletedAt(v int64) *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PalacesMemoUpsertOne) AddDeletedAt(v int64) *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PalacesMemoUpsertOne) UpdateDeletedAt() *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *PalacesMemoUpsertOne) SetDeletedBy(v int64) *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *PalacesMemoUpsertOne) AddDeletedBy(v int64) *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *PalacesMemoUpsertOne) UpdateDeletedBy() *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetAccountID sets the "account_id" field.
func (u *PalacesMemoUpsertOne) SetAccountID(v int) *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *PalacesMemoUpsertOne) AddAccountID(v int) *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PalacesMemoUpsertOne) UpdateAccountID() *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateAccountID()
	})
}

// SetName sets the "name" field.
func (u *PalacesMemoUpsertOne) SetName(v string) *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PalacesMemoUpsertOne) UpdateName() *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateName()
	})
}

// SetContent sets the "content" field.
func (u *PalacesMemoUpsertOne) SetContent(v string) *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PalacesMemoUpsertOne) UpdateContent() *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateContent()
	})
}

// SetStatus sets the "status" field.
func (u *PalacesMemoUpsertOne) SetStatus(v int8) *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PalacesMemoUpsertOne) AddStatus(v int8) *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PalacesMemoUpsertOne) UpdateStatus() *PalacesMemoUpsertOne {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *PalacesMemoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PalacesMemoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PalacesMemoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PalacesMemoUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PalacesMemoUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PalacesMemoCreateBulk is the builder for creating many PalacesMemo entities in bulk.
type PalacesMemoCreateBulk struct {
	config
	err      error
	builders []*PalacesMemoCreate
	conflict []sql.ConflictOption
}

// Save creates the PalacesMemo entities in the database.
func (pmcb *PalacesMemoCreateBulk) Save(ctx context.Context) ([]*PalacesMemo, error) {
	if pmcb.err != nil {
		return nil, pmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*PalacesMemo, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PalacesMemoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *PalacesMemoCreateBulk) SaveX(ctx context.Context) []*PalacesMemo {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *PalacesMemoCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *PalacesMemoCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PalacesMemo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PalacesMemoUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pmcb *PalacesMemoCreateBulk) OnConflict(opts ...sql.ConflictOption) *PalacesMemoUpsertBulk {
	pmcb.conflict = opts
	return &PalacesMemoUpsertBulk{
		create: pmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PalacesMemo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmcb *PalacesMemoCreateBulk) OnConflictColumns(columns ...string) *PalacesMemoUpsertBulk {
	pmcb.conflict = append(pmcb.conflict, sql.ConflictColumns(columns...))
	return &PalacesMemoUpsertBulk{
		create: pmcb,
	}
}

// PalacesMemoUpsertBulk is the builder for "upsert"-ing
// a bulk of PalacesMemo nodes.
type PalacesMemoUpsertBulk struct {
	create *PalacesMemoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PalacesMemo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(palacesmemo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PalacesMemoUpsertBulk) UpdateNewValues() *PalacesMemoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(palacesmemo.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(palacesmemo.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(palacesmemo.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PalacesMemo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PalacesMemoUpsertBulk) Ignore() *PalacesMemoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PalacesMemoUpsertBulk) DoNothing() *PalacesMemoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PalacesMemoCreateBulk.OnConflict
// documentation for more info.
func (u *PalacesMemoUpsertBulk) Update(set func(*PalacesMemoUpsert)) *PalacesMemoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PalacesMemoUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PalacesMemoUpsertBulk) SetUpdatedAt(v int64) *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PalacesMemoUpsertBulk) AddUpdatedAt(v int64) *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PalacesMemoUpsertBulk) UpdateUpdatedAt() *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PalacesMemoUpsertBulk) SetUpdatedBy(v int64) *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PalacesMemoUpsertBulk) AddUpdatedBy(v int64) *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PalacesMemoUpsertBulk) UpdateUpdatedBy() *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PalacesMemoUpsertBulk) SetDeletedAt(v int64) *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PalacesMemoUpsertBulk) AddDeletedAt(v int64) *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PalacesMemoUpsertBulk) UpdateDeletedAt() *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *PalacesMemoUpsertBulk) SetDeletedBy(v int64) *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *PalacesMemoUpsertBulk) AddDeletedBy(v int64) *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *PalacesMemoUpsertBulk) UpdateDeletedBy() *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetAccountID sets the "account_id" field.
func (u *PalacesMemoUpsertBulk) SetAccountID(v int) *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *PalacesMemoUpsertBulk) AddAccountID(v int) *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PalacesMemoUpsertBulk) UpdateAccountID() *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateAccountID()
	})
}

// SetName sets the "name" field.
func (u *PalacesMemoUpsertBulk) SetName(v string) *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PalacesMemoUpsertBulk) UpdateName() *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateName()
	})
}

// SetContent sets the "content" field.
func (u *PalacesMemoUpsertBulk) SetContent(v string) *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PalacesMemoUpsertBulk) UpdateContent() *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateContent()
	})
}

// SetStatus sets the "status" field.
func (u *PalacesMemoUpsertBulk) SetStatus(v int8) *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PalacesMemoUpsertBulk) AddStatus(v int8) *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PalacesMemoUpsertBulk) UpdateStatus() *PalacesMemoUpsertBulk {
	return u.Update(func(s *PalacesMemoUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *PalacesMemoUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PalacesMemoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PalacesMemoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PalacesMemoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
