// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/accountproject"
	"blog/internal/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// AccountProjectUpdate is the builder for updating AccountProject entities.
type AccountProjectUpdate struct {
	config
	hooks    []Hook
	mutation *AccountProjectMutation
}

// Where appends a list predicates to the AccountProjectUpdate builder.
func (apu *AccountProjectUpdate) Where(ps ...predicate.AccountProject) *AccountProjectUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetUpdatedAt sets the "updated_at" field.
func (apu *AccountProjectUpdate) SetUpdatedAt(i int64) *AccountProjectUpdate {
	apu.mutation.ResetUpdatedAt()
	apu.mutation.SetUpdatedAt(i)
	return apu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (apu *AccountProjectUpdate) AddUpdatedAt(i int64) *AccountProjectUpdate {
	apu.mutation.AddUpdatedAt(i)
	return apu
}

// SetUpdatedBy sets the "updated_by" field.
func (apu *AccountProjectUpdate) SetUpdatedBy(i int64) *AccountProjectUpdate {
	apu.mutation.ResetUpdatedBy()
	apu.mutation.SetUpdatedBy(i)
	return apu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (apu *AccountProjectUpdate) SetNillableUpdatedBy(i *int64) *AccountProjectUpdate {
	if i != nil {
		apu.SetUpdatedBy(*i)
	}
	return apu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (apu *AccountProjectUpdate) AddUpdatedBy(i int64) *AccountProjectUpdate {
	apu.mutation.AddUpdatedBy(i)
	return apu
}

// SetDeletedAt sets the "deleted_at" field.
func (apu *AccountProjectUpdate) SetDeletedAt(i int64) *AccountProjectUpdate {
	apu.mutation.ResetDeletedAt()
	apu.mutation.SetDeletedAt(i)
	return apu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (apu *AccountProjectUpdate) SetNillableDeletedAt(i *int64) *AccountProjectUpdate {
	if i != nil {
		apu.SetDeletedAt(*i)
	}
	return apu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (apu *AccountProjectUpdate) AddDeletedAt(i int64) *AccountProjectUpdate {
	apu.mutation.AddDeletedAt(i)
	return apu
}

// SetDeletedBy sets the "deleted_by" field.
func (apu *AccountProjectUpdate) SetDeletedBy(i int64) *AccountProjectUpdate {
	apu.mutation.ResetDeletedBy()
	apu.mutation.SetDeletedBy(i)
	return apu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (apu *AccountProjectUpdate) SetNillableDeletedBy(i *int64) *AccountProjectUpdate {
	if i != nil {
		apu.SetDeletedBy(*i)
	}
	return apu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (apu *AccountProjectUpdate) AddDeletedBy(i int64) *AccountProjectUpdate {
	apu.mutation.AddDeletedBy(i)
	return apu
}

// SetUserID sets the "user_id" field.
func (apu *AccountProjectUpdate) SetUserID(i int) *AccountProjectUpdate {
	apu.mutation.ResetUserID()
	apu.mutation.SetUserID(i)
	return apu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (apu *AccountProjectUpdate) SetNillableUserID(i *int) *AccountProjectUpdate {
	if i != nil {
		apu.SetUserID(*i)
	}
	return apu
}

// AddUserID adds i to the "user_id" field.
func (apu *AccountProjectUpdate) AddUserID(i int) *AccountProjectUpdate {
	apu.mutation.AddUserID(i)
	return apu
}

// SetExperienceID sets the "experience_id" field.
func (apu *AccountProjectUpdate) SetExperienceID(i int) *AccountProjectUpdate {
	apu.mutation.ResetExperienceID()
	apu.mutation.SetExperienceID(i)
	return apu
}

// SetNillableExperienceID sets the "experience_id" field if the given value is not nil.
func (apu *AccountProjectUpdate) SetNillableExperienceID(i *int) *AccountProjectUpdate {
	if i != nil {
		apu.SetExperienceID(*i)
	}
	return apu
}

// AddExperienceID adds i to the "experience_id" field.
func (apu *AccountProjectUpdate) AddExperienceID(i int) *AccountProjectUpdate {
	apu.mutation.AddExperienceID(i)
	return apu
}

// SetTitle sets the "title" field.
func (apu *AccountProjectUpdate) SetTitle(s string) *AccountProjectUpdate {
	apu.mutation.SetTitle(s)
	return apu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (apu *AccountProjectUpdate) SetNillableTitle(s *string) *AccountProjectUpdate {
	if s != nil {
		apu.SetTitle(*s)
	}
	return apu
}

// SetDescription sets the "description" field.
func (apu *AccountProjectUpdate) SetDescription(s string) *AccountProjectUpdate {
	apu.mutation.SetDescription(s)
	return apu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (apu *AccountProjectUpdate) SetNillableDescription(s *string) *AccountProjectUpdate {
	if s != nil {
		apu.SetDescription(*s)
	}
	return apu
}

// SetSkills sets the "skills" field.
func (apu *AccountProjectUpdate) SetSkills(s []string) *AccountProjectUpdate {
	apu.mutation.SetSkills(s)
	return apu
}

// AppendSkills appends s to the "skills" field.
func (apu *AccountProjectUpdate) AppendSkills(s []string) *AccountProjectUpdate {
	apu.mutation.AppendSkills(s)
	return apu
}

// SetStart sets the "start" field.
func (apu *AccountProjectUpdate) SetStart(i int64) *AccountProjectUpdate {
	apu.mutation.ResetStart()
	apu.mutation.SetStart(i)
	return apu
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (apu *AccountProjectUpdate) SetNillableStart(i *int64) *AccountProjectUpdate {
	if i != nil {
		apu.SetStart(*i)
	}
	return apu
}

// AddStart adds i to the "start" field.
func (apu *AccountProjectUpdate) AddStart(i int64) *AccountProjectUpdate {
	apu.mutation.AddStart(i)
	return apu
}

// SetEnd sets the "end" field.
func (apu *AccountProjectUpdate) SetEnd(i int64) *AccountProjectUpdate {
	apu.mutation.ResetEnd()
	apu.mutation.SetEnd(i)
	return apu
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (apu *AccountProjectUpdate) SetNillableEnd(i *int64) *AccountProjectUpdate {
	if i != nil {
		apu.SetEnd(*i)
	}
	return apu
}

// AddEnd adds i to the "end" field.
func (apu *AccountProjectUpdate) AddEnd(i int64) *AccountProjectUpdate {
	apu.mutation.AddEnd(i)
	return apu
}

// SetLink sets the "link" field.
func (apu *AccountProjectUpdate) SetLink(s string) *AccountProjectUpdate {
	apu.mutation.SetLink(s)
	return apu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (apu *AccountProjectUpdate) SetNillableLink(s *string) *AccountProjectUpdate {
	if s != nil {
		apu.SetLink(*s)
	}
	return apu
}

// SetPhotos sets the "photos" field.
func (apu *AccountProjectUpdate) SetPhotos(s []string) *AccountProjectUpdate {
	apu.mutation.SetPhotos(s)
	return apu
}

// AppendPhotos appends s to the "photos" field.
func (apu *AccountProjectUpdate) AppendPhotos(s []string) *AccountProjectUpdate {
	apu.mutation.AppendPhotos(s)
	return apu
}

// Mutation returns the AccountProjectMutation object of the builder.
func (apu *AccountProjectUpdate) Mutation() *AccountProjectMutation {
	return apu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AccountProjectUpdate) Save(ctx context.Context) (int, error) {
	if err := apu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, apu.sqlSave, apu.mutation, apu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AccountProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AccountProjectUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AccountProjectUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apu *AccountProjectUpdate) defaults() error {
	if _, ok := apu.mutation.UpdatedAt(); !ok {
		if accountproject.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized accountproject.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := accountproject.UpdateDefaultUpdatedAt()
		apu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (apu *AccountProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(accountproject.Table, accountproject.Columns, sqlgraph.NewFieldSpec(accountproject.FieldID, field.TypeInt))
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.UpdatedAt(); ok {
		_spec.SetField(accountproject.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := apu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(accountproject.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := apu.mutation.UpdatedBy(); ok {
		_spec.SetField(accountproject.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := apu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(accountproject.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := apu.mutation.DeletedAt(); ok {
		_spec.SetField(accountproject.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := apu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(accountproject.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := apu.mutation.DeletedBy(); ok {
		_spec.SetField(accountproject.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := apu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(accountproject.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := apu.mutation.UserID(); ok {
		_spec.SetField(accountproject.FieldUserID, field.TypeInt, value)
	}
	if value, ok := apu.mutation.AddedUserID(); ok {
		_spec.AddField(accountproject.FieldUserID, field.TypeInt, value)
	}
	if value, ok := apu.mutation.ExperienceID(); ok {
		_spec.SetField(accountproject.FieldExperienceID, field.TypeInt, value)
	}
	if value, ok := apu.mutation.AddedExperienceID(); ok {
		_spec.AddField(accountproject.FieldExperienceID, field.TypeInt, value)
	}
	if value, ok := apu.mutation.Title(); ok {
		_spec.SetField(accountproject.FieldTitle, field.TypeString, value)
	}
	if value, ok := apu.mutation.Description(); ok {
		_spec.SetField(accountproject.FieldDescription, field.TypeString, value)
	}
	if value, ok := apu.mutation.Skills(); ok {
		_spec.SetField(accountproject.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := apu.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accountproject.FieldSkills, value)
		})
	}
	if value, ok := apu.mutation.Start(); ok {
		_spec.SetField(accountproject.FieldStart, field.TypeInt64, value)
	}
	if value, ok := apu.mutation.AddedStart(); ok {
		_spec.AddField(accountproject.FieldStart, field.TypeInt64, value)
	}
	if value, ok := apu.mutation.End(); ok {
		_spec.SetField(accountproject.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := apu.mutation.AddedEnd(); ok {
		_spec.AddField(accountproject.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := apu.mutation.Link(); ok {
		_spec.SetField(accountproject.FieldLink, field.TypeString, value)
	}
	if value, ok := apu.mutation.Photos(); ok {
		_spec.SetField(accountproject.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := apu.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accountproject.FieldPhotos, value)
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	apu.mutation.done = true
	return n, nil
}

// AccountProjectUpdateOne is the builder for updating a single AccountProject entity.
type AccountProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountProjectMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (apuo *AccountProjectUpdateOne) SetUpdatedAt(i int64) *AccountProjectUpdateOne {
	apuo.mutation.ResetUpdatedAt()
	apuo.mutation.SetUpdatedAt(i)
	return apuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (apuo *AccountProjectUpdateOne) AddUpdatedAt(i int64) *AccountProjectUpdateOne {
	apuo.mutation.AddUpdatedAt(i)
	return apuo
}

// SetUpdatedBy sets the "updated_by" field.
func (apuo *AccountProjectUpdateOne) SetUpdatedBy(i int64) *AccountProjectUpdateOne {
	apuo.mutation.ResetUpdatedBy()
	apuo.mutation.SetUpdatedBy(i)
	return apuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (apuo *AccountProjectUpdateOne) SetNillableUpdatedBy(i *int64) *AccountProjectUpdateOne {
	if i != nil {
		apuo.SetUpdatedBy(*i)
	}
	return apuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (apuo *AccountProjectUpdateOne) AddUpdatedBy(i int64) *AccountProjectUpdateOne {
	apuo.mutation.AddUpdatedBy(i)
	return apuo
}

// SetDeletedAt sets the "deleted_at" field.
func (apuo *AccountProjectUpdateOne) SetDeletedAt(i int64) *AccountProjectUpdateOne {
	apuo.mutation.ResetDeletedAt()
	apuo.mutation.SetDeletedAt(i)
	return apuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (apuo *AccountProjectUpdateOne) SetNillableDeletedAt(i *int64) *AccountProjectUpdateOne {
	if i != nil {
		apuo.SetDeletedAt(*i)
	}
	return apuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (apuo *AccountProjectUpdateOne) AddDeletedAt(i int64) *AccountProjectUpdateOne {
	apuo.mutation.AddDeletedAt(i)
	return apuo
}

// SetDeletedBy sets the "deleted_by" field.
func (apuo *AccountProjectUpdateOne) SetDeletedBy(i int64) *AccountProjectUpdateOne {
	apuo.mutation.ResetDeletedBy()
	apuo.mutation.SetDeletedBy(i)
	return apuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (apuo *AccountProjectUpdateOne) SetNillableDeletedBy(i *int64) *AccountProjectUpdateOne {
	if i != nil {
		apuo.SetDeletedBy(*i)
	}
	return apuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (apuo *AccountProjectUpdateOne) AddDeletedBy(i int64) *AccountProjectUpdateOne {
	apuo.mutation.AddDeletedBy(i)
	return apuo
}

// SetUserID sets the "user_id" field.
func (apuo *AccountProjectUpdateOne) SetUserID(i int) *AccountProjectUpdateOne {
	apuo.mutation.ResetUserID()
	apuo.mutation.SetUserID(i)
	return apuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (apuo *AccountProjectUpdateOne) SetNillableUserID(i *int) *AccountProjectUpdateOne {
	if i != nil {
		apuo.SetUserID(*i)
	}
	return apuo
}

// AddUserID adds i to the "user_id" field.
func (apuo *AccountProjectUpdateOne) AddUserID(i int) *AccountProjectUpdateOne {
	apuo.mutation.AddUserID(i)
	return apuo
}

// SetExperienceID sets the "experience_id" field.
func (apuo *AccountProjectUpdateOne) SetExperienceID(i int) *AccountProjectUpdateOne {
	apuo.mutation.ResetExperienceID()
	apuo.mutation.SetExperienceID(i)
	return apuo
}

// SetNillableExperienceID sets the "experience_id" field if the given value is not nil.
func (apuo *AccountProjectUpdateOne) SetNillableExperienceID(i *int) *AccountProjectUpdateOne {
	if i != nil {
		apuo.SetExperienceID(*i)
	}
	return apuo
}

// AddExperienceID adds i to the "experience_id" field.
func (apuo *AccountProjectUpdateOne) AddExperienceID(i int) *AccountProjectUpdateOne {
	apuo.mutation.AddExperienceID(i)
	return apuo
}

// SetTitle sets the "title" field.
func (apuo *AccountProjectUpdateOne) SetTitle(s string) *AccountProjectUpdateOne {
	apuo.mutation.SetTitle(s)
	return apuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (apuo *AccountProjectUpdateOne) SetNillableTitle(s *string) *AccountProjectUpdateOne {
	if s != nil {
		apuo.SetTitle(*s)
	}
	return apuo
}

// SetDescription sets the "description" field.
func (apuo *AccountProjectUpdateOne) SetDescription(s string) *AccountProjectUpdateOne {
	apuo.mutation.SetDescription(s)
	return apuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (apuo *AccountProjectUpdateOne) SetNillableDescription(s *string) *AccountProjectUpdateOne {
	if s != nil {
		apuo.SetDescription(*s)
	}
	return apuo
}

// SetSkills sets the "skills" field.
func (apuo *AccountProjectUpdateOne) SetSkills(s []string) *AccountProjectUpdateOne {
	apuo.mutation.SetSkills(s)
	return apuo
}

// AppendSkills appends s to the "skills" field.
func (apuo *AccountProjectUpdateOne) AppendSkills(s []string) *AccountProjectUpdateOne {
	apuo.mutation.AppendSkills(s)
	return apuo
}

// SetStart sets the "start" field.
func (apuo *AccountProjectUpdateOne) SetStart(i int64) *AccountProjectUpdateOne {
	apuo.mutation.ResetStart()
	apuo.mutation.SetStart(i)
	return apuo
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (apuo *AccountProjectUpdateOne) SetNillableStart(i *int64) *AccountProjectUpdateOne {
	if i != nil {
		apuo.SetStart(*i)
	}
	return apuo
}

// AddStart adds i to the "start" field.
func (apuo *AccountProjectUpdateOne) AddStart(i int64) *AccountProjectUpdateOne {
	apuo.mutation.AddStart(i)
	return apuo
}

// SetEnd sets the "end" field.
func (apuo *AccountProjectUpdateOne) SetEnd(i int64) *AccountProjectUpdateOne {
	apuo.mutation.ResetEnd()
	apuo.mutation.SetEnd(i)
	return apuo
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (apuo *AccountProjectUpdateOne) SetNillableEnd(i *int64) *AccountProjectUpdateOne {
	if i != nil {
		apuo.SetEnd(*i)
	}
	return apuo
}

// AddEnd adds i to the "end" field.
func (apuo *AccountProjectUpdateOne) AddEnd(i int64) *AccountProjectUpdateOne {
	apuo.mutation.AddEnd(i)
	return apuo
}

// SetLink sets the "link" field.
func (apuo *AccountProjectUpdateOne) SetLink(s string) *AccountProjectUpdateOne {
	apuo.mutation.SetLink(s)
	return apuo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (apuo *AccountProjectUpdateOne) SetNillableLink(s *string) *AccountProjectUpdateOne {
	if s != nil {
		apuo.SetLink(*s)
	}
	return apuo
}

// SetPhotos sets the "photos" field.
func (apuo *AccountProjectUpdateOne) SetPhotos(s []string) *AccountProjectUpdateOne {
	apuo.mutation.SetPhotos(s)
	return apuo
}

// AppendPhotos appends s to the "photos" field.
func (apuo *AccountProjectUpdateOne) AppendPhotos(s []string) *AccountProjectUpdateOne {
	apuo.mutation.AppendPhotos(s)
	return apuo
}

// Mutation returns the AccountProjectMutation object of the builder.
func (apuo *AccountProjectUpdateOne) Mutation() *AccountProjectMutation {
	return apuo.mutation
}

// Where appends a list predicates to the AccountProjectUpdate builder.
func (apuo *AccountProjectUpdateOne) Where(ps ...predicate.AccountProject) *AccountProjectUpdateOne {
	apuo.mutation.Where(ps...)
	return apuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *AccountProjectUpdateOne) Select(field string, fields ...string) *AccountProjectUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated AccountProject entity.
func (apuo *AccountProjectUpdateOne) Save(ctx context.Context) (*AccountProject, error) {
	if err := apuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, apuo.sqlSave, apuo.mutation, apuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AccountProjectUpdateOne) SaveX(ctx context.Context) *AccountProject {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AccountProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AccountProjectUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apuo *AccountProjectUpdateOne) defaults() error {
	if _, ok := apuo.mutation.UpdatedAt(); !ok {
		if accountproject.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized accountproject.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := accountproject.UpdateDefaultUpdatedAt()
		apuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (apuo *AccountProjectUpdateOne) sqlSave(ctx context.Context) (_node *AccountProject, err error) {
	_spec := sqlgraph.NewUpdateSpec(accountproject.Table, accountproject.Columns, sqlgraph.NewFieldSpec(accountproject.FieldID, field.TypeInt))
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccountProject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountproject.FieldID)
		for _, f := range fields {
			if !accountproject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.UpdatedAt(); ok {
		_spec.SetField(accountproject.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := apuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(accountproject.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := apuo.mutation.UpdatedBy(); ok {
		_spec.SetField(accountproject.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := apuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(accountproject.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := apuo.mutation.DeletedAt(); ok {
		_spec.SetField(accountproject.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := apuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(accountproject.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := apuo.mutation.DeletedBy(); ok {
		_spec.SetField(accountproject.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := apuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(accountproject.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := apuo.mutation.UserID(); ok {
		_spec.SetField(accountproject.FieldUserID, field.TypeInt, value)
	}
	if value, ok := apuo.mutation.AddedUserID(); ok {
		_spec.AddField(accountproject.FieldUserID, field.TypeInt, value)
	}
	if value, ok := apuo.mutation.ExperienceID(); ok {
		_spec.SetField(accountproject.FieldExperienceID, field.TypeInt, value)
	}
	if value, ok := apuo.mutation.AddedExperienceID(); ok {
		_spec.AddField(accountproject.FieldExperienceID, field.TypeInt, value)
	}
	if value, ok := apuo.mutation.Title(); ok {
		_spec.SetField(accountproject.FieldTitle, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Description(); ok {
		_spec.SetField(accountproject.FieldDescription, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Skills(); ok {
		_spec.SetField(accountproject.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := apuo.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accountproject.FieldSkills, value)
		})
	}
	if value, ok := apuo.mutation.Start(); ok {
		_spec.SetField(accountproject.FieldStart, field.TypeInt64, value)
	}
	if value, ok := apuo.mutation.AddedStart(); ok {
		_spec.AddField(accountproject.FieldStart, field.TypeInt64, value)
	}
	if value, ok := apuo.mutation.End(); ok {
		_spec.SetField(accountproject.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := apuo.mutation.AddedEnd(); ok {
		_spec.AddField(accountproject.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := apuo.mutation.Link(); ok {
		_spec.SetField(accountproject.FieldLink, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Photos(); ok {
		_spec.SetField(accountproject.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := apuo.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accountproject.FieldPhotos, value)
		})
	}
	_node = &AccountProject{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	apuo.mutation.done = true
	return _node, nil
}
