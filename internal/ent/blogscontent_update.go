// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/blogscontent"
	"blog/internal/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// BlogsContentUpdate is the builder for updating BlogsContent entities.
type BlogsContentUpdate struct {
	config
	hooks    []Hook
	mutation *BlogsContentMutation
}

// Where appends a list predicates to the BlogsContentUpdate builder.
func (bcu *BlogsContentUpdate) Where(ps ...predicate.BlogsContent) *BlogsContentUpdate {
	bcu.mutation.Where(ps...)
	return bcu
}

// SetContent sets the "content" field.
func (bcu *BlogsContentUpdate) SetContent(s string) *BlogsContentUpdate {
	bcu.mutation.SetContent(s)
	return bcu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (bcu *BlogsContentUpdate) SetNillableContent(s *string) *BlogsContentUpdate {
	if s != nil {
		bcu.SetContent(*s)
	}
	return bcu
}

// SetFiles sets the "files" field.
func (bcu *BlogsContentUpdate) SetFiles(s []string) *BlogsContentUpdate {
	bcu.mutation.SetFiles(s)
	return bcu
}

// AppendFiles appends s to the "files" field.
func (bcu *BlogsContentUpdate) AppendFiles(s []string) *BlogsContentUpdate {
	bcu.mutation.AppendFiles(s)
	return bcu
}

// Mutation returns the BlogsContentMutation object of the builder.
func (bcu *BlogsContentUpdate) Mutation() *BlogsContentMutation {
	return bcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bcu *BlogsContentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bcu.sqlSave, bcu.mutation, bcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcu *BlogsContentUpdate) SaveX(ctx context.Context) int {
	affected, err := bcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bcu *BlogsContentUpdate) Exec(ctx context.Context) error {
	_, err := bcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcu *BlogsContentUpdate) ExecX(ctx context.Context) {
	if err := bcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcu *BlogsContentUpdate) check() error {
	if v, ok := bcu.mutation.Content(); ok {
		if err := blogscontent.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "BlogsContent.content": %w`, err)}
		}
	}
	return nil
}

func (bcu *BlogsContentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogscontent.Table, blogscontent.Columns, sqlgraph.NewFieldSpec(blogscontent.FieldID, field.TypeInt))
	if ps := bcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcu.mutation.Content(); ok {
		_spec.SetField(blogscontent.FieldContent, field.TypeString, value)
	}
	if value, ok := bcu.mutation.Files(); ok {
		_spec.SetField(blogscontent.FieldFiles, field.TypeJSON, value)
	}
	if value, ok := bcu.mutation.AppendedFiles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blogscontent.FieldFiles, value)
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogscontent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bcu.mutation.done = true
	return n, nil
}

// BlogsContentUpdateOne is the builder for updating a single BlogsContent entity.
type BlogsContentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlogsContentMutation
}

// SetContent sets the "content" field.
func (bcuo *BlogsContentUpdateOne) SetContent(s string) *BlogsContentUpdateOne {
	bcuo.mutation.SetContent(s)
	return bcuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (bcuo *BlogsContentUpdateOne) SetNillableContent(s *string) *BlogsContentUpdateOne {
	if s != nil {
		bcuo.SetContent(*s)
	}
	return bcuo
}

// SetFiles sets the "files" field.
func (bcuo *BlogsContentUpdateOne) SetFiles(s []string) *BlogsContentUpdateOne {
	bcuo.mutation.SetFiles(s)
	return bcuo
}

// AppendFiles appends s to the "files" field.
func (bcuo *BlogsContentUpdateOne) AppendFiles(s []string) *BlogsContentUpdateOne {
	bcuo.mutation.AppendFiles(s)
	return bcuo
}

// Mutation returns the BlogsContentMutation object of the builder.
func (bcuo *BlogsContentUpdateOne) Mutation() *BlogsContentMutation {
	return bcuo.mutation
}

// Where appends a list predicates to the BlogsContentUpdate builder.
func (bcuo *BlogsContentUpdateOne) Where(ps ...predicate.BlogsContent) *BlogsContentUpdateOne {
	bcuo.mutation.Where(ps...)
	return bcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bcuo *BlogsContentUpdateOne) Select(field string, fields ...string) *BlogsContentUpdateOne {
	bcuo.fields = append([]string{field}, fields...)
	return bcuo
}

// Save executes the query and returns the updated BlogsContent entity.
func (bcuo *BlogsContentUpdateOne) Save(ctx context.Context) (*BlogsContent, error) {
	return withHooks(ctx, bcuo.sqlSave, bcuo.mutation, bcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcuo *BlogsContentUpdateOne) SaveX(ctx context.Context) *BlogsContent {
	node, err := bcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bcuo *BlogsContentUpdateOne) Exec(ctx context.Context) error {
	_, err := bcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcuo *BlogsContentUpdateOne) ExecX(ctx context.Context) {
	if err := bcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcuo *BlogsContentUpdateOne) check() error {
	if v, ok := bcuo.mutation.Content(); ok {
		if err := blogscontent.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "BlogsContent.content": %w`, err)}
		}
	}
	return nil
}

func (bcuo *BlogsContentUpdateOne) sqlSave(ctx context.Context) (_node *BlogsContent, err error) {
	if err := bcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogscontent.Table, blogscontent.Columns, sqlgraph.NewFieldSpec(blogscontent.FieldID, field.TypeInt))
	id, ok := bcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlogsContent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blogscontent.FieldID)
		for _, f := range fields {
			if !blogscontent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blogscontent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcuo.mutation.Content(); ok {
		_spec.SetField(blogscontent.FieldContent, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.Files(); ok {
		_spec.SetField(blogscontent.FieldFiles, field.TypeJSON, value)
	}
	if value, ok := bcuo.mutation.AppendedFiles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blogscontent.FieldFiles, value)
		})
	}
	_node = &BlogsContent{config: bcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogscontent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bcuo.mutation.done = true
	return _node, nil
}
