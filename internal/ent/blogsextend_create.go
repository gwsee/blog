// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/blogsextend"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlogsExtendCreate is the builder for creating a BlogsExtend entity.
type BlogsExtendCreate struct {
	config
	mutation *BlogsExtendMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetBlogID sets the "blog_id" field.
func (bec *BlogsExtendCreate) SetBlogID(i int) *BlogsExtendCreate {
	bec.mutation.SetBlogID(i)
	return bec
}

// SetAccountID sets the "account_id" field.
func (bec *BlogsExtendCreate) SetAccountID(i int) *BlogsExtendCreate {
	bec.mutation.SetAccountID(i)
	return bec
}

// SetBrowseNum sets the "browse_num" field.
func (bec *BlogsExtendCreate) SetBrowseNum(i int) *BlogsExtendCreate {
	bec.mutation.SetBrowseNum(i)
	return bec
}

// SetNillableBrowseNum sets the "browse_num" field if the given value is not nil.
func (bec *BlogsExtendCreate) SetNillableBrowseNum(i *int) *BlogsExtendCreate {
	if i != nil {
		bec.SetBrowseNum(*i)
	}
	return bec
}

// SetBrowseAt sets the "browse_at" field.
func (bec *BlogsExtendCreate) SetBrowseAt(i int64) *BlogsExtendCreate {
	bec.mutation.SetBrowseAt(i)
	return bec
}

// SetNillableBrowseAt sets the "browse_at" field if the given value is not nil.
func (bec *BlogsExtendCreate) SetNillableBrowseAt(i *int64) *BlogsExtendCreate {
	if i != nil {
		bec.SetBrowseAt(*i)
	}
	return bec
}

// SetCollect sets the "collect" field.
func (bec *BlogsExtendCreate) SetCollect(b bool) *BlogsExtendCreate {
	bec.mutation.SetCollect(b)
	return bec
}

// SetNillableCollect sets the "collect" field if the given value is not nil.
func (bec *BlogsExtendCreate) SetNillableCollect(b *bool) *BlogsExtendCreate {
	if b != nil {
		bec.SetCollect(*b)
	}
	return bec
}

// SetCollectAt sets the "collect_at" field.
func (bec *BlogsExtendCreate) SetCollectAt(i int64) *BlogsExtendCreate {
	bec.mutation.SetCollectAt(i)
	return bec
}

// SetNillableCollectAt sets the "collect_at" field if the given value is not nil.
func (bec *BlogsExtendCreate) SetNillableCollectAt(i *int64) *BlogsExtendCreate {
	if i != nil {
		bec.SetCollectAt(*i)
	}
	return bec
}

// SetLove sets the "love" field.
func (bec *BlogsExtendCreate) SetLove(b bool) *BlogsExtendCreate {
	bec.mutation.SetLove(b)
	return bec
}

// SetNillableLove sets the "love" field if the given value is not nil.
func (bec *BlogsExtendCreate) SetNillableLove(b *bool) *BlogsExtendCreate {
	if b != nil {
		bec.SetLove(*b)
	}
	return bec
}

// SetLoveAt sets the "love_at" field.
func (bec *BlogsExtendCreate) SetLoveAt(i int64) *BlogsExtendCreate {
	bec.mutation.SetLoveAt(i)
	return bec
}

// SetNillableLoveAt sets the "love_at" field if the given value is not nil.
func (bec *BlogsExtendCreate) SetNillableLoveAt(i *int64) *BlogsExtendCreate {
	if i != nil {
		bec.SetLoveAt(*i)
	}
	return bec
}

// SetID sets the "id" field.
func (bec *BlogsExtendCreate) SetID(i int) *BlogsExtendCreate {
	bec.mutation.SetID(i)
	return bec
}

// Mutation returns the BlogsExtendMutation object of the builder.
func (bec *BlogsExtendCreate) Mutation() *BlogsExtendMutation {
	return bec.mutation
}

// Save creates the BlogsExtend in the database.
func (bec *BlogsExtendCreate) Save(ctx context.Context) (*BlogsExtend, error) {
	bec.defaults()
	return withHooks(ctx, bec.sqlSave, bec.mutation, bec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bec *BlogsExtendCreate) SaveX(ctx context.Context) *BlogsExtend {
	v, err := bec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bec *BlogsExtendCreate) Exec(ctx context.Context) error {
	_, err := bec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bec *BlogsExtendCreate) ExecX(ctx context.Context) {
	if err := bec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bec *BlogsExtendCreate) defaults() {
	if _, ok := bec.mutation.BrowseNum(); !ok {
		v := blogsextend.DefaultBrowseNum
		bec.mutation.SetBrowseNum(v)
	}
	if _, ok := bec.mutation.BrowseAt(); !ok {
		v := blogsextend.DefaultBrowseAt
		bec.mutation.SetBrowseAt(v)
	}
	if _, ok := bec.mutation.Collect(); !ok {
		v := blogsextend.DefaultCollect
		bec.mutation.SetCollect(v)
	}
	if _, ok := bec.mutation.CollectAt(); !ok {
		v := blogsextend.DefaultCollectAt
		bec.mutation.SetCollectAt(v)
	}
	if _, ok := bec.mutation.Love(); !ok {
		v := blogsextend.DefaultLove
		bec.mutation.SetLove(v)
	}
	if _, ok := bec.mutation.LoveAt(); !ok {
		v := blogsextend.DefaultLoveAt
		bec.mutation.SetLoveAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bec *BlogsExtendCreate) check() error {
	if _, ok := bec.mutation.BlogID(); !ok {
		return &ValidationError{Name: "blog_id", err: errors.New(`ent: missing required field "BlogsExtend.blog_id"`)}
	}
	if _, ok := bec.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "BlogsExtend.account_id"`)}
	}
	if _, ok := bec.mutation.BrowseNum(); !ok {
		return &ValidationError{Name: "browse_num", err: errors.New(`ent: missing required field "BlogsExtend.browse_num"`)}
	}
	if _, ok := bec.mutation.BrowseAt(); !ok {
		return &ValidationError{Name: "browse_at", err: errors.New(`ent: missing required field "BlogsExtend.browse_at"`)}
	}
	if _, ok := bec.mutation.Collect(); !ok {
		return &ValidationError{Name: "collect", err: errors.New(`ent: missing required field "BlogsExtend.collect"`)}
	}
	if _, ok := bec.mutation.CollectAt(); !ok {
		return &ValidationError{Name: "collect_at", err: errors.New(`ent: missing required field "BlogsExtend.collect_at"`)}
	}
	if _, ok := bec.mutation.Love(); !ok {
		return &ValidationError{Name: "love", err: errors.New(`ent: missing required field "BlogsExtend.love"`)}
	}
	if _, ok := bec.mutation.LoveAt(); !ok {
		return &ValidationError{Name: "love_at", err: errors.New(`ent: missing required field "BlogsExtend.love_at"`)}
	}
	return nil
}

func (bec *BlogsExtendCreate) sqlSave(ctx context.Context) (*BlogsExtend, error) {
	if err := bec.check(); err != nil {
		return nil, err
	}
	_node, _spec := bec.createSpec()
	if err := sqlgraph.CreateNode(ctx, bec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bec.mutation.id = &_node.ID
	bec.mutation.done = true
	return _node, nil
}

func (bec *BlogsExtendCreate) createSpec() (*BlogsExtend, *sqlgraph.CreateSpec) {
	var (
		_node = &BlogsExtend{config: bec.config}
		_spec = sqlgraph.NewCreateSpec(blogsextend.Table, sqlgraph.NewFieldSpec(blogsextend.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bec.conflict
	if id, ok := bec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bec.mutation.BlogID(); ok {
		_spec.SetField(blogsextend.FieldBlogID, field.TypeInt, value)
		_node.BlogID = value
	}
	if value, ok := bec.mutation.AccountID(); ok {
		_spec.SetField(blogsextend.FieldAccountID, field.TypeInt, value)
		_node.AccountID = value
	}
	if value, ok := bec.mutation.BrowseNum(); ok {
		_spec.SetField(blogsextend.FieldBrowseNum, field.TypeInt, value)
		_node.BrowseNum = value
	}
	if value, ok := bec.mutation.BrowseAt(); ok {
		_spec.SetField(blogsextend.FieldBrowseAt, field.TypeInt64, value)
		_node.BrowseAt = value
	}
	if value, ok := bec.mutation.Collect(); ok {
		_spec.SetField(blogsextend.FieldCollect, field.TypeBool, value)
		_node.Collect = value
	}
	if value, ok := bec.mutation.CollectAt(); ok {
		_spec.SetField(blogsextend.FieldCollectAt, field.TypeInt64, value)
		_node.CollectAt = value
	}
	if value, ok := bec.mutation.Love(); ok {
		_spec.SetField(blogsextend.FieldLove, field.TypeBool, value)
		_node.Love = value
	}
	if value, ok := bec.mutation.LoveAt(); ok {
		_spec.SetField(blogsextend.FieldLoveAt, field.TypeInt64, value)
		_node.LoveAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlogsExtend.Create().
//		SetBlogID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlogsExtendUpsert) {
//			SetBlogID(v+v).
//		}).
//		Exec(ctx)
func (bec *BlogsExtendCreate) OnConflict(opts ...sql.ConflictOption) *BlogsExtendUpsertOne {
	bec.conflict = opts
	return &BlogsExtendUpsertOne{
		create: bec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlogsExtend.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bec *BlogsExtendCreate) OnConflictColumns(columns ...string) *BlogsExtendUpsertOne {
	bec.conflict = append(bec.conflict, sql.ConflictColumns(columns...))
	return &BlogsExtendUpsertOne{
		create: bec,
	}
}

type (
	// BlogsExtendUpsertOne is the builder for "upsert"-ing
	//  one BlogsExtend node.
	BlogsExtendUpsertOne struct {
		create *BlogsExtendCreate
	}

	// BlogsExtendUpsert is the "OnConflict" setter.
	BlogsExtendUpsert struct {
		*sql.UpdateSet
	}
)

// SetBlogID sets the "blog_id" field.
func (u *BlogsExtendUpsert) SetBlogID(v int) *BlogsExtendUpsert {
	u.Set(blogsextend.FieldBlogID, v)
	return u
}

// UpdateBlogID sets the "blog_id" field to the value that was provided on create.
func (u *BlogsExtendUpsert) UpdateBlogID() *BlogsExtendUpsert {
	u.SetExcluded(blogsextend.FieldBlogID)
	return u
}

// AddBlogID adds v to the "blog_id" field.
func (u *BlogsExtendUpsert) AddBlogID(v int) *BlogsExtendUpsert {
	u.Add(blogsextend.FieldBlogID, v)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *BlogsExtendUpsert) SetAccountID(v int) *BlogsExtendUpsert {
	u.Set(blogsextend.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *BlogsExtendUpsert) UpdateAccountID() *BlogsExtendUpsert {
	u.SetExcluded(blogsextend.FieldAccountID)
	return u
}

// AddAccountID adds v to the "account_id" field.
func (u *BlogsExtendUpsert) AddAccountID(v int) *BlogsExtendUpsert {
	u.Add(blogsextend.FieldAccountID, v)
	return u
}

// SetBrowseNum sets the "browse_num" field.
func (u *BlogsExtendUpsert) SetBrowseNum(v int) *BlogsExtendUpsert {
	u.Set(blogsextend.FieldBrowseNum, v)
	return u
}

// UpdateBrowseNum sets the "browse_num" field to the value that was provided on create.
func (u *BlogsExtendUpsert) UpdateBrowseNum() *BlogsExtendUpsert {
	u.SetExcluded(blogsextend.FieldBrowseNum)
	return u
}

// AddBrowseNum adds v to the "browse_num" field.
func (u *BlogsExtendUpsert) AddBrowseNum(v int) *BlogsExtendUpsert {
	u.Add(blogsextend.FieldBrowseNum, v)
	return u
}

// SetBrowseAt sets the "browse_at" field.
func (u *BlogsExtendUpsert) SetBrowseAt(v int64) *BlogsExtendUpsert {
	u.Set(blogsextend.FieldBrowseAt, v)
	return u
}

// UpdateBrowseAt sets the "browse_at" field to the value that was provided on create.
func (u *BlogsExtendUpsert) UpdateBrowseAt() *BlogsExtendUpsert {
	u.SetExcluded(blogsextend.FieldBrowseAt)
	return u
}

// AddBrowseAt adds v to the "browse_at" field.
func (u *BlogsExtendUpsert) AddBrowseAt(v int64) *BlogsExtendUpsert {
	u.Add(blogsextend.FieldBrowseAt, v)
	return u
}

// SetCollect sets the "collect" field.
func (u *BlogsExtendUpsert) SetCollect(v bool) *BlogsExtendUpsert {
	u.Set(blogsextend.FieldCollect, v)
	return u
}

// UpdateCollect sets the "collect" field to the value that was provided on create.
func (u *BlogsExtendUpsert) UpdateCollect() *BlogsExtendUpsert {
	u.SetExcluded(blogsextend.FieldCollect)
	return u
}

// SetCollectAt sets the "collect_at" field.
func (u *BlogsExtendUpsert) SetCollectAt(v int64) *BlogsExtendUpsert {
	u.Set(blogsextend.FieldCollectAt, v)
	return u
}

// UpdateCollectAt sets the "collect_at" field to the value that was provided on create.
func (u *BlogsExtendUpsert) UpdateCollectAt() *BlogsExtendUpsert {
	u.SetExcluded(blogsextend.FieldCollectAt)
	return u
}

// AddCollectAt adds v to the "collect_at" field.
func (u *BlogsExtendUpsert) AddCollectAt(v int64) *BlogsExtendUpsert {
	u.Add(blogsextend.FieldCollectAt, v)
	return u
}

// SetLove sets the "love" field.
func (u *BlogsExtendUpsert) SetLove(v bool) *BlogsExtendUpsert {
	u.Set(blogsextend.FieldLove, v)
	return u
}

// UpdateLove sets the "love" field to the value that was provided on create.
func (u *BlogsExtendUpsert) UpdateLove() *BlogsExtendUpsert {
	u.SetExcluded(blogsextend.FieldLove)
	return u
}

// SetLoveAt sets the "love_at" field.
func (u *BlogsExtendUpsert) SetLoveAt(v int64) *BlogsExtendUpsert {
	u.Set(blogsextend.FieldLoveAt, v)
	return u
}

// UpdateLoveAt sets the "love_at" field to the value that was provided on create.
func (u *BlogsExtendUpsert) UpdateLoveAt() *BlogsExtendUpsert {
	u.SetExcluded(blogsextend.FieldLoveAt)
	return u
}

// AddLoveAt adds v to the "love_at" field.
func (u *BlogsExtendUpsert) AddLoveAt(v int64) *BlogsExtendUpsert {
	u.Add(blogsextend.FieldLoveAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BlogsExtend.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blogsextend.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlogsExtendUpsertOne) UpdateNewValues() *BlogsExtendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(blogsextend.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlogsExtend.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlogsExtendUpsertOne) Ignore() *BlogsExtendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlogsExtendUpsertOne) DoNothing() *BlogsExtendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlogsExtendCreate.OnConflict
// documentation for more info.
func (u *BlogsExtendUpsertOne) Update(set func(*BlogsExtendUpsert)) *BlogsExtendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlogsExtendUpsert{UpdateSet: update})
	}))
	return u
}

// SetBlogID sets the "blog_id" field.
func (u *BlogsExtendUpsertOne) SetBlogID(v int) *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetBlogID(v)
	})
}

// AddBlogID adds v to the "blog_id" field.
func (u *BlogsExtendUpsertOne) AddBlogID(v int) *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.AddBlogID(v)
	})
}

// UpdateBlogID sets the "blog_id" field to the value that was provided on create.
func (u *BlogsExtendUpsertOne) UpdateBlogID() *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateBlogID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *BlogsExtendUpsertOne) SetAccountID(v int) *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *BlogsExtendUpsertOne) AddAccountID(v int) *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *BlogsExtendUpsertOne) UpdateAccountID() *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateAccountID()
	})
}

// SetBrowseNum sets the "browse_num" field.
func (u *BlogsExtendUpsertOne) SetBrowseNum(v int) *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetBrowseNum(v)
	})
}

// AddBrowseNum adds v to the "browse_num" field.
func (u *BlogsExtendUpsertOne) AddBrowseNum(v int) *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.AddBrowseNum(v)
	})
}

// UpdateBrowseNum sets the "browse_num" field to the value that was provided on create.
func (u *BlogsExtendUpsertOne) UpdateBrowseNum() *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateBrowseNum()
	})
}

// SetBrowseAt sets the "browse_at" field.
func (u *BlogsExtendUpsertOne) SetBrowseAt(v int64) *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetBrowseAt(v)
	})
}

// AddBrowseAt adds v to the "browse_at" field.
func (u *BlogsExtendUpsertOne) AddBrowseAt(v int64) *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.AddBrowseAt(v)
	})
}

// UpdateBrowseAt sets the "browse_at" field to the value that was provided on create.
func (u *BlogsExtendUpsertOne) UpdateBrowseAt() *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateBrowseAt()
	})
}

// SetCollect sets the "collect" field.
func (u *BlogsExtendUpsertOne) SetCollect(v bool) *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetCollect(v)
	})
}

// UpdateCollect sets the "collect" field to the value that was provided on create.
func (u *BlogsExtendUpsertOne) UpdateCollect() *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateCollect()
	})
}

// SetCollectAt sets the "collect_at" field.
func (u *BlogsExtendUpsertOne) SetCollectAt(v int64) *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetCollectAt(v)
	})
}

// AddCollectAt adds v to the "collect_at" field.
func (u *BlogsExtendUpsertOne) AddCollectAt(v int64) *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.AddCollectAt(v)
	})
}

// UpdateCollectAt sets the "collect_at" field to the value that was provided on create.
func (u *BlogsExtendUpsertOne) UpdateCollectAt() *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateCollectAt()
	})
}

// SetLove sets the "love" field.
func (u *BlogsExtendUpsertOne) SetLove(v bool) *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetLove(v)
	})
}

// UpdateLove sets the "love" field to the value that was provided on create.
func (u *BlogsExtendUpsertOne) UpdateLove() *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateLove()
	})
}

// SetLoveAt sets the "love_at" field.
func (u *BlogsExtendUpsertOne) SetLoveAt(v int64) *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetLoveAt(v)
	})
}

// AddLoveAt adds v to the "love_at" field.
func (u *BlogsExtendUpsertOne) AddLoveAt(v int64) *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.AddLoveAt(v)
	})
}

// UpdateLoveAt sets the "love_at" field to the value that was provided on create.
func (u *BlogsExtendUpsertOne) UpdateLoveAt() *BlogsExtendUpsertOne {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateLoveAt()
	})
}

// Exec executes the query.
func (u *BlogsExtendUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlogsExtendCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlogsExtendUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlogsExtendUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlogsExtendUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlogsExtendCreateBulk is the builder for creating many BlogsExtend entities in bulk.
type BlogsExtendCreateBulk struct {
	config
	err      error
	builders []*BlogsExtendCreate
	conflict []sql.ConflictOption
}

// Save creates the BlogsExtend entities in the database.
func (becb *BlogsExtendCreateBulk) Save(ctx context.Context) ([]*BlogsExtend, error) {
	if becb.err != nil {
		return nil, becb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(becb.builders))
	nodes := make([]*BlogsExtend, len(becb.builders))
	mutators := make([]Mutator, len(becb.builders))
	for i := range becb.builders {
		func(i int, root context.Context) {
			builder := becb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogsExtendMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, becb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = becb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, becb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, becb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (becb *BlogsExtendCreateBulk) SaveX(ctx context.Context) []*BlogsExtend {
	v, err := becb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (becb *BlogsExtendCreateBulk) Exec(ctx context.Context) error {
	_, err := becb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (becb *BlogsExtendCreateBulk) ExecX(ctx context.Context) {
	if err := becb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlogsExtend.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlogsExtendUpsert) {
//			SetBlogID(v+v).
//		}).
//		Exec(ctx)
func (becb *BlogsExtendCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlogsExtendUpsertBulk {
	becb.conflict = opts
	return &BlogsExtendUpsertBulk{
		create: becb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlogsExtend.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (becb *BlogsExtendCreateBulk) OnConflictColumns(columns ...string) *BlogsExtendUpsertBulk {
	becb.conflict = append(becb.conflict, sql.ConflictColumns(columns...))
	return &BlogsExtendUpsertBulk{
		create: becb,
	}
}

// BlogsExtendUpsertBulk is the builder for "upsert"-ing
// a bulk of BlogsExtend nodes.
type BlogsExtendUpsertBulk struct {
	create *BlogsExtendCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlogsExtend.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blogsextend.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlogsExtendUpsertBulk) UpdateNewValues() *BlogsExtendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(blogsextend.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlogsExtend.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlogsExtendUpsertBulk) Ignore() *BlogsExtendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlogsExtendUpsertBulk) DoNothing() *BlogsExtendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlogsExtendCreateBulk.OnConflict
// documentation for more info.
func (u *BlogsExtendUpsertBulk) Update(set func(*BlogsExtendUpsert)) *BlogsExtendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlogsExtendUpsert{UpdateSet: update})
	}))
	return u
}

// SetBlogID sets the "blog_id" field.
func (u *BlogsExtendUpsertBulk) SetBlogID(v int) *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetBlogID(v)
	})
}

// AddBlogID adds v to the "blog_id" field.
func (u *BlogsExtendUpsertBulk) AddBlogID(v int) *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.AddBlogID(v)
	})
}

// UpdateBlogID sets the "blog_id" field to the value that was provided on create.
func (u *BlogsExtendUpsertBulk) UpdateBlogID() *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateBlogID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *BlogsExtendUpsertBulk) SetAccountID(v int) *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *BlogsExtendUpsertBulk) AddAccountID(v int) *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *BlogsExtendUpsertBulk) UpdateAccountID() *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateAccountID()
	})
}

// SetBrowseNum sets the "browse_num" field.
func (u *BlogsExtendUpsertBulk) SetBrowseNum(v int) *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetBrowseNum(v)
	})
}

// AddBrowseNum adds v to the "browse_num" field.
func (u *BlogsExtendUpsertBulk) AddBrowseNum(v int) *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.AddBrowseNum(v)
	})
}

// UpdateBrowseNum sets the "browse_num" field to the value that was provided on create.
func (u *BlogsExtendUpsertBulk) UpdateBrowseNum() *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateBrowseNum()
	})
}

// SetBrowseAt sets the "browse_at" field.
func (u *BlogsExtendUpsertBulk) SetBrowseAt(v int64) *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetBrowseAt(v)
	})
}

// AddBrowseAt adds v to the "browse_at" field.
func (u *BlogsExtendUpsertBulk) AddBrowseAt(v int64) *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.AddBrowseAt(v)
	})
}

// UpdateBrowseAt sets the "browse_at" field to the value that was provided on create.
func (u *BlogsExtendUpsertBulk) UpdateBrowseAt() *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateBrowseAt()
	})
}

// SetCollect sets the "collect" field.
func (u *BlogsExtendUpsertBulk) SetCollect(v bool) *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetCollect(v)
	})
}

// UpdateCollect sets the "collect" field to the value that was provided on create.
func (u *BlogsExtendUpsertBulk) UpdateCollect() *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateCollect()
	})
}

// SetCollectAt sets the "collect_at" field.
func (u *BlogsExtendUpsertBulk) SetCollectAt(v int64) *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetCollectAt(v)
	})
}

// AddCollectAt adds v to the "collect_at" field.
func (u *BlogsExtendUpsertBulk) AddCollectAt(v int64) *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.AddCollectAt(v)
	})
}

// UpdateCollectAt sets the "collect_at" field to the value that was provided on create.
func (u *BlogsExtendUpsertBulk) UpdateCollectAt() *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateCollectAt()
	})
}

// SetLove sets the "love" field.
func (u *BlogsExtendUpsertBulk) SetLove(v bool) *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetLove(v)
	})
}

// UpdateLove sets the "love" field to the value that was provided on create.
func (u *BlogsExtendUpsertBulk) UpdateLove() *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateLove()
	})
}

// SetLoveAt sets the "love_at" field.
func (u *BlogsExtendUpsertBulk) SetLoveAt(v int64) *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.SetLoveAt(v)
	})
}

// AddLoveAt adds v to the "love_at" field.
func (u *BlogsExtendUpsertBulk) AddLoveAt(v int64) *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.AddLoveAt(v)
	})
}

// UpdateLoveAt sets the "love_at" field to the value that was provided on create.
func (u *BlogsExtendUpsertBulk) UpdateLoveAt() *BlogsExtendUpsertBulk {
	return u.Update(func(s *BlogsExtendUpsert) {
		s.UpdateLoveAt()
	})
}

// Exec executes the query.
func (u *BlogsExtendUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlogsExtendCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlogsExtendCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlogsExtendUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
