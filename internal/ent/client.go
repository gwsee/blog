// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"blog/internal/ent/migrate"

	"blog/internal/ent/account"
	"blog/internal/ent/blogs"
	"blog/internal/ent/blogscomment"
	"blog/internal/ent/blogscontent"
	"blog/internal/ent/blogsextend"
	"blog/internal/ent/files"
	"blog/internal/ent/filesextend"
	"blog/internal/ent/palacesmemo"
	"blog/internal/ent/palacesmemory"
	"blog/internal/ent/palacestodo"
	"blog/internal/ent/palacestododone"
	"blog/internal/ent/tags"
	"blog/internal/ent/tagsrelation"
	"blog/internal/ent/travelextends"
	"blog/internal/ent/travels"
	"blog/internal/ent/user"
	"blog/internal/ent/userexperience"
	"blog/internal/ent/userfamousquotes"
	"blog/internal/ent/userproject"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Account is the client for interacting with the Account builders.
	Account *AccountClient
	// Blogs is the client for interacting with the Blogs builders.
	Blogs *BlogsClient
	// BlogsComment is the client for interacting with the BlogsComment builders.
	BlogsComment *BlogsCommentClient
	// BlogsContent is the client for interacting with the BlogsContent builders.
	BlogsContent *BlogsContentClient
	// BlogsExtend is the client for interacting with the BlogsExtend builders.
	BlogsExtend *BlogsExtendClient
	// Files is the client for interacting with the Files builders.
	Files *FilesClient
	// FilesExtend is the client for interacting with the FilesExtend builders.
	FilesExtend *FilesExtendClient
	// PalacesMemo is the client for interacting with the PalacesMemo builders.
	PalacesMemo *PalacesMemoClient
	// PalacesMemory is the client for interacting with the PalacesMemory builders.
	PalacesMemory *PalacesMemoryClient
	// PalacesTodo is the client for interacting with the PalacesTodo builders.
	PalacesTodo *PalacesTodoClient
	// PalacesTodoDone is the client for interacting with the PalacesTodoDone builders.
	PalacesTodoDone *PalacesTodoDoneClient
	// Tags is the client for interacting with the Tags builders.
	Tags *TagsClient
	// TagsRelation is the client for interacting with the TagsRelation builders.
	TagsRelation *TagsRelationClient
	// TravelExtends is the client for interacting with the TravelExtends builders.
	TravelExtends *TravelExtendsClient
	// Travels is the client for interacting with the Travels builders.
	Travels *TravelsClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserExperience is the client for interacting with the UserExperience builders.
	UserExperience *UserExperienceClient
	// UserFamousQuotes is the client for interacting with the UserFamousQuotes builders.
	UserFamousQuotes *UserFamousQuotesClient
	// UserProject is the client for interacting with the UserProject builders.
	UserProject *UserProjectClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Account = NewAccountClient(c.config)
	c.Blogs = NewBlogsClient(c.config)
	c.BlogsComment = NewBlogsCommentClient(c.config)
	c.BlogsContent = NewBlogsContentClient(c.config)
	c.BlogsExtend = NewBlogsExtendClient(c.config)
	c.Files = NewFilesClient(c.config)
	c.FilesExtend = NewFilesExtendClient(c.config)
	c.PalacesMemo = NewPalacesMemoClient(c.config)
	c.PalacesMemory = NewPalacesMemoryClient(c.config)
	c.PalacesTodo = NewPalacesTodoClient(c.config)
	c.PalacesTodoDone = NewPalacesTodoDoneClient(c.config)
	c.Tags = NewTagsClient(c.config)
	c.TagsRelation = NewTagsRelationClient(c.config)
	c.TravelExtends = NewTravelExtendsClient(c.config)
	c.Travels = NewTravelsClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserExperience = NewUserExperienceClient(c.config)
	c.UserFamousQuotes = NewUserFamousQuotesClient(c.config)
	c.UserProject = NewUserProjectClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Account:          NewAccountClient(cfg),
		Blogs:            NewBlogsClient(cfg),
		BlogsComment:     NewBlogsCommentClient(cfg),
		BlogsContent:     NewBlogsContentClient(cfg),
		BlogsExtend:      NewBlogsExtendClient(cfg),
		Files:            NewFilesClient(cfg),
		FilesExtend:      NewFilesExtendClient(cfg),
		PalacesMemo:      NewPalacesMemoClient(cfg),
		PalacesMemory:    NewPalacesMemoryClient(cfg),
		PalacesTodo:      NewPalacesTodoClient(cfg),
		PalacesTodoDone:  NewPalacesTodoDoneClient(cfg),
		Tags:             NewTagsClient(cfg),
		TagsRelation:     NewTagsRelationClient(cfg),
		TravelExtends:    NewTravelExtendsClient(cfg),
		Travels:          NewTravelsClient(cfg),
		User:             NewUserClient(cfg),
		UserExperience:   NewUserExperienceClient(cfg),
		UserFamousQuotes: NewUserFamousQuotesClient(cfg),
		UserProject:      NewUserProjectClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Account:          NewAccountClient(cfg),
		Blogs:            NewBlogsClient(cfg),
		BlogsComment:     NewBlogsCommentClient(cfg),
		BlogsContent:     NewBlogsContentClient(cfg),
		BlogsExtend:      NewBlogsExtendClient(cfg),
		Files:            NewFilesClient(cfg),
		FilesExtend:      NewFilesExtendClient(cfg),
		PalacesMemo:      NewPalacesMemoClient(cfg),
		PalacesMemory:    NewPalacesMemoryClient(cfg),
		PalacesTodo:      NewPalacesTodoClient(cfg),
		PalacesTodoDone:  NewPalacesTodoDoneClient(cfg),
		Tags:             NewTagsClient(cfg),
		TagsRelation:     NewTagsRelationClient(cfg),
		TravelExtends:    NewTravelExtendsClient(cfg),
		Travels:          NewTravelsClient(cfg),
		User:             NewUserClient(cfg),
		UserExperience:   NewUserExperienceClient(cfg),
		UserFamousQuotes: NewUserFamousQuotesClient(cfg),
		UserProject:      NewUserProjectClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Account.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Account, c.Blogs, c.BlogsComment, c.BlogsContent, c.BlogsExtend, c.Files,
		c.FilesExtend, c.PalacesMemo, c.PalacesMemory, c.PalacesTodo,
		c.PalacesTodoDone, c.Tags, c.TagsRelation, c.TravelExtends, c.Travels, c.User,
		c.UserExperience, c.UserFamousQuotes, c.UserProject,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Account, c.Blogs, c.BlogsComment, c.BlogsContent, c.BlogsExtend, c.Files,
		c.FilesExtend, c.PalacesMemo, c.PalacesMemory, c.PalacesTodo,
		c.PalacesTodoDone, c.Tags, c.TagsRelation, c.TravelExtends, c.Travels, c.User,
		c.UserExperience, c.UserFamousQuotes, c.UserProject,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AccountMutation:
		return c.Account.mutate(ctx, m)
	case *BlogsMutation:
		return c.Blogs.mutate(ctx, m)
	case *BlogsCommentMutation:
		return c.BlogsComment.mutate(ctx, m)
	case *BlogsContentMutation:
		return c.BlogsContent.mutate(ctx, m)
	case *BlogsExtendMutation:
		return c.BlogsExtend.mutate(ctx, m)
	case *FilesMutation:
		return c.Files.mutate(ctx, m)
	case *FilesExtendMutation:
		return c.FilesExtend.mutate(ctx, m)
	case *PalacesMemoMutation:
		return c.PalacesMemo.mutate(ctx, m)
	case *PalacesMemoryMutation:
		return c.PalacesMemory.mutate(ctx, m)
	case *PalacesTodoMutation:
		return c.PalacesTodo.mutate(ctx, m)
	case *PalacesTodoDoneMutation:
		return c.PalacesTodoDone.mutate(ctx, m)
	case *TagsMutation:
		return c.Tags.mutate(ctx, m)
	case *TagsRelationMutation:
		return c.TagsRelation.mutate(ctx, m)
	case *TravelExtendsMutation:
		return c.TravelExtends.mutate(ctx, m)
	case *TravelsMutation:
		return c.Travels.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserExperienceMutation:
		return c.UserExperience.mutate(ctx, m)
	case *UserFamousQuotesMutation:
		return c.UserFamousQuotes.mutate(ctx, m)
	case *UserProjectMutation:
		return c.UserProject.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AccountClient is a client for the Account schema.
type AccountClient struct {
	config
}

// NewAccountClient returns a client for the Account from the given config.
func NewAccountClient(c config) *AccountClient {
	return &AccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `account.Hooks(f(g(h())))`.
func (c *AccountClient) Use(hooks ...Hook) {
	c.hooks.Account = append(c.hooks.Account, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `account.Intercept(f(g(h())))`.
func (c *AccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.Account = append(c.inters.Account, interceptors...)
}

// Create returns a builder for creating a Account entity.
func (c *AccountClient) Create() *AccountCreate {
	mutation := newAccountMutation(c.config, OpCreate)
	return &AccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Account entities.
func (c *AccountClient) CreateBulk(builders ...*AccountCreate) *AccountCreateBulk {
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AccountClient) MapCreateBulk(slice any, setFunc func(*AccountCreate, int)) *AccountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AccountCreateBulk{err: fmt.Errorf("calling to AccountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AccountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Account.
func (c *AccountClient) Update() *AccountUpdate {
	mutation := newAccountMutation(c.config, OpUpdate)
	return &AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountClient) UpdateOne(a *Account) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccount(a))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountClient) UpdateOneID(id int) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccountID(id))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Account.
func (c *AccountClient) Delete() *AccountDelete {
	mutation := newAccountMutation(c.config, OpDelete)
	return &AccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountClient) DeleteOne(a *Account) *AccountDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccountClient) DeleteOneID(id int) *AccountDeleteOne {
	builder := c.Delete().Where(account.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountDeleteOne{builder}
}

// Query returns a query builder for Account.
func (c *AccountClient) Query() *AccountQuery {
	return &AccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a Account entity by its id.
func (c *AccountClient) Get(ctx context.Context, id int) (*Account, error) {
	return c.Query().Where(account.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountClient) GetX(ctx context.Context, id int) *Account {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTravels queries the travels edge of a Account.
func (c *AccountClient) QueryTravels(a *Account) *TravelsQuery {
	query := (&TravelsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(account.Table, account.FieldID, id),
			sqlgraph.To(travels.Table, travels.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, account.TravelsTable, account.TravelsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccountClient) Hooks() []Hook {
	hooks := c.hooks.Account
	return append(hooks[:len(hooks):len(hooks)], account.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AccountClient) Interceptors() []Interceptor {
	inters := c.inters.Account
	return append(inters[:len(inters):len(inters)], account.Interceptors[:]...)
}

func (c *AccountClient) mutate(ctx context.Context, m *AccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Account mutation op: %q", m.Op())
	}
}

// BlogsClient is a client for the Blogs schema.
type BlogsClient struct {
	config
}

// NewBlogsClient returns a client for the Blogs from the given config.
func NewBlogsClient(c config) *BlogsClient {
	return &BlogsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogs.Hooks(f(g(h())))`.
func (c *BlogsClient) Use(hooks ...Hook) {
	c.hooks.Blogs = append(c.hooks.Blogs, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogs.Intercept(f(g(h())))`.
func (c *BlogsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Blogs = append(c.inters.Blogs, interceptors...)
}

// Create returns a builder for creating a Blogs entity.
func (c *BlogsClient) Create() *BlogsCreate {
	mutation := newBlogsMutation(c.config, OpCreate)
	return &BlogsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Blogs entities.
func (c *BlogsClient) CreateBulk(builders ...*BlogsCreate) *BlogsCreateBulk {
	return &BlogsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogsClient) MapCreateBulk(slice any, setFunc func(*BlogsCreate, int)) *BlogsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogsCreateBulk{err: fmt.Errorf("calling to BlogsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Blogs.
func (c *BlogsClient) Update() *BlogsUpdate {
	mutation := newBlogsMutation(c.config, OpUpdate)
	return &BlogsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogsClient) UpdateOne(b *Blogs) *BlogsUpdateOne {
	mutation := newBlogsMutation(c.config, OpUpdateOne, withBlogs(b))
	return &BlogsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogsClient) UpdateOneID(id int) *BlogsUpdateOne {
	mutation := newBlogsMutation(c.config, OpUpdateOne, withBlogsID(id))
	return &BlogsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Blogs.
func (c *BlogsClient) Delete() *BlogsDelete {
	mutation := newBlogsMutation(c.config, OpDelete)
	return &BlogsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogsClient) DeleteOne(b *Blogs) *BlogsDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogsClient) DeleteOneID(id int) *BlogsDeleteOne {
	builder := c.Delete().Where(blogs.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogsDeleteOne{builder}
}

// Query returns a query builder for Blogs.
func (c *BlogsClient) Query() *BlogsQuery {
	return &BlogsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogs},
		inters: c.Interceptors(),
	}
}

// Get returns a Blogs entity by its id.
func (c *BlogsClient) Get(ctx context.Context, id int) (*Blogs, error) {
	return c.Query().Where(blogs.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogsClient) GetX(ctx context.Context, id int) *Blogs {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTag queries the tag edge of a Blogs.
func (c *BlogsClient) QueryTag(b *Blogs) *TagsQuery {
	query := (&TagsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogs.Table, blogs.FieldID, id),
			sqlgraph.To(tags.Table, tags.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, blogs.TagTable, blogs.TagPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTagRelation queries the tag_relation edge of a Blogs.
func (c *BlogsClient) QueryTagRelation(b *Blogs) *TagsRelationQuery {
	query := (&TagsRelationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogs.Table, blogs.FieldID, id),
			sqlgraph.To(tagsrelation.Table, tagsrelation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, blogs.TagRelationTable, blogs.TagRelationColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlogsClient) Hooks() []Hook {
	hooks := c.hooks.Blogs
	return append(hooks[:len(hooks):len(hooks)], blogs.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *BlogsClient) Interceptors() []Interceptor {
	inters := c.inters.Blogs
	return append(inters[:len(inters):len(inters)], blogs.Interceptors[:]...)
}

func (c *BlogsClient) mutate(ctx context.Context, m *BlogsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Blogs mutation op: %q", m.Op())
	}
}

// BlogsCommentClient is a client for the BlogsComment schema.
type BlogsCommentClient struct {
	config
}

// NewBlogsCommentClient returns a client for the BlogsComment from the given config.
func NewBlogsCommentClient(c config) *BlogsCommentClient {
	return &BlogsCommentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogscomment.Hooks(f(g(h())))`.
func (c *BlogsCommentClient) Use(hooks ...Hook) {
	c.hooks.BlogsComment = append(c.hooks.BlogsComment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogscomment.Intercept(f(g(h())))`.
func (c *BlogsCommentClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogsComment = append(c.inters.BlogsComment, interceptors...)
}

// Create returns a builder for creating a BlogsComment entity.
func (c *BlogsCommentClient) Create() *BlogsCommentCreate {
	mutation := newBlogsCommentMutation(c.config, OpCreate)
	return &BlogsCommentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogsComment entities.
func (c *BlogsCommentClient) CreateBulk(builders ...*BlogsCommentCreate) *BlogsCommentCreateBulk {
	return &BlogsCommentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogsCommentClient) MapCreateBulk(slice any, setFunc func(*BlogsCommentCreate, int)) *BlogsCommentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogsCommentCreateBulk{err: fmt.Errorf("calling to BlogsCommentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogsCommentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogsCommentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogsComment.
func (c *BlogsCommentClient) Update() *BlogsCommentUpdate {
	mutation := newBlogsCommentMutation(c.config, OpUpdate)
	return &BlogsCommentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogsCommentClient) UpdateOne(bc *BlogsComment) *BlogsCommentUpdateOne {
	mutation := newBlogsCommentMutation(c.config, OpUpdateOne, withBlogsComment(bc))
	return &BlogsCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogsCommentClient) UpdateOneID(id int) *BlogsCommentUpdateOne {
	mutation := newBlogsCommentMutation(c.config, OpUpdateOne, withBlogsCommentID(id))
	return &BlogsCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogsComment.
func (c *BlogsCommentClient) Delete() *BlogsCommentDelete {
	mutation := newBlogsCommentMutation(c.config, OpDelete)
	return &BlogsCommentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogsCommentClient) DeleteOne(bc *BlogsComment) *BlogsCommentDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogsCommentClient) DeleteOneID(id int) *BlogsCommentDeleteOne {
	builder := c.Delete().Where(blogscomment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogsCommentDeleteOne{builder}
}

// Query returns a query builder for BlogsComment.
func (c *BlogsCommentClient) Query() *BlogsCommentQuery {
	return &BlogsCommentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogsComment},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogsComment entity by its id.
func (c *BlogsCommentClient) Get(ctx context.Context, id int) (*BlogsComment, error) {
	return c.Query().Where(blogscomment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogsCommentClient) GetX(ctx context.Context, id int) *BlogsComment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BlogsCommentClient) Hooks() []Hook {
	hooks := c.hooks.BlogsComment
	return append(hooks[:len(hooks):len(hooks)], blogscomment.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *BlogsCommentClient) Interceptors() []Interceptor {
	inters := c.inters.BlogsComment
	return append(inters[:len(inters):len(inters)], blogscomment.Interceptors[:]...)
}

func (c *BlogsCommentClient) mutate(ctx context.Context, m *BlogsCommentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogsCommentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogsCommentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogsCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogsCommentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogsComment mutation op: %q", m.Op())
	}
}

// BlogsContentClient is a client for the BlogsContent schema.
type BlogsContentClient struct {
	config
}

// NewBlogsContentClient returns a client for the BlogsContent from the given config.
func NewBlogsContentClient(c config) *BlogsContentClient {
	return &BlogsContentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogscontent.Hooks(f(g(h())))`.
func (c *BlogsContentClient) Use(hooks ...Hook) {
	c.hooks.BlogsContent = append(c.hooks.BlogsContent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogscontent.Intercept(f(g(h())))`.
func (c *BlogsContentClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogsContent = append(c.inters.BlogsContent, interceptors...)
}

// Create returns a builder for creating a BlogsContent entity.
func (c *BlogsContentClient) Create() *BlogsContentCreate {
	mutation := newBlogsContentMutation(c.config, OpCreate)
	return &BlogsContentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogsContent entities.
func (c *BlogsContentClient) CreateBulk(builders ...*BlogsContentCreate) *BlogsContentCreateBulk {
	return &BlogsContentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogsContentClient) MapCreateBulk(slice any, setFunc func(*BlogsContentCreate, int)) *BlogsContentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogsContentCreateBulk{err: fmt.Errorf("calling to BlogsContentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogsContentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogsContentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogsContent.
func (c *BlogsContentClient) Update() *BlogsContentUpdate {
	mutation := newBlogsContentMutation(c.config, OpUpdate)
	return &BlogsContentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogsContentClient) UpdateOne(bc *BlogsContent) *BlogsContentUpdateOne {
	mutation := newBlogsContentMutation(c.config, OpUpdateOne, withBlogsContent(bc))
	return &BlogsContentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogsContentClient) UpdateOneID(id int) *BlogsContentUpdateOne {
	mutation := newBlogsContentMutation(c.config, OpUpdateOne, withBlogsContentID(id))
	return &BlogsContentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogsContent.
func (c *BlogsContentClient) Delete() *BlogsContentDelete {
	mutation := newBlogsContentMutation(c.config, OpDelete)
	return &BlogsContentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogsContentClient) DeleteOne(bc *BlogsContent) *BlogsContentDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogsContentClient) DeleteOneID(id int) *BlogsContentDeleteOne {
	builder := c.Delete().Where(blogscontent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogsContentDeleteOne{builder}
}

// Query returns a query builder for BlogsContent.
func (c *BlogsContentClient) Query() *BlogsContentQuery {
	return &BlogsContentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogsContent},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogsContent entity by its id.
func (c *BlogsContentClient) Get(ctx context.Context, id int) (*BlogsContent, error) {
	return c.Query().Where(blogscontent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogsContentClient) GetX(ctx context.Context, id int) *BlogsContent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BlogsContentClient) Hooks() []Hook {
	return c.hooks.BlogsContent
}

// Interceptors returns the client interceptors.
func (c *BlogsContentClient) Interceptors() []Interceptor {
	return c.inters.BlogsContent
}

func (c *BlogsContentClient) mutate(ctx context.Context, m *BlogsContentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogsContentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogsContentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogsContentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogsContentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogsContent mutation op: %q", m.Op())
	}
}

// BlogsExtendClient is a client for the BlogsExtend schema.
type BlogsExtendClient struct {
	config
}

// NewBlogsExtendClient returns a client for the BlogsExtend from the given config.
func NewBlogsExtendClient(c config) *BlogsExtendClient {
	return &BlogsExtendClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogsextend.Hooks(f(g(h())))`.
func (c *BlogsExtendClient) Use(hooks ...Hook) {
	c.hooks.BlogsExtend = append(c.hooks.BlogsExtend, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogsextend.Intercept(f(g(h())))`.
func (c *BlogsExtendClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogsExtend = append(c.inters.BlogsExtend, interceptors...)
}

// Create returns a builder for creating a BlogsExtend entity.
func (c *BlogsExtendClient) Create() *BlogsExtendCreate {
	mutation := newBlogsExtendMutation(c.config, OpCreate)
	return &BlogsExtendCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogsExtend entities.
func (c *BlogsExtendClient) CreateBulk(builders ...*BlogsExtendCreate) *BlogsExtendCreateBulk {
	return &BlogsExtendCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogsExtendClient) MapCreateBulk(slice any, setFunc func(*BlogsExtendCreate, int)) *BlogsExtendCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogsExtendCreateBulk{err: fmt.Errorf("calling to BlogsExtendClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogsExtendCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogsExtendCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogsExtend.
func (c *BlogsExtendClient) Update() *BlogsExtendUpdate {
	mutation := newBlogsExtendMutation(c.config, OpUpdate)
	return &BlogsExtendUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogsExtendClient) UpdateOne(be *BlogsExtend) *BlogsExtendUpdateOne {
	mutation := newBlogsExtendMutation(c.config, OpUpdateOne, withBlogsExtend(be))
	return &BlogsExtendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogsExtendClient) UpdateOneID(id int) *BlogsExtendUpdateOne {
	mutation := newBlogsExtendMutation(c.config, OpUpdateOne, withBlogsExtendID(id))
	return &BlogsExtendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogsExtend.
func (c *BlogsExtendClient) Delete() *BlogsExtendDelete {
	mutation := newBlogsExtendMutation(c.config, OpDelete)
	return &BlogsExtendDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogsExtendClient) DeleteOne(be *BlogsExtend) *BlogsExtendDeleteOne {
	return c.DeleteOneID(be.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogsExtendClient) DeleteOneID(id int) *BlogsExtendDeleteOne {
	builder := c.Delete().Where(blogsextend.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogsExtendDeleteOne{builder}
}

// Query returns a query builder for BlogsExtend.
func (c *BlogsExtendClient) Query() *BlogsExtendQuery {
	return &BlogsExtendQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogsExtend},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogsExtend entity by its id.
func (c *BlogsExtendClient) Get(ctx context.Context, id int) (*BlogsExtend, error) {
	return c.Query().Where(blogsextend.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogsExtendClient) GetX(ctx context.Context, id int) *BlogsExtend {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BlogsExtendClient) Hooks() []Hook {
	return c.hooks.BlogsExtend
}

// Interceptors returns the client interceptors.
func (c *BlogsExtendClient) Interceptors() []Interceptor {
	return c.inters.BlogsExtend
}

func (c *BlogsExtendClient) mutate(ctx context.Context, m *BlogsExtendMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogsExtendCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogsExtendUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogsExtendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogsExtendDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogsExtend mutation op: %q", m.Op())
	}
}

// FilesClient is a client for the Files schema.
type FilesClient struct {
	config
}

// NewFilesClient returns a client for the Files from the given config.
func NewFilesClient(c config) *FilesClient {
	return &FilesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `files.Hooks(f(g(h())))`.
func (c *FilesClient) Use(hooks ...Hook) {
	c.hooks.Files = append(c.hooks.Files, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `files.Intercept(f(g(h())))`.
func (c *FilesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Files = append(c.inters.Files, interceptors...)
}

// Create returns a builder for creating a Files entity.
func (c *FilesClient) Create() *FilesCreate {
	mutation := newFilesMutation(c.config, OpCreate)
	return &FilesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Files entities.
func (c *FilesClient) CreateBulk(builders ...*FilesCreate) *FilesCreateBulk {
	return &FilesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FilesClient) MapCreateBulk(slice any, setFunc func(*FilesCreate, int)) *FilesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FilesCreateBulk{err: fmt.Errorf("calling to FilesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FilesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FilesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Files.
func (c *FilesClient) Update() *FilesUpdate {
	mutation := newFilesMutation(c.config, OpUpdate)
	return &FilesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FilesClient) UpdateOne(f *Files) *FilesUpdateOne {
	mutation := newFilesMutation(c.config, OpUpdateOne, withFiles(f))
	return &FilesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FilesClient) UpdateOneID(id string) *FilesUpdateOne {
	mutation := newFilesMutation(c.config, OpUpdateOne, withFilesID(id))
	return &FilesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Files.
func (c *FilesClient) Delete() *FilesDelete {
	mutation := newFilesMutation(c.config, OpDelete)
	return &FilesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FilesClient) DeleteOne(f *Files) *FilesDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FilesClient) DeleteOneID(id string) *FilesDeleteOne {
	builder := c.Delete().Where(files.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FilesDeleteOne{builder}
}

// Query returns a query builder for Files.
func (c *FilesClient) Query() *FilesQuery {
	return &FilesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFiles},
		inters: c.Interceptors(),
	}
}

// Get returns a Files entity by its id.
func (c *FilesClient) Get(ctx context.Context, id string) (*Files, error) {
	return c.Query().Where(files.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FilesClient) GetX(ctx context.Context, id string) *Files {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExtends queries the extends edge of a Files.
func (c *FilesClient) QueryExtends(f *Files) *FilesExtendQuery {
	query := (&FilesExtendClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(files.Table, files.FieldID, id),
			sqlgraph.To(filesextend.Table, filesextend.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, files.ExtendsTable, files.ExtendsColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FilesClient) Hooks() []Hook {
	hooks := c.hooks.Files
	return append(hooks[:len(hooks):len(hooks)], files.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *FilesClient) Interceptors() []Interceptor {
	inters := c.inters.Files
	return append(inters[:len(inters):len(inters)], files.Interceptors[:]...)
}

func (c *FilesClient) mutate(ctx context.Context, m *FilesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FilesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FilesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FilesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FilesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Files mutation op: %q", m.Op())
	}
}

// FilesExtendClient is a client for the FilesExtend schema.
type FilesExtendClient struct {
	config
}

// NewFilesExtendClient returns a client for the FilesExtend from the given config.
func NewFilesExtendClient(c config) *FilesExtendClient {
	return &FilesExtendClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `filesextend.Hooks(f(g(h())))`.
func (c *FilesExtendClient) Use(hooks ...Hook) {
	c.hooks.FilesExtend = append(c.hooks.FilesExtend, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `filesextend.Intercept(f(g(h())))`.
func (c *FilesExtendClient) Intercept(interceptors ...Interceptor) {
	c.inters.FilesExtend = append(c.inters.FilesExtend, interceptors...)
}

// Create returns a builder for creating a FilesExtend entity.
func (c *FilesExtendClient) Create() *FilesExtendCreate {
	mutation := newFilesExtendMutation(c.config, OpCreate)
	return &FilesExtendCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FilesExtend entities.
func (c *FilesExtendClient) CreateBulk(builders ...*FilesExtendCreate) *FilesExtendCreateBulk {
	return &FilesExtendCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FilesExtendClient) MapCreateBulk(slice any, setFunc func(*FilesExtendCreate, int)) *FilesExtendCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FilesExtendCreateBulk{err: fmt.Errorf("calling to FilesExtendClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FilesExtendCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FilesExtendCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FilesExtend.
func (c *FilesExtendClient) Update() *FilesExtendUpdate {
	mutation := newFilesExtendMutation(c.config, OpUpdate)
	return &FilesExtendUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FilesExtendClient) UpdateOne(fe *FilesExtend) *FilesExtendUpdateOne {
	mutation := newFilesExtendMutation(c.config, OpUpdateOne, withFilesExtend(fe))
	return &FilesExtendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FilesExtendClient) UpdateOneID(id int) *FilesExtendUpdateOne {
	mutation := newFilesExtendMutation(c.config, OpUpdateOne, withFilesExtendID(id))
	return &FilesExtendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FilesExtend.
func (c *FilesExtendClient) Delete() *FilesExtendDelete {
	mutation := newFilesExtendMutation(c.config, OpDelete)
	return &FilesExtendDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FilesExtendClient) DeleteOne(fe *FilesExtend) *FilesExtendDeleteOne {
	return c.DeleteOneID(fe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FilesExtendClient) DeleteOneID(id int) *FilesExtendDeleteOne {
	builder := c.Delete().Where(filesextend.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FilesExtendDeleteOne{builder}
}

// Query returns a query builder for FilesExtend.
func (c *FilesExtendClient) Query() *FilesExtendQuery {
	return &FilesExtendQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFilesExtend},
		inters: c.Interceptors(),
	}
}

// Get returns a FilesExtend entity by its id.
func (c *FilesExtendClient) Get(ctx context.Context, id int) (*FilesExtend, error) {
	return c.Query().Where(filesextend.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FilesExtendClient) GetX(ctx context.Context, id int) *FilesExtend {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFiles queries the files edge of a FilesExtend.
func (c *FilesExtendClient) QueryFiles(fe *FilesExtend) *FilesQuery {
	query := (&FilesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(filesextend.Table, filesextend.FieldID, id),
			sqlgraph.To(files.Table, files.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, filesextend.FilesTable, filesextend.FilesColumn),
		)
		fromV = sqlgraph.Neighbors(fe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FilesExtendClient) Hooks() []Hook {
	hooks := c.hooks.FilesExtend
	return append(hooks[:len(hooks):len(hooks)], filesextend.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *FilesExtendClient) Interceptors() []Interceptor {
	inters := c.inters.FilesExtend
	return append(inters[:len(inters):len(inters)], filesextend.Interceptors[:]...)
}

func (c *FilesExtendClient) mutate(ctx context.Context, m *FilesExtendMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FilesExtendCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FilesExtendUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FilesExtendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FilesExtendDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FilesExtend mutation op: %q", m.Op())
	}
}

// PalacesMemoClient is a client for the PalacesMemo schema.
type PalacesMemoClient struct {
	config
}

// NewPalacesMemoClient returns a client for the PalacesMemo from the given config.
func NewPalacesMemoClient(c config) *PalacesMemoClient {
	return &PalacesMemoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `palacesmemo.Hooks(f(g(h())))`.
func (c *PalacesMemoClient) Use(hooks ...Hook) {
	c.hooks.PalacesMemo = append(c.hooks.PalacesMemo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `palacesmemo.Intercept(f(g(h())))`.
func (c *PalacesMemoClient) Intercept(interceptors ...Interceptor) {
	c.inters.PalacesMemo = append(c.inters.PalacesMemo, interceptors...)
}

// Create returns a builder for creating a PalacesMemo entity.
func (c *PalacesMemoClient) Create() *PalacesMemoCreate {
	mutation := newPalacesMemoMutation(c.config, OpCreate)
	return &PalacesMemoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PalacesMemo entities.
func (c *PalacesMemoClient) CreateBulk(builders ...*PalacesMemoCreate) *PalacesMemoCreateBulk {
	return &PalacesMemoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PalacesMemoClient) MapCreateBulk(slice any, setFunc func(*PalacesMemoCreate, int)) *PalacesMemoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PalacesMemoCreateBulk{err: fmt.Errorf("calling to PalacesMemoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PalacesMemoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PalacesMemoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PalacesMemo.
func (c *PalacesMemoClient) Update() *PalacesMemoUpdate {
	mutation := newPalacesMemoMutation(c.config, OpUpdate)
	return &PalacesMemoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PalacesMemoClient) UpdateOne(pm *PalacesMemo) *PalacesMemoUpdateOne {
	mutation := newPalacesMemoMutation(c.config, OpUpdateOne, withPalacesMemo(pm))
	return &PalacesMemoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PalacesMemoClient) UpdateOneID(id int) *PalacesMemoUpdateOne {
	mutation := newPalacesMemoMutation(c.config, OpUpdateOne, withPalacesMemoID(id))
	return &PalacesMemoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PalacesMemo.
func (c *PalacesMemoClient) Delete() *PalacesMemoDelete {
	mutation := newPalacesMemoMutation(c.config, OpDelete)
	return &PalacesMemoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PalacesMemoClient) DeleteOne(pm *PalacesMemo) *PalacesMemoDeleteOne {
	return c.DeleteOneID(pm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PalacesMemoClient) DeleteOneID(id int) *PalacesMemoDeleteOne {
	builder := c.Delete().Where(palacesmemo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PalacesMemoDeleteOne{builder}
}

// Query returns a query builder for PalacesMemo.
func (c *PalacesMemoClient) Query() *PalacesMemoQuery {
	return &PalacesMemoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePalacesMemo},
		inters: c.Interceptors(),
	}
}

// Get returns a PalacesMemo entity by its id.
func (c *PalacesMemoClient) Get(ctx context.Context, id int) (*PalacesMemo, error) {
	return c.Query().Where(palacesmemo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PalacesMemoClient) GetX(ctx context.Context, id int) *PalacesMemo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PalacesMemoClient) Hooks() []Hook {
	hooks := c.hooks.PalacesMemo
	return append(hooks[:len(hooks):len(hooks)], palacesmemo.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PalacesMemoClient) Interceptors() []Interceptor {
	inters := c.inters.PalacesMemo
	return append(inters[:len(inters):len(inters)], palacesmemo.Interceptors[:]...)
}

func (c *PalacesMemoClient) mutate(ctx context.Context, m *PalacesMemoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PalacesMemoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PalacesMemoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PalacesMemoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PalacesMemoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PalacesMemo mutation op: %q", m.Op())
	}
}

// PalacesMemoryClient is a client for the PalacesMemory schema.
type PalacesMemoryClient struct {
	config
}

// NewPalacesMemoryClient returns a client for the PalacesMemory from the given config.
func NewPalacesMemoryClient(c config) *PalacesMemoryClient {
	return &PalacesMemoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `palacesmemory.Hooks(f(g(h())))`.
func (c *PalacesMemoryClient) Use(hooks ...Hook) {
	c.hooks.PalacesMemory = append(c.hooks.PalacesMemory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `palacesmemory.Intercept(f(g(h())))`.
func (c *PalacesMemoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.PalacesMemory = append(c.inters.PalacesMemory, interceptors...)
}

// Create returns a builder for creating a PalacesMemory entity.
func (c *PalacesMemoryClient) Create() *PalacesMemoryCreate {
	mutation := newPalacesMemoryMutation(c.config, OpCreate)
	return &PalacesMemoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PalacesMemory entities.
func (c *PalacesMemoryClient) CreateBulk(builders ...*PalacesMemoryCreate) *PalacesMemoryCreateBulk {
	return &PalacesMemoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PalacesMemoryClient) MapCreateBulk(slice any, setFunc func(*PalacesMemoryCreate, int)) *PalacesMemoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PalacesMemoryCreateBulk{err: fmt.Errorf("calling to PalacesMemoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PalacesMemoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PalacesMemoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PalacesMemory.
func (c *PalacesMemoryClient) Update() *PalacesMemoryUpdate {
	mutation := newPalacesMemoryMutation(c.config, OpUpdate)
	return &PalacesMemoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PalacesMemoryClient) UpdateOne(pm *PalacesMemory) *PalacesMemoryUpdateOne {
	mutation := newPalacesMemoryMutation(c.config, OpUpdateOne, withPalacesMemory(pm))
	return &PalacesMemoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PalacesMemoryClient) UpdateOneID(id int) *PalacesMemoryUpdateOne {
	mutation := newPalacesMemoryMutation(c.config, OpUpdateOne, withPalacesMemoryID(id))
	return &PalacesMemoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PalacesMemory.
func (c *PalacesMemoryClient) Delete() *PalacesMemoryDelete {
	mutation := newPalacesMemoryMutation(c.config, OpDelete)
	return &PalacesMemoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PalacesMemoryClient) DeleteOne(pm *PalacesMemory) *PalacesMemoryDeleteOne {
	return c.DeleteOneID(pm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PalacesMemoryClient) DeleteOneID(id int) *PalacesMemoryDeleteOne {
	builder := c.Delete().Where(palacesmemory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PalacesMemoryDeleteOne{builder}
}

// Query returns a query builder for PalacesMemory.
func (c *PalacesMemoryClient) Query() *PalacesMemoryQuery {
	return &PalacesMemoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePalacesMemory},
		inters: c.Interceptors(),
	}
}

// Get returns a PalacesMemory entity by its id.
func (c *PalacesMemoryClient) Get(ctx context.Context, id int) (*PalacesMemory, error) {
	return c.Query().Where(palacesmemory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PalacesMemoryClient) GetX(ctx context.Context, id int) *PalacesMemory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PalacesMemoryClient) Hooks() []Hook {
	hooks := c.hooks.PalacesMemory
	return append(hooks[:len(hooks):len(hooks)], palacesmemory.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PalacesMemoryClient) Interceptors() []Interceptor {
	inters := c.inters.PalacesMemory
	return append(inters[:len(inters):len(inters)], palacesmemory.Interceptors[:]...)
}

func (c *PalacesMemoryClient) mutate(ctx context.Context, m *PalacesMemoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PalacesMemoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PalacesMemoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PalacesMemoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PalacesMemoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PalacesMemory mutation op: %q", m.Op())
	}
}

// PalacesTodoClient is a client for the PalacesTodo schema.
type PalacesTodoClient struct {
	config
}

// NewPalacesTodoClient returns a client for the PalacesTodo from the given config.
func NewPalacesTodoClient(c config) *PalacesTodoClient {
	return &PalacesTodoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `palacestodo.Hooks(f(g(h())))`.
func (c *PalacesTodoClient) Use(hooks ...Hook) {
	c.hooks.PalacesTodo = append(c.hooks.PalacesTodo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `palacestodo.Intercept(f(g(h())))`.
func (c *PalacesTodoClient) Intercept(interceptors ...Interceptor) {
	c.inters.PalacesTodo = append(c.inters.PalacesTodo, interceptors...)
}

// Create returns a builder for creating a PalacesTodo entity.
func (c *PalacesTodoClient) Create() *PalacesTodoCreate {
	mutation := newPalacesTodoMutation(c.config, OpCreate)
	return &PalacesTodoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PalacesTodo entities.
func (c *PalacesTodoClient) CreateBulk(builders ...*PalacesTodoCreate) *PalacesTodoCreateBulk {
	return &PalacesTodoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PalacesTodoClient) MapCreateBulk(slice any, setFunc func(*PalacesTodoCreate, int)) *PalacesTodoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PalacesTodoCreateBulk{err: fmt.Errorf("calling to PalacesTodoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PalacesTodoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PalacesTodoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PalacesTodo.
func (c *PalacesTodoClient) Update() *PalacesTodoUpdate {
	mutation := newPalacesTodoMutation(c.config, OpUpdate)
	return &PalacesTodoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PalacesTodoClient) UpdateOne(pt *PalacesTodo) *PalacesTodoUpdateOne {
	mutation := newPalacesTodoMutation(c.config, OpUpdateOne, withPalacesTodo(pt))
	return &PalacesTodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PalacesTodoClient) UpdateOneID(id int) *PalacesTodoUpdateOne {
	mutation := newPalacesTodoMutation(c.config, OpUpdateOne, withPalacesTodoID(id))
	return &PalacesTodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PalacesTodo.
func (c *PalacesTodoClient) Delete() *PalacesTodoDelete {
	mutation := newPalacesTodoMutation(c.config, OpDelete)
	return &PalacesTodoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PalacesTodoClient) DeleteOne(pt *PalacesTodo) *PalacesTodoDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PalacesTodoClient) DeleteOneID(id int) *PalacesTodoDeleteOne {
	builder := c.Delete().Where(palacestodo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PalacesTodoDeleteOne{builder}
}

// Query returns a query builder for PalacesTodo.
func (c *PalacesTodoClient) Query() *PalacesTodoQuery {
	return &PalacesTodoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePalacesTodo},
		inters: c.Interceptors(),
	}
}

// Get returns a PalacesTodo entity by its id.
func (c *PalacesTodoClient) Get(ctx context.Context, id int) (*PalacesTodo, error) {
	return c.Query().Where(palacestodo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PalacesTodoClient) GetX(ctx context.Context, id int) *PalacesTodo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDones queries the dones edge of a PalacesTodo.
func (c *PalacesTodoClient) QueryDones(pt *PalacesTodo) *PalacesTodoDoneQuery {
	query := (&PalacesTodoDoneClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(palacestodo.Table, palacestodo.FieldID, id),
			sqlgraph.To(palacestododone.Table, palacestododone.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, palacestodo.DonesTable, palacestodo.DonesColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PalacesTodoClient) Hooks() []Hook {
	hooks := c.hooks.PalacesTodo
	return append(hooks[:len(hooks):len(hooks)], palacestodo.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PalacesTodoClient) Interceptors() []Interceptor {
	inters := c.inters.PalacesTodo
	return append(inters[:len(inters):len(inters)], palacestodo.Interceptors[:]...)
}

func (c *PalacesTodoClient) mutate(ctx context.Context, m *PalacesTodoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PalacesTodoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PalacesTodoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PalacesTodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PalacesTodoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PalacesTodo mutation op: %q", m.Op())
	}
}

// PalacesTodoDoneClient is a client for the PalacesTodoDone schema.
type PalacesTodoDoneClient struct {
	config
}

// NewPalacesTodoDoneClient returns a client for the PalacesTodoDone from the given config.
func NewPalacesTodoDoneClient(c config) *PalacesTodoDoneClient {
	return &PalacesTodoDoneClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `palacestododone.Hooks(f(g(h())))`.
func (c *PalacesTodoDoneClient) Use(hooks ...Hook) {
	c.hooks.PalacesTodoDone = append(c.hooks.PalacesTodoDone, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `palacestododone.Intercept(f(g(h())))`.
func (c *PalacesTodoDoneClient) Intercept(interceptors ...Interceptor) {
	c.inters.PalacesTodoDone = append(c.inters.PalacesTodoDone, interceptors...)
}

// Create returns a builder for creating a PalacesTodoDone entity.
func (c *PalacesTodoDoneClient) Create() *PalacesTodoDoneCreate {
	mutation := newPalacesTodoDoneMutation(c.config, OpCreate)
	return &PalacesTodoDoneCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PalacesTodoDone entities.
func (c *PalacesTodoDoneClient) CreateBulk(builders ...*PalacesTodoDoneCreate) *PalacesTodoDoneCreateBulk {
	return &PalacesTodoDoneCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PalacesTodoDoneClient) MapCreateBulk(slice any, setFunc func(*PalacesTodoDoneCreate, int)) *PalacesTodoDoneCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PalacesTodoDoneCreateBulk{err: fmt.Errorf("calling to PalacesTodoDoneClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PalacesTodoDoneCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PalacesTodoDoneCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PalacesTodoDone.
func (c *PalacesTodoDoneClient) Update() *PalacesTodoDoneUpdate {
	mutation := newPalacesTodoDoneMutation(c.config, OpUpdate)
	return &PalacesTodoDoneUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PalacesTodoDoneClient) UpdateOne(ptd *PalacesTodoDone) *PalacesTodoDoneUpdateOne {
	mutation := newPalacesTodoDoneMutation(c.config, OpUpdateOne, withPalacesTodoDone(ptd))
	return &PalacesTodoDoneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PalacesTodoDoneClient) UpdateOneID(id int) *PalacesTodoDoneUpdateOne {
	mutation := newPalacesTodoDoneMutation(c.config, OpUpdateOne, withPalacesTodoDoneID(id))
	return &PalacesTodoDoneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PalacesTodoDone.
func (c *PalacesTodoDoneClient) Delete() *PalacesTodoDoneDelete {
	mutation := newPalacesTodoDoneMutation(c.config, OpDelete)
	return &PalacesTodoDoneDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PalacesTodoDoneClient) DeleteOne(ptd *PalacesTodoDone) *PalacesTodoDoneDeleteOne {
	return c.DeleteOneID(ptd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PalacesTodoDoneClient) DeleteOneID(id int) *PalacesTodoDoneDeleteOne {
	builder := c.Delete().Where(palacestododone.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PalacesTodoDoneDeleteOne{builder}
}

// Query returns a query builder for PalacesTodoDone.
func (c *PalacesTodoDoneClient) Query() *PalacesTodoDoneQuery {
	return &PalacesTodoDoneQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePalacesTodoDone},
		inters: c.Interceptors(),
	}
}

// Get returns a PalacesTodoDone entity by its id.
func (c *PalacesTodoDoneClient) Get(ctx context.Context, id int) (*PalacesTodoDone, error) {
	return c.Query().Where(palacestododone.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PalacesTodoDoneClient) GetX(ctx context.Context, id int) *PalacesTodoDone {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a PalacesTodoDone.
func (c *PalacesTodoDoneClient) QueryOwner(ptd *PalacesTodoDone) *PalacesTodoQuery {
	query := (&PalacesTodoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ptd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(palacestododone.Table, palacestododone.FieldID, id),
			sqlgraph.To(palacestodo.Table, palacestodo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, palacestododone.OwnerTable, palacestododone.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ptd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PalacesTodoDoneClient) Hooks() []Hook {
	hooks := c.hooks.PalacesTodoDone
	return append(hooks[:len(hooks):len(hooks)], palacestododone.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PalacesTodoDoneClient) Interceptors() []Interceptor {
	inters := c.inters.PalacesTodoDone
	return append(inters[:len(inters):len(inters)], palacestododone.Interceptors[:]...)
}

func (c *PalacesTodoDoneClient) mutate(ctx context.Context, m *PalacesTodoDoneMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PalacesTodoDoneCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PalacesTodoDoneUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PalacesTodoDoneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PalacesTodoDoneDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PalacesTodoDone mutation op: %q", m.Op())
	}
}

// TagsClient is a client for the Tags schema.
type TagsClient struct {
	config
}

// NewTagsClient returns a client for the Tags from the given config.
func NewTagsClient(c config) *TagsClient {
	return &TagsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tags.Hooks(f(g(h())))`.
func (c *TagsClient) Use(hooks ...Hook) {
	c.hooks.Tags = append(c.hooks.Tags, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tags.Intercept(f(g(h())))`.
func (c *TagsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tags = append(c.inters.Tags, interceptors...)
}

// Create returns a builder for creating a Tags entity.
func (c *TagsClient) Create() *TagsCreate {
	mutation := newTagsMutation(c.config, OpCreate)
	return &TagsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tags entities.
func (c *TagsClient) CreateBulk(builders ...*TagsCreate) *TagsCreateBulk {
	return &TagsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TagsClient) MapCreateBulk(slice any, setFunc func(*TagsCreate, int)) *TagsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TagsCreateBulk{err: fmt.Errorf("calling to TagsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TagsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TagsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tags.
func (c *TagsClient) Update() *TagsUpdate {
	mutation := newTagsMutation(c.config, OpUpdate)
	return &TagsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagsClient) UpdateOne(t *Tags) *TagsUpdateOne {
	mutation := newTagsMutation(c.config, OpUpdateOne, withTags(t))
	return &TagsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagsClient) UpdateOneID(id int) *TagsUpdateOne {
	mutation := newTagsMutation(c.config, OpUpdateOne, withTagsID(id))
	return &TagsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tags.
func (c *TagsClient) Delete() *TagsDelete {
	mutation := newTagsMutation(c.config, OpDelete)
	return &TagsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TagsClient) DeleteOne(t *Tags) *TagsDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TagsClient) DeleteOneID(id int) *TagsDeleteOne {
	builder := c.Delete().Where(tags.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagsDeleteOne{builder}
}

// Query returns a query builder for Tags.
func (c *TagsClient) Query() *TagsQuery {
	return &TagsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTags},
		inters: c.Interceptors(),
	}
}

// Get returns a Tags entity by its id.
func (c *TagsClient) Get(ctx context.Context, id int) (*Tags, error) {
	return c.Query().Where(tags.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagsClient) GetX(ctx context.Context, id int) *Tags {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlogs queries the blogs edge of a Tags.
func (c *TagsClient) QueryBlogs(t *Tags) *BlogsQuery {
	query := (&BlogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tags.Table, tags.FieldID, id),
			sqlgraph.To(blogs.Table, blogs.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tags.BlogsTable, tags.BlogsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTagRelation queries the tag_relation edge of a Tags.
func (c *TagsClient) QueryTagRelation(t *Tags) *TagsRelationQuery {
	query := (&TagsRelationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tags.Table, tags.FieldID, id),
			sqlgraph.To(tagsrelation.Table, tagsrelation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, tags.TagRelationTable, tags.TagRelationColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagsClient) Hooks() []Hook {
	hooks := c.hooks.Tags
	return append(hooks[:len(hooks):len(hooks)], tags.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *TagsClient) Interceptors() []Interceptor {
	inters := c.inters.Tags
	return append(inters[:len(inters):len(inters)], tags.Interceptors[:]...)
}

func (c *TagsClient) mutate(ctx context.Context, m *TagsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TagsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TagsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TagsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TagsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tags mutation op: %q", m.Op())
	}
}

// TagsRelationClient is a client for the TagsRelation schema.
type TagsRelationClient struct {
	config
}

// NewTagsRelationClient returns a client for the TagsRelation from the given config.
func NewTagsRelationClient(c config) *TagsRelationClient {
	return &TagsRelationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tagsrelation.Hooks(f(g(h())))`.
func (c *TagsRelationClient) Use(hooks ...Hook) {
	c.hooks.TagsRelation = append(c.hooks.TagsRelation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tagsrelation.Intercept(f(g(h())))`.
func (c *TagsRelationClient) Intercept(interceptors ...Interceptor) {
	c.inters.TagsRelation = append(c.inters.TagsRelation, interceptors...)
}

// Create returns a builder for creating a TagsRelation entity.
func (c *TagsRelationClient) Create() *TagsRelationCreate {
	mutation := newTagsRelationMutation(c.config, OpCreate)
	return &TagsRelationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TagsRelation entities.
func (c *TagsRelationClient) CreateBulk(builders ...*TagsRelationCreate) *TagsRelationCreateBulk {
	return &TagsRelationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TagsRelationClient) MapCreateBulk(slice any, setFunc func(*TagsRelationCreate, int)) *TagsRelationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TagsRelationCreateBulk{err: fmt.Errorf("calling to TagsRelationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TagsRelationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TagsRelationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TagsRelation.
func (c *TagsRelationClient) Update() *TagsRelationUpdate {
	mutation := newTagsRelationMutation(c.config, OpUpdate)
	return &TagsRelationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagsRelationClient) UpdateOne(tr *TagsRelation) *TagsRelationUpdateOne {
	mutation := newTagsRelationMutation(c.config, OpUpdateOne, withTagsRelation(tr))
	return &TagsRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagsRelationClient) UpdateOneID(id int) *TagsRelationUpdateOne {
	mutation := newTagsRelationMutation(c.config, OpUpdateOne, withTagsRelationID(id))
	return &TagsRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TagsRelation.
func (c *TagsRelationClient) Delete() *TagsRelationDelete {
	mutation := newTagsRelationMutation(c.config, OpDelete)
	return &TagsRelationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TagsRelationClient) DeleteOne(tr *TagsRelation) *TagsRelationDeleteOne {
	return c.DeleteOneID(tr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TagsRelationClient) DeleteOneID(id int) *TagsRelationDeleteOne {
	builder := c.Delete().Where(tagsrelation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagsRelationDeleteOne{builder}
}

// Query returns a query builder for TagsRelation.
func (c *TagsRelationClient) Query() *TagsRelationQuery {
	return &TagsRelationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTagsRelation},
		inters: c.Interceptors(),
	}
}

// Get returns a TagsRelation entity by its id.
func (c *TagsRelationClient) Get(ctx context.Context, id int) (*TagsRelation, error) {
	return c.Query().Where(tagsrelation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagsRelationClient) GetX(ctx context.Context, id int) *TagsRelation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlog queries the blog edge of a TagsRelation.
func (c *TagsRelationClient) QueryBlog(tr *TagsRelation) *BlogsQuery {
	query := (&BlogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tagsrelation.Table, tagsrelation.FieldID, id),
			sqlgraph.To(blogs.Table, blogs.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tagsrelation.BlogTable, tagsrelation.BlogColumn),
		)
		fromV = sqlgraph.Neighbors(tr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTag queries the tag edge of a TagsRelation.
func (c *TagsRelationClient) QueryTag(tr *TagsRelation) *TagsQuery {
	query := (&TagsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tagsrelation.Table, tagsrelation.FieldID, id),
			sqlgraph.To(tags.Table, tags.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tagsrelation.TagTable, tagsrelation.TagColumn),
		)
		fromV = sqlgraph.Neighbors(tr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagsRelationClient) Hooks() []Hook {
	return c.hooks.TagsRelation
}

// Interceptors returns the client interceptors.
func (c *TagsRelationClient) Interceptors() []Interceptor {
	return c.inters.TagsRelation
}

func (c *TagsRelationClient) mutate(ctx context.Context, m *TagsRelationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TagsRelationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TagsRelationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TagsRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TagsRelationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TagsRelation mutation op: %q", m.Op())
	}
}

// TravelExtendsClient is a client for the TravelExtends schema.
type TravelExtendsClient struct {
	config
}

// NewTravelExtendsClient returns a client for the TravelExtends from the given config.
func NewTravelExtendsClient(c config) *TravelExtendsClient {
	return &TravelExtendsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `travelextends.Hooks(f(g(h())))`.
func (c *TravelExtendsClient) Use(hooks ...Hook) {
	c.hooks.TravelExtends = append(c.hooks.TravelExtends, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `travelextends.Intercept(f(g(h())))`.
func (c *TravelExtendsClient) Intercept(interceptors ...Interceptor) {
	c.inters.TravelExtends = append(c.inters.TravelExtends, interceptors...)
}

// Create returns a builder for creating a TravelExtends entity.
func (c *TravelExtendsClient) Create() *TravelExtendsCreate {
	mutation := newTravelExtendsMutation(c.config, OpCreate)
	return &TravelExtendsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TravelExtends entities.
func (c *TravelExtendsClient) CreateBulk(builders ...*TravelExtendsCreate) *TravelExtendsCreateBulk {
	return &TravelExtendsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TravelExtendsClient) MapCreateBulk(slice any, setFunc func(*TravelExtendsCreate, int)) *TravelExtendsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TravelExtendsCreateBulk{err: fmt.Errorf("calling to TravelExtendsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TravelExtendsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TravelExtendsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TravelExtends.
func (c *TravelExtendsClient) Update() *TravelExtendsUpdate {
	mutation := newTravelExtendsMutation(c.config, OpUpdate)
	return &TravelExtendsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TravelExtendsClient) UpdateOne(te *TravelExtends) *TravelExtendsUpdateOne {
	mutation := newTravelExtendsMutation(c.config, OpUpdateOne, withTravelExtends(te))
	return &TravelExtendsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TravelExtendsClient) UpdateOneID(id int) *TravelExtendsUpdateOne {
	mutation := newTravelExtendsMutation(c.config, OpUpdateOne, withTravelExtendsID(id))
	return &TravelExtendsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TravelExtends.
func (c *TravelExtendsClient) Delete() *TravelExtendsDelete {
	mutation := newTravelExtendsMutation(c.config, OpDelete)
	return &TravelExtendsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TravelExtendsClient) DeleteOne(te *TravelExtends) *TravelExtendsDeleteOne {
	return c.DeleteOneID(te.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TravelExtendsClient) DeleteOneID(id int) *TravelExtendsDeleteOne {
	builder := c.Delete().Where(travelextends.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TravelExtendsDeleteOne{builder}
}

// Query returns a query builder for TravelExtends.
func (c *TravelExtendsClient) Query() *TravelExtendsQuery {
	return &TravelExtendsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTravelExtends},
		inters: c.Interceptors(),
	}
}

// Get returns a TravelExtends entity by its id.
func (c *TravelExtendsClient) Get(ctx context.Context, id int) (*TravelExtends, error) {
	return c.Query().Where(travelextends.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TravelExtendsClient) GetX(ctx context.Context, id int) *TravelExtends {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExtends queries the extends edge of a TravelExtends.
func (c *TravelExtendsClient) QueryExtends(te *TravelExtends) *TravelsQuery {
	query := (&TravelsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := te.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(travelextends.Table, travelextends.FieldID, id),
			sqlgraph.To(travels.Table, travels.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, travelextends.ExtendsTable, travelextends.ExtendsColumn),
		)
		fromV = sqlgraph.Neighbors(te.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TravelExtendsClient) Hooks() []Hook {
	hooks := c.hooks.TravelExtends
	return append(hooks[:len(hooks):len(hooks)], travelextends.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *TravelExtendsClient) Interceptors() []Interceptor {
	inters := c.inters.TravelExtends
	return append(inters[:len(inters):len(inters)], travelextends.Interceptors[:]...)
}

func (c *TravelExtendsClient) mutate(ctx context.Context, m *TravelExtendsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TravelExtendsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TravelExtendsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TravelExtendsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TravelExtendsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TravelExtends mutation op: %q", m.Op())
	}
}

// TravelsClient is a client for the Travels schema.
type TravelsClient struct {
	config
}

// NewTravelsClient returns a client for the Travels from the given config.
func NewTravelsClient(c config) *TravelsClient {
	return &TravelsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `travels.Hooks(f(g(h())))`.
func (c *TravelsClient) Use(hooks ...Hook) {
	c.hooks.Travels = append(c.hooks.Travels, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `travels.Intercept(f(g(h())))`.
func (c *TravelsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Travels = append(c.inters.Travels, interceptors...)
}

// Create returns a builder for creating a Travels entity.
func (c *TravelsClient) Create() *TravelsCreate {
	mutation := newTravelsMutation(c.config, OpCreate)
	return &TravelsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Travels entities.
func (c *TravelsClient) CreateBulk(builders ...*TravelsCreate) *TravelsCreateBulk {
	return &TravelsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TravelsClient) MapCreateBulk(slice any, setFunc func(*TravelsCreate, int)) *TravelsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TravelsCreateBulk{err: fmt.Errorf("calling to TravelsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TravelsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TravelsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Travels.
func (c *TravelsClient) Update() *TravelsUpdate {
	mutation := newTravelsMutation(c.config, OpUpdate)
	return &TravelsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TravelsClient) UpdateOne(t *Travels) *TravelsUpdateOne {
	mutation := newTravelsMutation(c.config, OpUpdateOne, withTravels(t))
	return &TravelsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TravelsClient) UpdateOneID(id int) *TravelsUpdateOne {
	mutation := newTravelsMutation(c.config, OpUpdateOne, withTravelsID(id))
	return &TravelsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Travels.
func (c *TravelsClient) Delete() *TravelsDelete {
	mutation := newTravelsMutation(c.config, OpDelete)
	return &TravelsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TravelsClient) DeleteOne(t *Travels) *TravelsDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TravelsClient) DeleteOneID(id int) *TravelsDeleteOne {
	builder := c.Delete().Where(travels.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TravelsDeleteOne{builder}
}

// Query returns a query builder for Travels.
func (c *TravelsClient) Query() *TravelsQuery {
	return &TravelsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTravels},
		inters: c.Interceptors(),
	}
}

// Get returns a Travels entity by its id.
func (c *TravelsClient) Get(ctx context.Context, id int) (*Travels, error) {
	return c.Query().Where(travels.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TravelsClient) GetX(ctx context.Context, id int) *Travels {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTravelExtends queries the travel_extends edge of a Travels.
func (c *TravelsClient) QueryTravelExtends(t *Travels) *TravelExtendsQuery {
	query := (&TravelExtendsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(travels.Table, travels.FieldID, id),
			sqlgraph.To(travelextends.Table, travelextends.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, travels.TravelExtendsTable, travels.TravelExtendsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTravelAccount queries the travel_account edge of a Travels.
func (c *TravelsClient) QueryTravelAccount(t *Travels) *AccountQuery {
	query := (&AccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(travels.Table, travels.FieldID, id),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, travels.TravelAccountTable, travels.TravelAccountColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TravelsClient) Hooks() []Hook {
	hooks := c.hooks.Travels
	return append(hooks[:len(hooks):len(hooks)], travels.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *TravelsClient) Interceptors() []Interceptor {
	inters := c.inters.Travels
	return append(inters[:len(inters):len(inters)], travels.Interceptors[:]...)
}

func (c *TravelsClient) mutate(ctx context.Context, m *TravelsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TravelsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TravelsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TravelsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TravelsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Travels mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	inters := c.inters.User
	return append(inters[:len(inters):len(inters)], user.Interceptors[:]...)
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserExperienceClient is a client for the UserExperience schema.
type UserExperienceClient struct {
	config
}

// NewUserExperienceClient returns a client for the UserExperience from the given config.
func NewUserExperienceClient(c config) *UserExperienceClient {
	return &UserExperienceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userexperience.Hooks(f(g(h())))`.
func (c *UserExperienceClient) Use(hooks ...Hook) {
	c.hooks.UserExperience = append(c.hooks.UserExperience, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userexperience.Intercept(f(g(h())))`.
func (c *UserExperienceClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserExperience = append(c.inters.UserExperience, interceptors...)
}

// Create returns a builder for creating a UserExperience entity.
func (c *UserExperienceClient) Create() *UserExperienceCreate {
	mutation := newUserExperienceMutation(c.config, OpCreate)
	return &UserExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserExperience entities.
func (c *UserExperienceClient) CreateBulk(builders ...*UserExperienceCreate) *UserExperienceCreateBulk {
	return &UserExperienceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserExperienceClient) MapCreateBulk(slice any, setFunc func(*UserExperienceCreate, int)) *UserExperienceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserExperienceCreateBulk{err: fmt.Errorf("calling to UserExperienceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserExperienceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserExperienceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserExperience.
func (c *UserExperienceClient) Update() *UserExperienceUpdate {
	mutation := newUserExperienceMutation(c.config, OpUpdate)
	return &UserExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserExperienceClient) UpdateOne(ue *UserExperience) *UserExperienceUpdateOne {
	mutation := newUserExperienceMutation(c.config, OpUpdateOne, withUserExperience(ue))
	return &UserExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserExperienceClient) UpdateOneID(id int) *UserExperienceUpdateOne {
	mutation := newUserExperienceMutation(c.config, OpUpdateOne, withUserExperienceID(id))
	return &UserExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserExperience.
func (c *UserExperienceClient) Delete() *UserExperienceDelete {
	mutation := newUserExperienceMutation(c.config, OpDelete)
	return &UserExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserExperienceClient) DeleteOne(ue *UserExperience) *UserExperienceDeleteOne {
	return c.DeleteOneID(ue.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserExperienceClient) DeleteOneID(id int) *UserExperienceDeleteOne {
	builder := c.Delete().Where(userexperience.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserExperienceDeleteOne{builder}
}

// Query returns a query builder for UserExperience.
func (c *UserExperienceClient) Query() *UserExperienceQuery {
	return &UserExperienceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserExperience},
		inters: c.Interceptors(),
	}
}

// Get returns a UserExperience entity by its id.
func (c *UserExperienceClient) Get(ctx context.Context, id int) (*UserExperience, error) {
	return c.Query().Where(userexperience.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserExperienceClient) GetX(ctx context.Context, id int) *UserExperience {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserExperienceClient) Hooks() []Hook {
	hooks := c.hooks.UserExperience
	return append(hooks[:len(hooks):len(hooks)], userexperience.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserExperienceClient) Interceptors() []Interceptor {
	inters := c.inters.UserExperience
	return append(inters[:len(inters):len(inters)], userexperience.Interceptors[:]...)
}

func (c *UserExperienceClient) mutate(ctx context.Context, m *UserExperienceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserExperience mutation op: %q", m.Op())
	}
}

// UserFamousQuotesClient is a client for the UserFamousQuotes schema.
type UserFamousQuotesClient struct {
	config
}

// NewUserFamousQuotesClient returns a client for the UserFamousQuotes from the given config.
func NewUserFamousQuotesClient(c config) *UserFamousQuotesClient {
	return &UserFamousQuotesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userfamousquotes.Hooks(f(g(h())))`.
func (c *UserFamousQuotesClient) Use(hooks ...Hook) {
	c.hooks.UserFamousQuotes = append(c.hooks.UserFamousQuotes, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userfamousquotes.Intercept(f(g(h())))`.
func (c *UserFamousQuotesClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserFamousQuotes = append(c.inters.UserFamousQuotes, interceptors...)
}

// Create returns a builder for creating a UserFamousQuotes entity.
func (c *UserFamousQuotesClient) Create() *UserFamousQuotesCreate {
	mutation := newUserFamousQuotesMutation(c.config, OpCreate)
	return &UserFamousQuotesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserFamousQuotes entities.
func (c *UserFamousQuotesClient) CreateBulk(builders ...*UserFamousQuotesCreate) *UserFamousQuotesCreateBulk {
	return &UserFamousQuotesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserFamousQuotesClient) MapCreateBulk(slice any, setFunc func(*UserFamousQuotesCreate, int)) *UserFamousQuotesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserFamousQuotesCreateBulk{err: fmt.Errorf("calling to UserFamousQuotesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserFamousQuotesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserFamousQuotesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserFamousQuotes.
func (c *UserFamousQuotesClient) Update() *UserFamousQuotesUpdate {
	mutation := newUserFamousQuotesMutation(c.config, OpUpdate)
	return &UserFamousQuotesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserFamousQuotesClient) UpdateOne(ufq *UserFamousQuotes) *UserFamousQuotesUpdateOne {
	mutation := newUserFamousQuotesMutation(c.config, OpUpdateOne, withUserFamousQuotes(ufq))
	return &UserFamousQuotesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserFamousQuotesClient) UpdateOneID(id int) *UserFamousQuotesUpdateOne {
	mutation := newUserFamousQuotesMutation(c.config, OpUpdateOne, withUserFamousQuotesID(id))
	return &UserFamousQuotesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserFamousQuotes.
func (c *UserFamousQuotesClient) Delete() *UserFamousQuotesDelete {
	mutation := newUserFamousQuotesMutation(c.config, OpDelete)
	return &UserFamousQuotesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserFamousQuotesClient) DeleteOne(ufq *UserFamousQuotes) *UserFamousQuotesDeleteOne {
	return c.DeleteOneID(ufq.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserFamousQuotesClient) DeleteOneID(id int) *UserFamousQuotesDeleteOne {
	builder := c.Delete().Where(userfamousquotes.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserFamousQuotesDeleteOne{builder}
}

// Query returns a query builder for UserFamousQuotes.
func (c *UserFamousQuotesClient) Query() *UserFamousQuotesQuery {
	return &UserFamousQuotesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserFamousQuotes},
		inters: c.Interceptors(),
	}
}

// Get returns a UserFamousQuotes entity by its id.
func (c *UserFamousQuotesClient) Get(ctx context.Context, id int) (*UserFamousQuotes, error) {
	return c.Query().Where(userfamousquotes.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserFamousQuotesClient) GetX(ctx context.Context, id int) *UserFamousQuotes {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserFamousQuotesClient) Hooks() []Hook {
	hooks := c.hooks.UserFamousQuotes
	return append(hooks[:len(hooks):len(hooks)], userfamousquotes.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserFamousQuotesClient) Interceptors() []Interceptor {
	inters := c.inters.UserFamousQuotes
	return append(inters[:len(inters):len(inters)], userfamousquotes.Interceptors[:]...)
}

func (c *UserFamousQuotesClient) mutate(ctx context.Context, m *UserFamousQuotesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserFamousQuotesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserFamousQuotesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserFamousQuotesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserFamousQuotesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserFamousQuotes mutation op: %q", m.Op())
	}
}

// UserProjectClient is a client for the UserProject schema.
type UserProjectClient struct {
	config
}

// NewUserProjectClient returns a client for the UserProject from the given config.
func NewUserProjectClient(c config) *UserProjectClient {
	return &UserProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userproject.Hooks(f(g(h())))`.
func (c *UserProjectClient) Use(hooks ...Hook) {
	c.hooks.UserProject = append(c.hooks.UserProject, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userproject.Intercept(f(g(h())))`.
func (c *UserProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserProject = append(c.inters.UserProject, interceptors...)
}

// Create returns a builder for creating a UserProject entity.
func (c *UserProjectClient) Create() *UserProjectCreate {
	mutation := newUserProjectMutation(c.config, OpCreate)
	return &UserProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserProject entities.
func (c *UserProjectClient) CreateBulk(builders ...*UserProjectCreate) *UserProjectCreateBulk {
	return &UserProjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserProjectClient) MapCreateBulk(slice any, setFunc func(*UserProjectCreate, int)) *UserProjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserProjectCreateBulk{err: fmt.Errorf("calling to UserProjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserProjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserProject.
func (c *UserProjectClient) Update() *UserProjectUpdate {
	mutation := newUserProjectMutation(c.config, OpUpdate)
	return &UserProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserProjectClient) UpdateOne(up *UserProject) *UserProjectUpdateOne {
	mutation := newUserProjectMutation(c.config, OpUpdateOne, withUserProject(up))
	return &UserProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserProjectClient) UpdateOneID(id int) *UserProjectUpdateOne {
	mutation := newUserProjectMutation(c.config, OpUpdateOne, withUserProjectID(id))
	return &UserProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserProject.
func (c *UserProjectClient) Delete() *UserProjectDelete {
	mutation := newUserProjectMutation(c.config, OpDelete)
	return &UserProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserProjectClient) DeleteOne(up *UserProject) *UserProjectDeleteOne {
	return c.DeleteOneID(up.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserProjectClient) DeleteOneID(id int) *UserProjectDeleteOne {
	builder := c.Delete().Where(userproject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserProjectDeleteOne{builder}
}

// Query returns a query builder for UserProject.
func (c *UserProjectClient) Query() *UserProjectQuery {
	return &UserProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserProject},
		inters: c.Interceptors(),
	}
}

// Get returns a UserProject entity by its id.
func (c *UserProjectClient) Get(ctx context.Context, id int) (*UserProject, error) {
	return c.Query().Where(userproject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserProjectClient) GetX(ctx context.Context, id int) *UserProject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserProjectClient) Hooks() []Hook {
	hooks := c.hooks.UserProject
	return append(hooks[:len(hooks):len(hooks)], userproject.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserProjectClient) Interceptors() []Interceptor {
	inters := c.inters.UserProject
	return append(inters[:len(inters):len(inters)], userproject.Interceptors[:]...)
}

func (c *UserProjectClient) mutate(ctx context.Context, m *UserProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserProject mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Account, Blogs, BlogsComment, BlogsContent, BlogsExtend, Files, FilesExtend,
		PalacesMemo, PalacesMemory, PalacesTodo, PalacesTodoDone, Tags, TagsRelation,
		TravelExtends, Travels, User, UserExperience, UserFamousQuotes,
		UserProject []ent.Hook
	}
	inters struct {
		Account, Blogs, BlogsComment, BlogsContent, BlogsExtend, Files, FilesExtend,
		PalacesMemo, PalacesMemory, PalacesTodo, PalacesTodoDone, Tags, TagsRelation,
		TravelExtends, Travels, User, UserExperience, UserFamousQuotes,
		UserProject []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
