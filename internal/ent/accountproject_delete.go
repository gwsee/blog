// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/accountproject"
	"blog/internal/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountProjectDelete is the builder for deleting a AccountProject entity.
type AccountProjectDelete struct {
	config
	hooks    []Hook
	mutation *AccountProjectMutation
}

// Where appends a list predicates to the AccountProjectDelete builder.
func (apd *AccountProjectDelete) Where(ps ...predicate.AccountProject) *AccountProjectDelete {
	apd.mutation.Where(ps...)
	return apd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (apd *AccountProjectDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, apd.sqlExec, apd.mutation, apd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (apd *AccountProjectDelete) ExecX(ctx context.Context) int {
	n, err := apd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (apd *AccountProjectDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(accountproject.Table, sqlgraph.NewFieldSpec(accountproject.FieldID, field.TypeInt))
	if ps := apd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, apd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	apd.mutation.done = true
	return affected, err
}

// AccountProjectDeleteOne is the builder for deleting a single AccountProject entity.
type AccountProjectDeleteOne struct {
	apd *AccountProjectDelete
}

// Where appends a list predicates to the AccountProjectDelete builder.
func (apdo *AccountProjectDeleteOne) Where(ps ...predicate.AccountProject) *AccountProjectDeleteOne {
	apdo.apd.mutation.Where(ps...)
	return apdo
}

// Exec executes the deletion query.
func (apdo *AccountProjectDeleteOne) Exec(ctx context.Context) error {
	n, err := apdo.apd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{accountproject.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (apdo *AccountProjectDeleteOne) ExecX(ctx context.Context) {
	if err := apdo.Exec(ctx); err != nil {
		panic(err)
	}
}
