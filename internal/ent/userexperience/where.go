// Code generated by ent, DO NOT EDIT.

package userexperience

import (
	"blog/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldDeletedBy, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldUserID, v))
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldCompany, v))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldRole, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldLocation, v))
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldStart, v))
}

// End applies equality check predicate on the "end" field. It's identical to EndEQ.
func End(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldEnd, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldDescription, v))
}

// Responsibilities applies equality check predicate on the "responsibilities" field. It's identical to ResponsibilitiesEQ.
func Responsibilities(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldResponsibilities, v))
}

// Achievements applies equality check predicate on the "achievements" field. It's identical to AchievementsEQ.
func Achievements(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldAchievements, v))
}

// Project applies equality check predicate on the "project" field. It's identical to ProjectEQ.
func Project(v int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldProject, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldImage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldDeletedBy, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldUserID, v))
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldCompany, v))
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldCompany, v))
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldCompany, vs...))
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldCompany, vs...))
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldCompany, v))
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldCompany, v))
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldCompany, v))
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldCompany, v))
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldContains(FieldCompany, v))
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldHasPrefix(FieldCompany, v))
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldHasSuffix(FieldCompany, v))
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEqualFold(FieldCompany, v))
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldContainsFold(FieldCompany, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldRole, v))
}

// RoleContains applies the Contains predicate on the "role" field.
func RoleContains(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldContains(FieldRole, v))
}

// RoleHasPrefix applies the HasPrefix predicate on the "role" field.
func RoleHasPrefix(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldHasPrefix(FieldRole, v))
}

// RoleHasSuffix applies the HasSuffix predicate on the "role" field.
func RoleHasSuffix(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldHasSuffix(FieldRole, v))
}

// RoleEqualFold applies the EqualFold predicate on the "role" field.
func RoleEqualFold(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEqualFold(FieldRole, v))
}

// RoleContainsFold applies the ContainsFold predicate on the "role" field.
func RoleContainsFold(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldContainsFold(FieldRole, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldContainsFold(FieldLocation, v))
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldStart, v))
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldStart, v))
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldStart, vs...))
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldStart, vs...))
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldStart, v))
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldStart, v))
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldStart, v))
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldStart, v))
}

// EndEQ applies the EQ predicate on the "end" field.
func EndEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldEnd, v))
}

// EndNEQ applies the NEQ predicate on the "end" field.
func EndNEQ(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldEnd, v))
}

// EndIn applies the In predicate on the "end" field.
func EndIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldEnd, vs...))
}

// EndNotIn applies the NotIn predicate on the "end" field.
func EndNotIn(vs ...int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldEnd, vs...))
}

// EndGT applies the GT predicate on the "end" field.
func EndGT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldEnd, v))
}

// EndGTE applies the GTE predicate on the "end" field.
func EndGTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldEnd, v))
}

// EndLT applies the LT predicate on the "end" field.
func EndLT(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldEnd, v))
}

// EndLTE applies the LTE predicate on the "end" field.
func EndLTE(v int64) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldEnd, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldContainsFold(FieldDescription, v))
}

// ResponsibilitiesEQ applies the EQ predicate on the "responsibilities" field.
func ResponsibilitiesEQ(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldResponsibilities, v))
}

// ResponsibilitiesNEQ applies the NEQ predicate on the "responsibilities" field.
func ResponsibilitiesNEQ(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldResponsibilities, v))
}

// ResponsibilitiesIn applies the In predicate on the "responsibilities" field.
func ResponsibilitiesIn(vs ...string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldResponsibilities, vs...))
}

// ResponsibilitiesNotIn applies the NotIn predicate on the "responsibilities" field.
func ResponsibilitiesNotIn(vs ...string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldResponsibilities, vs...))
}

// ResponsibilitiesGT applies the GT predicate on the "responsibilities" field.
func ResponsibilitiesGT(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldResponsibilities, v))
}

// ResponsibilitiesGTE applies the GTE predicate on the "responsibilities" field.
func ResponsibilitiesGTE(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldResponsibilities, v))
}

// ResponsibilitiesLT applies the LT predicate on the "responsibilities" field.
func ResponsibilitiesLT(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldResponsibilities, v))
}

// ResponsibilitiesLTE applies the LTE predicate on the "responsibilities" field.
func ResponsibilitiesLTE(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldResponsibilities, v))
}

// ResponsibilitiesContains applies the Contains predicate on the "responsibilities" field.
func ResponsibilitiesContains(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldContains(FieldResponsibilities, v))
}

// ResponsibilitiesHasPrefix applies the HasPrefix predicate on the "responsibilities" field.
func ResponsibilitiesHasPrefix(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldHasPrefix(FieldResponsibilities, v))
}

// ResponsibilitiesHasSuffix applies the HasSuffix predicate on the "responsibilities" field.
func ResponsibilitiesHasSuffix(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldHasSuffix(FieldResponsibilities, v))
}

// ResponsibilitiesEqualFold applies the EqualFold predicate on the "responsibilities" field.
func ResponsibilitiesEqualFold(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEqualFold(FieldResponsibilities, v))
}

// ResponsibilitiesContainsFold applies the ContainsFold predicate on the "responsibilities" field.
func ResponsibilitiesContainsFold(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldContainsFold(FieldResponsibilities, v))
}

// AchievementsEQ applies the EQ predicate on the "achievements" field.
func AchievementsEQ(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldAchievements, v))
}

// AchievementsNEQ applies the NEQ predicate on the "achievements" field.
func AchievementsNEQ(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldAchievements, v))
}

// AchievementsIn applies the In predicate on the "achievements" field.
func AchievementsIn(vs ...string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldAchievements, vs...))
}

// AchievementsNotIn applies the NotIn predicate on the "achievements" field.
func AchievementsNotIn(vs ...string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldAchievements, vs...))
}

// AchievementsGT applies the GT predicate on the "achievements" field.
func AchievementsGT(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldAchievements, v))
}

// AchievementsGTE applies the GTE predicate on the "achievements" field.
func AchievementsGTE(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldAchievements, v))
}

// AchievementsLT applies the LT predicate on the "achievements" field.
func AchievementsLT(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldAchievements, v))
}

// AchievementsLTE applies the LTE predicate on the "achievements" field.
func AchievementsLTE(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldAchievements, v))
}

// AchievementsContains applies the Contains predicate on the "achievements" field.
func AchievementsContains(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldContains(FieldAchievements, v))
}

// AchievementsHasPrefix applies the HasPrefix predicate on the "achievements" field.
func AchievementsHasPrefix(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldHasPrefix(FieldAchievements, v))
}

// AchievementsHasSuffix applies the HasSuffix predicate on the "achievements" field.
func AchievementsHasSuffix(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldHasSuffix(FieldAchievements, v))
}

// AchievementsEqualFold applies the EqualFold predicate on the "achievements" field.
func AchievementsEqualFold(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEqualFold(FieldAchievements, v))
}

// AchievementsContainsFold applies the ContainsFold predicate on the "achievements" field.
func AchievementsContainsFold(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldContainsFold(FieldAchievements, v))
}

// ProjectEQ applies the EQ predicate on the "project" field.
func ProjectEQ(v int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldProject, v))
}

// ProjectNEQ applies the NEQ predicate on the "project" field.
func ProjectNEQ(v int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldProject, v))
}

// ProjectIn applies the In predicate on the "project" field.
func ProjectIn(vs ...int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldProject, vs...))
}

// ProjectNotIn applies the NotIn predicate on the "project" field.
func ProjectNotIn(vs ...int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldProject, vs...))
}

// ProjectGT applies the GT predicate on the "project" field.
func ProjectGT(v int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldProject, v))
}

// ProjectGTE applies the GTE predicate on the "project" field.
func ProjectGTE(v int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldProject, v))
}

// ProjectLT applies the LT predicate on the "project" field.
func ProjectLT(v int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldProject, v))
}

// ProjectLTE applies the LTE predicate on the "project" field.
func ProjectLTE(v int) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldProject, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldHasSuffix(FieldImage, v))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.UserExperience {
	return predicate.UserExperience(sql.FieldContainsFold(FieldImage, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserExperience) predicate.UserExperience {
	return predicate.UserExperience(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserExperience) predicate.UserExperience {
	return predicate.UserExperience(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserExperience) predicate.UserExperience {
	return predicate.UserExperience(sql.NotPredicates(p))
}
