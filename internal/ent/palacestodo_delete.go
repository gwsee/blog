// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/palacestodo"
	"blog/internal/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PalacesTodoDelete is the builder for deleting a PalacesTodo entity.
type PalacesTodoDelete struct {
	config
	hooks    []Hook
	mutation *PalacesTodoMutation
}

// Where appends a list predicates to the PalacesTodoDelete builder.
func (ptd *PalacesTodoDelete) Where(ps ...predicate.PalacesTodo) *PalacesTodoDelete {
	ptd.mutation.Where(ps...)
	return ptd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ptd *PalacesTodoDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ptd.sqlExec, ptd.mutation, ptd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ptd *PalacesTodoDelete) ExecX(ctx context.Context) int {
	n, err := ptd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ptd *PalacesTodoDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(palacestodo.Table, sqlgraph.NewFieldSpec(palacestodo.FieldID, field.TypeInt))
	if ps := ptd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ptd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ptd.mutation.done = true
	return affected, err
}

// PalacesTodoDeleteOne is the builder for deleting a single PalacesTodo entity.
type PalacesTodoDeleteOne struct {
	ptd *PalacesTodoDelete
}

// Where appends a list predicates to the PalacesTodoDelete builder.
func (ptdo *PalacesTodoDeleteOne) Where(ps ...predicate.PalacesTodo) *PalacesTodoDeleteOne {
	ptdo.ptd.mutation.Where(ps...)
	return ptdo
}

// Exec executes the deletion query.
func (ptdo *PalacesTodoDeleteOne) Exec(ctx context.Context) error {
	n, err := ptdo.ptd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{palacestodo.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ptdo *PalacesTodoDeleteOne) ExecX(ctx context.Context) {
	if err := ptdo.Exec(ctx); err != nil {
		panic(err)
	}
}
