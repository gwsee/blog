// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/blogsextend"
	"blog/internal/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlogsExtendDelete is the builder for deleting a BlogsExtend entity.
type BlogsExtendDelete struct {
	config
	hooks    []Hook
	mutation *BlogsExtendMutation
}

// Where appends a list predicates to the BlogsExtendDelete builder.
func (bed *BlogsExtendDelete) Where(ps ...predicate.BlogsExtend) *BlogsExtendDelete {
	bed.mutation.Where(ps...)
	return bed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bed *BlogsExtendDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bed.sqlExec, bed.mutation, bed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bed *BlogsExtendDelete) ExecX(ctx context.Context) int {
	n, err := bed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bed *BlogsExtendDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(blogsextend.Table, sqlgraph.NewFieldSpec(blogsextend.FieldID, field.TypeInt))
	if ps := bed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bed.mutation.done = true
	return affected, err
}

// BlogsExtendDeleteOne is the builder for deleting a single BlogsExtend entity.
type BlogsExtendDeleteOne struct {
	bed *BlogsExtendDelete
}

// Where appends a list predicates to the BlogsExtendDelete builder.
func (bedo *BlogsExtendDeleteOne) Where(ps ...predicate.BlogsExtend) *BlogsExtendDeleteOne {
	bedo.bed.mutation.Where(ps...)
	return bedo
}

// Exec executes the deletion query.
func (bedo *BlogsExtendDeleteOne) Exec(ctx context.Context) error {
	n, err := bedo.bed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{blogsextend.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bedo *BlogsExtendDeleteOne) ExecX(ctx context.Context) {
	if err := bedo.Exec(ctx); err != nil {
		panic(err)
	}
}
