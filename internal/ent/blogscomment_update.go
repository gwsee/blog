// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/blogscomment"
	"blog/internal/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlogsCommentUpdate is the builder for updating BlogsComment entities.
type BlogsCommentUpdate struct {
	config
	hooks    []Hook
	mutation *BlogsCommentMutation
}

// Where appends a list predicates to the BlogsCommentUpdate builder.
func (bcu *BlogsCommentUpdate) Where(ps ...predicate.BlogsComment) *BlogsCommentUpdate {
	bcu.mutation.Where(ps...)
	return bcu
}

// SetUpdatedAt sets the "updated_at" field.
func (bcu *BlogsCommentUpdate) SetUpdatedAt(i int64) *BlogsCommentUpdate {
	bcu.mutation.ResetUpdatedAt()
	bcu.mutation.SetUpdatedAt(i)
	return bcu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (bcu *BlogsCommentUpdate) AddUpdatedAt(i int64) *BlogsCommentUpdate {
	bcu.mutation.AddUpdatedAt(i)
	return bcu
}

// SetUpdatedBy sets the "updated_by" field.
func (bcu *BlogsCommentUpdate) SetUpdatedBy(i int64) *BlogsCommentUpdate {
	bcu.mutation.ResetUpdatedBy()
	bcu.mutation.SetUpdatedBy(i)
	return bcu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (bcu *BlogsCommentUpdate) SetNillableUpdatedBy(i *int64) *BlogsCommentUpdate {
	if i != nil {
		bcu.SetUpdatedBy(*i)
	}
	return bcu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (bcu *BlogsCommentUpdate) AddUpdatedBy(i int64) *BlogsCommentUpdate {
	bcu.mutation.AddUpdatedBy(i)
	return bcu
}

// SetDeletedAt sets the "deleted_at" field.
func (bcu *BlogsCommentUpdate) SetDeletedAt(i int64) *BlogsCommentUpdate {
	bcu.mutation.ResetDeletedAt()
	bcu.mutation.SetDeletedAt(i)
	return bcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bcu *BlogsCommentUpdate) SetNillableDeletedAt(i *int64) *BlogsCommentUpdate {
	if i != nil {
		bcu.SetDeletedAt(*i)
	}
	return bcu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (bcu *BlogsCommentUpdate) AddDeletedAt(i int64) *BlogsCommentUpdate {
	bcu.mutation.AddDeletedAt(i)
	return bcu
}

// SetDeletedBy sets the "deleted_by" field.
func (bcu *BlogsCommentUpdate) SetDeletedBy(i int64) *BlogsCommentUpdate {
	bcu.mutation.ResetDeletedBy()
	bcu.mutation.SetDeletedBy(i)
	return bcu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (bcu *BlogsCommentUpdate) SetNillableDeletedBy(i *int64) *BlogsCommentUpdate {
	if i != nil {
		bcu.SetDeletedBy(*i)
	}
	return bcu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (bcu *BlogsCommentUpdate) AddDeletedBy(i int64) *BlogsCommentUpdate {
	bcu.mutation.AddDeletedBy(i)
	return bcu
}

// SetAccountID sets the "account_id" field.
func (bcu *BlogsCommentUpdate) SetAccountID(i int) *BlogsCommentUpdate {
	bcu.mutation.ResetAccountID()
	bcu.mutation.SetAccountID(i)
	return bcu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (bcu *BlogsCommentUpdate) SetNillableAccountID(i *int) *BlogsCommentUpdate {
	if i != nil {
		bcu.SetAccountID(*i)
	}
	return bcu
}

// AddAccountID adds i to the "account_id" field.
func (bcu *BlogsCommentUpdate) AddAccountID(i int) *BlogsCommentUpdate {
	bcu.mutation.AddAccountID(i)
	return bcu
}

// SetBlogID sets the "blog_id" field.
func (bcu *BlogsCommentUpdate) SetBlogID(i int) *BlogsCommentUpdate {
	bcu.mutation.ResetBlogID()
	bcu.mutation.SetBlogID(i)
	return bcu
}

// SetNillableBlogID sets the "blog_id" field if the given value is not nil.
func (bcu *BlogsCommentUpdate) SetNillableBlogID(i *int) *BlogsCommentUpdate {
	if i != nil {
		bcu.SetBlogID(*i)
	}
	return bcu
}

// AddBlogID adds i to the "blog_id" field.
func (bcu *BlogsCommentUpdate) AddBlogID(i int) *BlogsCommentUpdate {
	bcu.mutation.AddBlogID(i)
	return bcu
}

// SetTopID sets the "top_id" field.
func (bcu *BlogsCommentUpdate) SetTopID(i int) *BlogsCommentUpdate {
	bcu.mutation.ResetTopID()
	bcu.mutation.SetTopID(i)
	return bcu
}

// SetNillableTopID sets the "top_id" field if the given value is not nil.
func (bcu *BlogsCommentUpdate) SetNillableTopID(i *int) *BlogsCommentUpdate {
	if i != nil {
		bcu.SetTopID(*i)
	}
	return bcu
}

// AddTopID adds i to the "top_id" field.
func (bcu *BlogsCommentUpdate) AddTopID(i int) *BlogsCommentUpdate {
	bcu.mutation.AddTopID(i)
	return bcu
}

// SetParentID sets the "parent_id" field.
func (bcu *BlogsCommentUpdate) SetParentID(i int) *BlogsCommentUpdate {
	bcu.mutation.ResetParentID()
	bcu.mutation.SetParentID(i)
	return bcu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (bcu *BlogsCommentUpdate) SetNillableParentID(i *int) *BlogsCommentUpdate {
	if i != nil {
		bcu.SetParentID(*i)
	}
	return bcu
}

// AddParentID adds i to the "parent_id" field.
func (bcu *BlogsCommentUpdate) AddParentID(i int) *BlogsCommentUpdate {
	bcu.mutation.AddParentID(i)
	return bcu
}

// SetLevel sets the "level" field.
func (bcu *BlogsCommentUpdate) SetLevel(i int) *BlogsCommentUpdate {
	bcu.mutation.ResetLevel()
	bcu.mutation.SetLevel(i)
	return bcu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (bcu *BlogsCommentUpdate) SetNillableLevel(i *int) *BlogsCommentUpdate {
	if i != nil {
		bcu.SetLevel(*i)
	}
	return bcu
}

// AddLevel adds i to the "level" field.
func (bcu *BlogsCommentUpdate) AddLevel(i int) *BlogsCommentUpdate {
	bcu.mutation.AddLevel(i)
	return bcu
}

// SetTotal sets the "total" field.
func (bcu *BlogsCommentUpdate) SetTotal(i int) *BlogsCommentUpdate {
	bcu.mutation.ResetTotal()
	bcu.mutation.SetTotal(i)
	return bcu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (bcu *BlogsCommentUpdate) SetNillableTotal(i *int) *BlogsCommentUpdate {
	if i != nil {
		bcu.SetTotal(*i)
	}
	return bcu
}

// AddTotal adds i to the "total" field.
func (bcu *BlogsCommentUpdate) AddTotal(i int) *BlogsCommentUpdate {
	bcu.mutation.AddTotal(i)
	return bcu
}

// SetStatus sets the "status" field.
func (bcu *BlogsCommentUpdate) SetStatus(i int8) *BlogsCommentUpdate {
	bcu.mutation.ResetStatus()
	bcu.mutation.SetStatus(i)
	return bcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bcu *BlogsCommentUpdate) SetNillableStatus(i *int8) *BlogsCommentUpdate {
	if i != nil {
		bcu.SetStatus(*i)
	}
	return bcu
}

// AddStatus adds i to the "status" field.
func (bcu *BlogsCommentUpdate) AddStatus(i int8) *BlogsCommentUpdate {
	bcu.mutation.AddStatus(i)
	return bcu
}

// SetContent sets the "content" field.
func (bcu *BlogsCommentUpdate) SetContent(s string) *BlogsCommentUpdate {
	bcu.mutation.SetContent(s)
	return bcu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (bcu *BlogsCommentUpdate) SetNillableContent(s *string) *BlogsCommentUpdate {
	if s != nil {
		bcu.SetContent(*s)
	}
	return bcu
}

// Mutation returns the BlogsCommentMutation object of the builder.
func (bcu *BlogsCommentUpdate) Mutation() *BlogsCommentMutation {
	return bcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bcu *BlogsCommentUpdate) Save(ctx context.Context) (int, error) {
	if err := bcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, bcu.sqlSave, bcu.mutation, bcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcu *BlogsCommentUpdate) SaveX(ctx context.Context) int {
	affected, err := bcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bcu *BlogsCommentUpdate) Exec(ctx context.Context) error {
	_, err := bcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcu *BlogsCommentUpdate) ExecX(ctx context.Context) {
	if err := bcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcu *BlogsCommentUpdate) defaults() error {
	if _, ok := bcu.mutation.UpdatedAt(); !ok {
		if blogscomment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized blogscomment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := blogscomment.UpdateDefaultUpdatedAt()
		bcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bcu *BlogsCommentUpdate) check() error {
	if v, ok := bcu.mutation.AccountID(); ok {
		if err := blogscomment.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "BlogsComment.account_id": %w`, err)}
		}
	}
	if v, ok := bcu.mutation.BlogID(); ok {
		if err := blogscomment.BlogIDValidator(v); err != nil {
			return &ValidationError{Name: "blog_id", err: fmt.Errorf(`ent: validator failed for field "BlogsComment.blog_id": %w`, err)}
		}
	}
	return nil
}

func (bcu *BlogsCommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogscomment.Table, blogscomment.Columns, sqlgraph.NewFieldSpec(blogscomment.FieldID, field.TypeInt))
	if ps := bcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcu.mutation.UpdatedAt(); ok {
		_spec.SetField(blogscomment.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := bcu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(blogscomment.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := bcu.mutation.UpdatedBy(); ok {
		_spec.SetField(blogscomment.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := bcu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(blogscomment.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := bcu.mutation.DeletedAt(); ok {
		_spec.SetField(blogscomment.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := bcu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(blogscomment.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := bcu.mutation.DeletedBy(); ok {
		_spec.SetField(blogscomment.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := bcu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(blogscomment.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := bcu.mutation.AccountID(); ok {
		_spec.SetField(blogscomment.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := bcu.mutation.AddedAccountID(); ok {
		_spec.AddField(blogscomment.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := bcu.mutation.BlogID(); ok {
		_spec.SetField(blogscomment.FieldBlogID, field.TypeInt, value)
	}
	if value, ok := bcu.mutation.AddedBlogID(); ok {
		_spec.AddField(blogscomment.FieldBlogID, field.TypeInt, value)
	}
	if value, ok := bcu.mutation.TopID(); ok {
		_spec.SetField(blogscomment.FieldTopID, field.TypeInt, value)
	}
	if value, ok := bcu.mutation.AddedTopID(); ok {
		_spec.AddField(blogscomment.FieldTopID, field.TypeInt, value)
	}
	if value, ok := bcu.mutation.ParentID(); ok {
		_spec.SetField(blogscomment.FieldParentID, field.TypeInt, value)
	}
	if value, ok := bcu.mutation.AddedParentID(); ok {
		_spec.AddField(blogscomment.FieldParentID, field.TypeInt, value)
	}
	if value, ok := bcu.mutation.Level(); ok {
		_spec.SetField(blogscomment.FieldLevel, field.TypeInt, value)
	}
	if value, ok := bcu.mutation.AddedLevel(); ok {
		_spec.AddField(blogscomment.FieldLevel, field.TypeInt, value)
	}
	if value, ok := bcu.mutation.Total(); ok {
		_spec.SetField(blogscomment.FieldTotal, field.TypeInt, value)
	}
	if value, ok := bcu.mutation.AddedTotal(); ok {
		_spec.AddField(blogscomment.FieldTotal, field.TypeInt, value)
	}
	if value, ok := bcu.mutation.Status(); ok {
		_spec.SetField(blogscomment.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := bcu.mutation.AddedStatus(); ok {
		_spec.AddField(blogscomment.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := bcu.mutation.Content(); ok {
		_spec.SetField(blogscomment.FieldContent, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogscomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bcu.mutation.done = true
	return n, nil
}

// BlogsCommentUpdateOne is the builder for updating a single BlogsComment entity.
type BlogsCommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlogsCommentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bcuo *BlogsCommentUpdateOne) SetUpdatedAt(i int64) *BlogsCommentUpdateOne {
	bcuo.mutation.ResetUpdatedAt()
	bcuo.mutation.SetUpdatedAt(i)
	return bcuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (bcuo *BlogsCommentUpdateOne) AddUpdatedAt(i int64) *BlogsCommentUpdateOne {
	bcuo.mutation.AddUpdatedAt(i)
	return bcuo
}

// SetUpdatedBy sets the "updated_by" field.
func (bcuo *BlogsCommentUpdateOne) SetUpdatedBy(i int64) *BlogsCommentUpdateOne {
	bcuo.mutation.ResetUpdatedBy()
	bcuo.mutation.SetUpdatedBy(i)
	return bcuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (bcuo *BlogsCommentUpdateOne) SetNillableUpdatedBy(i *int64) *BlogsCommentUpdateOne {
	if i != nil {
		bcuo.SetUpdatedBy(*i)
	}
	return bcuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (bcuo *BlogsCommentUpdateOne) AddUpdatedBy(i int64) *BlogsCommentUpdateOne {
	bcuo.mutation.AddUpdatedBy(i)
	return bcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (bcuo *BlogsCommentUpdateOne) SetDeletedAt(i int64) *BlogsCommentUpdateOne {
	bcuo.mutation.ResetDeletedAt()
	bcuo.mutation.SetDeletedAt(i)
	return bcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bcuo *BlogsCommentUpdateOne) SetNillableDeletedAt(i *int64) *BlogsCommentUpdateOne {
	if i != nil {
		bcuo.SetDeletedAt(*i)
	}
	return bcuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (bcuo *BlogsCommentUpdateOne) AddDeletedAt(i int64) *BlogsCommentUpdateOne {
	bcuo.mutation.AddDeletedAt(i)
	return bcuo
}

// SetDeletedBy sets the "deleted_by" field.
func (bcuo *BlogsCommentUpdateOne) SetDeletedBy(i int64) *BlogsCommentUpdateOne {
	bcuo.mutation.ResetDeletedBy()
	bcuo.mutation.SetDeletedBy(i)
	return bcuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (bcuo *BlogsCommentUpdateOne) SetNillableDeletedBy(i *int64) *BlogsCommentUpdateOne {
	if i != nil {
		bcuo.SetDeletedBy(*i)
	}
	return bcuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (bcuo *BlogsCommentUpdateOne) AddDeletedBy(i int64) *BlogsCommentUpdateOne {
	bcuo.mutation.AddDeletedBy(i)
	return bcuo
}

// SetAccountID sets the "account_id" field.
func (bcuo *BlogsCommentUpdateOne) SetAccountID(i int) *BlogsCommentUpdateOne {
	bcuo.mutation.ResetAccountID()
	bcuo.mutation.SetAccountID(i)
	return bcuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (bcuo *BlogsCommentUpdateOne) SetNillableAccountID(i *int) *BlogsCommentUpdateOne {
	if i != nil {
		bcuo.SetAccountID(*i)
	}
	return bcuo
}

// AddAccountID adds i to the "account_id" field.
func (bcuo *BlogsCommentUpdateOne) AddAccountID(i int) *BlogsCommentUpdateOne {
	bcuo.mutation.AddAccountID(i)
	return bcuo
}

// SetBlogID sets the "blog_id" field.
func (bcuo *BlogsCommentUpdateOne) SetBlogID(i int) *BlogsCommentUpdateOne {
	bcuo.mutation.ResetBlogID()
	bcuo.mutation.SetBlogID(i)
	return bcuo
}

// SetNillableBlogID sets the "blog_id" field if the given value is not nil.
func (bcuo *BlogsCommentUpdateOne) SetNillableBlogID(i *int) *BlogsCommentUpdateOne {
	if i != nil {
		bcuo.SetBlogID(*i)
	}
	return bcuo
}

// AddBlogID adds i to the "blog_id" field.
func (bcuo *BlogsCommentUpdateOne) AddBlogID(i int) *BlogsCommentUpdateOne {
	bcuo.mutation.AddBlogID(i)
	return bcuo
}

// SetTopID sets the "top_id" field.
func (bcuo *BlogsCommentUpdateOne) SetTopID(i int) *BlogsCommentUpdateOne {
	bcuo.mutation.ResetTopID()
	bcuo.mutation.SetTopID(i)
	return bcuo
}

// SetNillableTopID sets the "top_id" field if the given value is not nil.
func (bcuo *BlogsCommentUpdateOne) SetNillableTopID(i *int) *BlogsCommentUpdateOne {
	if i != nil {
		bcuo.SetTopID(*i)
	}
	return bcuo
}

// AddTopID adds i to the "top_id" field.
func (bcuo *BlogsCommentUpdateOne) AddTopID(i int) *BlogsCommentUpdateOne {
	bcuo.mutation.AddTopID(i)
	return bcuo
}

// SetParentID sets the "parent_id" field.
func (bcuo *BlogsCommentUpdateOne) SetParentID(i int) *BlogsCommentUpdateOne {
	bcuo.mutation.ResetParentID()
	bcuo.mutation.SetParentID(i)
	return bcuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (bcuo *BlogsCommentUpdateOne) SetNillableParentID(i *int) *BlogsCommentUpdateOne {
	if i != nil {
		bcuo.SetParentID(*i)
	}
	return bcuo
}

// AddParentID adds i to the "parent_id" field.
func (bcuo *BlogsCommentUpdateOne) AddParentID(i int) *BlogsCommentUpdateOne {
	bcuo.mutation.AddParentID(i)
	return bcuo
}

// SetLevel sets the "level" field.
func (bcuo *BlogsCommentUpdateOne) SetLevel(i int) *BlogsCommentUpdateOne {
	bcuo.mutation.ResetLevel()
	bcuo.mutation.SetLevel(i)
	return bcuo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (bcuo *BlogsCommentUpdateOne) SetNillableLevel(i *int) *BlogsCommentUpdateOne {
	if i != nil {
		bcuo.SetLevel(*i)
	}
	return bcuo
}

// AddLevel adds i to the "level" field.
func (bcuo *BlogsCommentUpdateOne) AddLevel(i int) *BlogsCommentUpdateOne {
	bcuo.mutation.AddLevel(i)
	return bcuo
}

// SetTotal sets the "total" field.
func (bcuo *BlogsCommentUpdateOne) SetTotal(i int) *BlogsCommentUpdateOne {
	bcuo.mutation.ResetTotal()
	bcuo.mutation.SetTotal(i)
	return bcuo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (bcuo *BlogsCommentUpdateOne) SetNillableTotal(i *int) *BlogsCommentUpdateOne {
	if i != nil {
		bcuo.SetTotal(*i)
	}
	return bcuo
}

// AddTotal adds i to the "total" field.
func (bcuo *BlogsCommentUpdateOne) AddTotal(i int) *BlogsCommentUpdateOne {
	bcuo.mutation.AddTotal(i)
	return bcuo
}

// SetStatus sets the "status" field.
func (bcuo *BlogsCommentUpdateOne) SetStatus(i int8) *BlogsCommentUpdateOne {
	bcuo.mutation.ResetStatus()
	bcuo.mutation.SetStatus(i)
	return bcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bcuo *BlogsCommentUpdateOne) SetNillableStatus(i *int8) *BlogsCommentUpdateOne {
	if i != nil {
		bcuo.SetStatus(*i)
	}
	return bcuo
}

// AddStatus adds i to the "status" field.
func (bcuo *BlogsCommentUpdateOne) AddStatus(i int8) *BlogsCommentUpdateOne {
	bcuo.mutation.AddStatus(i)
	return bcuo
}

// SetContent sets the "content" field.
func (bcuo *BlogsCommentUpdateOne) SetContent(s string) *BlogsCommentUpdateOne {
	bcuo.mutation.SetContent(s)
	return bcuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (bcuo *BlogsCommentUpdateOne) SetNillableContent(s *string) *BlogsCommentUpdateOne {
	if s != nil {
		bcuo.SetContent(*s)
	}
	return bcuo
}

// Mutation returns the BlogsCommentMutation object of the builder.
func (bcuo *BlogsCommentUpdateOne) Mutation() *BlogsCommentMutation {
	return bcuo.mutation
}

// Where appends a list predicates to the BlogsCommentUpdate builder.
func (bcuo *BlogsCommentUpdateOne) Where(ps ...predicate.BlogsComment) *BlogsCommentUpdateOne {
	bcuo.mutation.Where(ps...)
	return bcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bcuo *BlogsCommentUpdateOne) Select(field string, fields ...string) *BlogsCommentUpdateOne {
	bcuo.fields = append([]string{field}, fields...)
	return bcuo
}

// Save executes the query and returns the updated BlogsComment entity.
func (bcuo *BlogsCommentUpdateOne) Save(ctx context.Context) (*BlogsComment, error) {
	if err := bcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bcuo.sqlSave, bcuo.mutation, bcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcuo *BlogsCommentUpdateOne) SaveX(ctx context.Context) *BlogsComment {
	node, err := bcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bcuo *BlogsCommentUpdateOne) Exec(ctx context.Context) error {
	_, err := bcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcuo *BlogsCommentUpdateOne) ExecX(ctx context.Context) {
	if err := bcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcuo *BlogsCommentUpdateOne) defaults() error {
	if _, ok := bcuo.mutation.UpdatedAt(); !ok {
		if blogscomment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized blogscomment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := blogscomment.UpdateDefaultUpdatedAt()
		bcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bcuo *BlogsCommentUpdateOne) check() error {
	if v, ok := bcuo.mutation.AccountID(); ok {
		if err := blogscomment.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "BlogsComment.account_id": %w`, err)}
		}
	}
	if v, ok := bcuo.mutation.BlogID(); ok {
		if err := blogscomment.BlogIDValidator(v); err != nil {
			return &ValidationError{Name: "blog_id", err: fmt.Errorf(`ent: validator failed for field "BlogsComment.blog_id": %w`, err)}
		}
	}
	return nil
}

func (bcuo *BlogsCommentUpdateOne) sqlSave(ctx context.Context) (_node *BlogsComment, err error) {
	if err := bcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogscomment.Table, blogscomment.Columns, sqlgraph.NewFieldSpec(blogscomment.FieldID, field.TypeInt))
	id, ok := bcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlogsComment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blogscomment.FieldID)
		for _, f := range fields {
			if !blogscomment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blogscomment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(blogscomment.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := bcuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(blogscomment.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := bcuo.mutation.UpdatedBy(); ok {
		_spec.SetField(blogscomment.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := bcuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(blogscomment.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := bcuo.mutation.DeletedAt(); ok {
		_spec.SetField(blogscomment.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := bcuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(blogscomment.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := bcuo.mutation.DeletedBy(); ok {
		_spec.SetField(blogscomment.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := bcuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(blogscomment.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := bcuo.mutation.AccountID(); ok {
		_spec.SetField(blogscomment.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := bcuo.mutation.AddedAccountID(); ok {
		_spec.AddField(blogscomment.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := bcuo.mutation.BlogID(); ok {
		_spec.SetField(blogscomment.FieldBlogID, field.TypeInt, value)
	}
	if value, ok := bcuo.mutation.AddedBlogID(); ok {
		_spec.AddField(blogscomment.FieldBlogID, field.TypeInt, value)
	}
	if value, ok := bcuo.mutation.TopID(); ok {
		_spec.SetField(blogscomment.FieldTopID, field.TypeInt, value)
	}
	if value, ok := bcuo.mutation.AddedTopID(); ok {
		_spec.AddField(blogscomment.FieldTopID, field.TypeInt, value)
	}
	if value, ok := bcuo.mutation.ParentID(); ok {
		_spec.SetField(blogscomment.FieldParentID, field.TypeInt, value)
	}
	if value, ok := bcuo.mutation.AddedParentID(); ok {
		_spec.AddField(blogscomment.FieldParentID, field.TypeInt, value)
	}
	if value, ok := bcuo.mutation.Level(); ok {
		_spec.SetField(blogscomment.FieldLevel, field.TypeInt, value)
	}
	if value, ok := bcuo.mutation.AddedLevel(); ok {
		_spec.AddField(blogscomment.FieldLevel, field.TypeInt, value)
	}
	if value, ok := bcuo.mutation.Total(); ok {
		_spec.SetField(blogscomment.FieldTotal, field.TypeInt, value)
	}
	if value, ok := bcuo.mutation.AddedTotal(); ok {
		_spec.AddField(blogscomment.FieldTotal, field.TypeInt, value)
	}
	if value, ok := bcuo.mutation.Status(); ok {
		_spec.SetField(blogscomment.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := bcuo.mutation.AddedStatus(); ok {
		_spec.AddField(blogscomment.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := bcuo.mutation.Content(); ok {
		_spec.SetField(blogscomment.FieldContent, field.TypeString, value)
	}
	_node = &BlogsComment{config: bcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogscomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bcuo.mutation.done = true
	return _node, nil
}
