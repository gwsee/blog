// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/userproject"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 项目表
type UserProject struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 创建人
	CreatedBy int64 `json:"created_by,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 更新人
	UpdatedBy int64 `json:"updated_by,omitempty"`
	// 软删除时间
	DeletedAt int64 `json:"deleted_at,omitempty"`
	// 删除人
	DeletedBy int64 `json:"deleted_by,omitempty"`
	// 用户ID
	UserID int `json:"user_id,omitempty"`
	// 经历ID
	ExperienceID int `json:"experience_id,omitempty"`
	// 项目名称
	Title string `json:"title,omitempty"`
	// 项目描述
	Description string `json:"description,omitempty"`
	// 使用技能
	Skills []string `json:"skills,omitempty"`
	// 开始时间
	Start int64 `json:"start,omitempty"`
	// 结束时间
	End int64 `json:"end,omitempty"`
	// 项目地址
	Link string `json:"link,omitempty"`
	// 项目照片
	Photos       []string `json:"photos,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserProject) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userproject.FieldSkills, userproject.FieldPhotos:
			values[i] = new([]byte)
		case userproject.FieldID, userproject.FieldCreatedAt, userproject.FieldCreatedBy, userproject.FieldUpdatedAt, userproject.FieldUpdatedBy, userproject.FieldDeletedAt, userproject.FieldDeletedBy, userproject.FieldUserID, userproject.FieldExperienceID, userproject.FieldStart, userproject.FieldEnd:
			values[i] = new(sql.NullInt64)
		case userproject.FieldTitle, userproject.FieldDescription, userproject.FieldLink:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserProject fields.
func (up *UserProject) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userproject.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			up.ID = int(value.Int64)
		case userproject.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				up.CreatedAt = value.Int64
			}
		case userproject.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				up.CreatedBy = value.Int64
			}
		case userproject.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				up.UpdatedAt = value.Int64
			}
		case userproject.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				up.UpdatedBy = value.Int64
			}
		case userproject.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				up.DeletedAt = value.Int64
			}
		case userproject.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				up.DeletedBy = value.Int64
			}
		case userproject.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				up.UserID = int(value.Int64)
			}
		case userproject.FieldExperienceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field experience_id", values[i])
			} else if value.Valid {
				up.ExperienceID = int(value.Int64)
			}
		case userproject.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				up.Title = value.String
			}
		case userproject.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				up.Description = value.String
			}
		case userproject.FieldSkills:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field skills", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &up.Skills); err != nil {
					return fmt.Errorf("unmarshal field skills: %w", err)
				}
			}
		case userproject.FieldStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				up.Start = value.Int64
			}
		case userproject.FieldEnd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				up.End = value.Int64
			}
		case userproject.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				up.Link = value.String
			}
		case userproject.FieldPhotos:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field photos", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &up.Photos); err != nil {
					return fmt.Errorf("unmarshal field photos: %w", err)
				}
			}
		default:
			up.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserProject.
// This includes values selected through modifiers, order, etc.
func (up *UserProject) Value(name string) (ent.Value, error) {
	return up.selectValues.Get(name)
}

// Update returns a builder for updating this UserProject.
// Note that you need to call UserProject.Unwrap() before calling this method if this UserProject
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UserProject) Update() *UserProjectUpdateOne {
	return NewUserProjectClient(up.config).UpdateOne(up)
}

// Unwrap unwraps the UserProject entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UserProject) Unwrap() *UserProject {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserProject is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UserProject) String() string {
	var builder strings.Builder
	builder.WriteString("UserProject(")
	builder.WriteString(fmt.Sprintf("id=%v, ", up.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", up.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", up.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", up.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", up.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", up.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(fmt.Sprintf("%v", up.DeletedBy))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", up.UserID))
	builder.WriteString(", ")
	builder.WriteString("experience_id=")
	builder.WriteString(fmt.Sprintf("%v", up.ExperienceID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(up.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(up.Description)
	builder.WriteString(", ")
	builder.WriteString("skills=")
	builder.WriteString(fmt.Sprintf("%v", up.Skills))
	builder.WriteString(", ")
	builder.WriteString("start=")
	builder.WriteString(fmt.Sprintf("%v", up.Start))
	builder.WriteString(", ")
	builder.WriteString("end=")
	builder.WriteString(fmt.Sprintf("%v", up.End))
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(up.Link)
	builder.WriteString(", ")
	builder.WriteString("photos=")
	builder.WriteString(fmt.Sprintf("%v", up.Photos))
	builder.WriteByte(')')
	return builder.String()
}

// UserProjects is a parsable slice of UserProject.
type UserProjects []*UserProject
