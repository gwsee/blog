// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/palacestodo"
	"blog/internal/ent/palacestododone"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 代办事项完成记录表
type PalacesTodoDone struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 创建人
	CreatedBy int64 `json:"created_by,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 更新人
	UpdatedBy int64 `json:"updated_by,omitempty"`
	// 软删除时间
	DeletedAt int64 `json:"deleted_at,omitempty"`
	// 删除人
	DeletedBy int64 `json:"deleted_by,omitempty"`
	// 代办事项的ID
	TodoID int `json:"todo_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PalacesTodoDoneQuery when eager-loading is set.
	Edges        PalacesTodoDoneEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PalacesTodoDoneEdges holds the relations/edges for other nodes in the graph.
type PalacesTodoDoneEdges struct {
	// Owner holds the value of the owner edge.
	Owner *PalacesTodo `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PalacesTodoDoneEdges) OwnerOrErr() (*PalacesTodo, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: palacestodo.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PalacesTodoDone) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case palacestododone.FieldID, palacestododone.FieldCreatedAt, palacestododone.FieldCreatedBy, palacestododone.FieldUpdatedAt, palacestododone.FieldUpdatedBy, palacestododone.FieldDeletedAt, palacestododone.FieldDeletedBy, palacestododone.FieldTodoID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PalacesTodoDone fields.
func (ptd *PalacesTodoDone) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case palacestododone.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ptd.ID = int(value.Int64)
		case palacestododone.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ptd.CreatedAt = value.Int64
			}
		case palacestododone.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ptd.CreatedBy = value.Int64
			}
		case palacestododone.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ptd.UpdatedAt = value.Int64
			}
		case palacestododone.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ptd.UpdatedBy = value.Int64
			}
		case palacestododone.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ptd.DeletedAt = value.Int64
			}
		case palacestododone.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				ptd.DeletedBy = value.Int64
			}
		case palacestododone.FieldTodoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field todo_id", values[i])
			} else if value.Valid {
				ptd.TodoID = int(value.Int64)
			}
		default:
			ptd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PalacesTodoDone.
// This includes values selected through modifiers, order, etc.
func (ptd *PalacesTodoDone) Value(name string) (ent.Value, error) {
	return ptd.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the PalacesTodoDone entity.
func (ptd *PalacesTodoDone) QueryOwner() *PalacesTodoQuery {
	return NewPalacesTodoDoneClient(ptd.config).QueryOwner(ptd)
}

// Update returns a builder for updating this PalacesTodoDone.
// Note that you need to call PalacesTodoDone.Unwrap() before calling this method if this PalacesTodoDone
// was returned from a transaction, and the transaction was committed or rolled back.
func (ptd *PalacesTodoDone) Update() *PalacesTodoDoneUpdateOne {
	return NewPalacesTodoDoneClient(ptd.config).UpdateOne(ptd)
}

// Unwrap unwraps the PalacesTodoDone entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ptd *PalacesTodoDone) Unwrap() *PalacesTodoDone {
	_tx, ok := ptd.config.driver.(*txDriver)
	if !ok {
		panic("ent: PalacesTodoDone is not a transactional entity")
	}
	ptd.config.driver = _tx.drv
	return ptd
}

// String implements the fmt.Stringer.
func (ptd *PalacesTodoDone) String() string {
	var builder strings.Builder
	builder.WriteString("PalacesTodoDone(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ptd.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ptd.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ptd.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ptd.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ptd.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ptd.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(fmt.Sprintf("%v", ptd.DeletedBy))
	builder.WriteString(", ")
	builder.WriteString("todo_id=")
	builder.WriteString(fmt.Sprintf("%v", ptd.TodoID))
	builder.WriteByte(')')
	return builder.String()
}

// PalacesTodoDones is a parsable slice of PalacesTodoDone.
type PalacesTodoDones []*PalacesTodoDone
