// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/blogscontent"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlogsContentCreate is the builder for creating a BlogsContent entity.
type BlogsContentCreate struct {
	config
	mutation *BlogsContentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetContent sets the "content" field.
func (bcc *BlogsContentCreate) SetContent(s string) *BlogsContentCreate {
	bcc.mutation.SetContent(s)
	return bcc
}

// SetFiles sets the "files" field.
func (bcc *BlogsContentCreate) SetFiles(s []string) *BlogsContentCreate {
	bcc.mutation.SetFiles(s)
	return bcc
}

// SetID sets the "id" field.
func (bcc *BlogsContentCreate) SetID(i int) *BlogsContentCreate {
	bcc.mutation.SetID(i)
	return bcc
}

// Mutation returns the BlogsContentMutation object of the builder.
func (bcc *BlogsContentCreate) Mutation() *BlogsContentMutation {
	return bcc.mutation
}

// Save creates the BlogsContent in the database.
func (bcc *BlogsContentCreate) Save(ctx context.Context) (*BlogsContent, error) {
	return withHooks(ctx, bcc.sqlSave, bcc.mutation, bcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bcc *BlogsContentCreate) SaveX(ctx context.Context) *BlogsContent {
	v, err := bcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcc *BlogsContentCreate) Exec(ctx context.Context) error {
	_, err := bcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcc *BlogsContentCreate) ExecX(ctx context.Context) {
	if err := bcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcc *BlogsContentCreate) check() error {
	if _, ok := bcc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "BlogsContent.content"`)}
	}
	if v, ok := bcc.mutation.Content(); ok {
		if err := blogscontent.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "BlogsContent.content": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.Files(); !ok {
		return &ValidationError{Name: "files", err: errors.New(`ent: missing required field "BlogsContent.files"`)}
	}
	return nil
}

func (bcc *BlogsContentCreate) sqlSave(ctx context.Context) (*BlogsContent, error) {
	if err := bcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bcc.mutation.id = &_node.ID
	bcc.mutation.done = true
	return _node, nil
}

func (bcc *BlogsContentCreate) createSpec() (*BlogsContent, *sqlgraph.CreateSpec) {
	var (
		_node = &BlogsContent{config: bcc.config}
		_spec = sqlgraph.NewCreateSpec(blogscontent.Table, sqlgraph.NewFieldSpec(blogscontent.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bcc.conflict
	if id, ok := bcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bcc.mutation.Content(); ok {
		_spec.SetField(blogscontent.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := bcc.mutation.Files(); ok {
		_spec.SetField(blogscontent.FieldFiles, field.TypeJSON, value)
		_node.Files = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlogsContent.Create().
//		SetContent(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlogsContentUpsert) {
//			SetContent(v+v).
//		}).
//		Exec(ctx)
func (bcc *BlogsContentCreate) OnConflict(opts ...sql.ConflictOption) *BlogsContentUpsertOne {
	bcc.conflict = opts
	return &BlogsContentUpsertOne{
		create: bcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlogsContent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcc *BlogsContentCreate) OnConflictColumns(columns ...string) *BlogsContentUpsertOne {
	bcc.conflict = append(bcc.conflict, sql.ConflictColumns(columns...))
	return &BlogsContentUpsertOne{
		create: bcc,
	}
}

type (
	// BlogsContentUpsertOne is the builder for "upsert"-ing
	//  one BlogsContent node.
	BlogsContentUpsertOne struct {
		create *BlogsContentCreate
	}

	// BlogsContentUpsert is the "OnConflict" setter.
	BlogsContentUpsert struct {
		*sql.UpdateSet
	}
)

// SetContent sets the "content" field.
func (u *BlogsContentUpsert) SetContent(v string) *BlogsContentUpsert {
	u.Set(blogscontent.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *BlogsContentUpsert) UpdateContent() *BlogsContentUpsert {
	u.SetExcluded(blogscontent.FieldContent)
	return u
}

// SetFiles sets the "files" field.
func (u *BlogsContentUpsert) SetFiles(v []string) *BlogsContentUpsert {
	u.Set(blogscontent.FieldFiles, v)
	return u
}

// UpdateFiles sets the "files" field to the value that was provided on create.
func (u *BlogsContentUpsert) UpdateFiles() *BlogsContentUpsert {
	u.SetExcluded(blogscontent.FieldFiles)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BlogsContent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blogscontent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlogsContentUpsertOne) UpdateNewValues() *BlogsContentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(blogscontent.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlogsContent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlogsContentUpsertOne) Ignore() *BlogsContentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlogsContentUpsertOne) DoNothing() *BlogsContentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlogsContentCreate.OnConflict
// documentation for more info.
func (u *BlogsContentUpsertOne) Update(set func(*BlogsContentUpsert)) *BlogsContentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlogsContentUpsert{UpdateSet: update})
	}))
	return u
}

// SetContent sets the "content" field.
func (u *BlogsContentUpsertOne) SetContent(v string) *BlogsContentUpsertOne {
	return u.Update(func(s *BlogsContentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *BlogsContentUpsertOne) UpdateContent() *BlogsContentUpsertOne {
	return u.Update(func(s *BlogsContentUpsert) {
		s.UpdateContent()
	})
}

// SetFiles sets the "files" field.
func (u *BlogsContentUpsertOne) SetFiles(v []string) *BlogsContentUpsertOne {
	return u.Update(func(s *BlogsContentUpsert) {
		s.SetFiles(v)
	})
}

// UpdateFiles sets the "files" field to the value that was provided on create.
func (u *BlogsContentUpsertOne) UpdateFiles() *BlogsContentUpsertOne {
	return u.Update(func(s *BlogsContentUpsert) {
		s.UpdateFiles()
	})
}

// Exec executes the query.
func (u *BlogsContentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlogsContentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlogsContentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlogsContentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlogsContentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlogsContentCreateBulk is the builder for creating many BlogsContent entities in bulk.
type BlogsContentCreateBulk struct {
	config
	err      error
	builders []*BlogsContentCreate
	conflict []sql.ConflictOption
}

// Save creates the BlogsContent entities in the database.
func (bccb *BlogsContentCreateBulk) Save(ctx context.Context) ([]*BlogsContent, error) {
	if bccb.err != nil {
		return nil, bccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bccb.builders))
	nodes := make([]*BlogsContent, len(bccb.builders))
	mutators := make([]Mutator, len(bccb.builders))
	for i := range bccb.builders {
		func(i int, root context.Context) {
			builder := bccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogsContentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bccb *BlogsContentCreateBulk) SaveX(ctx context.Context) []*BlogsContent {
	v, err := bccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bccb *BlogsContentCreateBulk) Exec(ctx context.Context) error {
	_, err := bccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bccb *BlogsContentCreateBulk) ExecX(ctx context.Context) {
	if err := bccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlogsContent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlogsContentUpsert) {
//			SetContent(v+v).
//		}).
//		Exec(ctx)
func (bccb *BlogsContentCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlogsContentUpsertBulk {
	bccb.conflict = opts
	return &BlogsContentUpsertBulk{
		create: bccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlogsContent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bccb *BlogsContentCreateBulk) OnConflictColumns(columns ...string) *BlogsContentUpsertBulk {
	bccb.conflict = append(bccb.conflict, sql.ConflictColumns(columns...))
	return &BlogsContentUpsertBulk{
		create: bccb,
	}
}

// BlogsContentUpsertBulk is the builder for "upsert"-ing
// a bulk of BlogsContent nodes.
type BlogsContentUpsertBulk struct {
	create *BlogsContentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlogsContent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blogscontent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlogsContentUpsertBulk) UpdateNewValues() *BlogsContentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(blogscontent.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlogsContent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlogsContentUpsertBulk) Ignore() *BlogsContentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlogsContentUpsertBulk) DoNothing() *BlogsContentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlogsContentCreateBulk.OnConflict
// documentation for more info.
func (u *BlogsContentUpsertBulk) Update(set func(*BlogsContentUpsert)) *BlogsContentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlogsContentUpsert{UpdateSet: update})
	}))
	return u
}

// SetContent sets the "content" field.
func (u *BlogsContentUpsertBulk) SetContent(v string) *BlogsContentUpsertBulk {
	return u.Update(func(s *BlogsContentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *BlogsContentUpsertBulk) UpdateContent() *BlogsContentUpsertBulk {
	return u.Update(func(s *BlogsContentUpsert) {
		s.UpdateContent()
	})
}

// SetFiles sets the "files" field.
func (u *BlogsContentUpsertBulk) SetFiles(v []string) *BlogsContentUpsertBulk {
	return u.Update(func(s *BlogsContentUpsert) {
		s.SetFiles(v)
	})
}

// UpdateFiles sets the "files" field to the value that was provided on create.
func (u *BlogsContentUpsertBulk) UpdateFiles() *BlogsContentUpsertBulk {
	return u.Update(func(s *BlogsContentUpsert) {
		s.UpdateFiles()
	})
}

// Exec executes the query.
func (u *BlogsContentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlogsContentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlogsContentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlogsContentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
