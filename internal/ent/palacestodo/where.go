// Code generated by ent, DO NOT EDIT.

package palacestodo

import (
	"blog/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldDeletedBy, v))
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldAccountID, v))
}

// Theme applies equality check predicate on the "theme" field. It's identical to ThemeEQ.
func Theme(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldTheme, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldType, v))
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldFrom, v))
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldTo, v))
}

// Num applies equality check predicate on the "num" field. It's identical to NumEQ.
func Num(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldNum, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldSort, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldContent, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldDeletedBy, v))
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldAccountID, v))
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldAccountID, v))
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldAccountID, vs...))
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldAccountID, vs...))
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldAccountID, v))
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldAccountID, v))
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldAccountID, v))
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v int) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldAccountID, v))
}

// ThemeEQ applies the EQ predicate on the "theme" field.
func ThemeEQ(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldTheme, v))
}

// ThemeNEQ applies the NEQ predicate on the "theme" field.
func ThemeNEQ(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldTheme, v))
}

// ThemeIn applies the In predicate on the "theme" field.
func ThemeIn(vs ...string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldTheme, vs...))
}

// ThemeNotIn applies the NotIn predicate on the "theme" field.
func ThemeNotIn(vs ...string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldTheme, vs...))
}

// ThemeGT applies the GT predicate on the "theme" field.
func ThemeGT(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldTheme, v))
}

// ThemeGTE applies the GTE predicate on the "theme" field.
func ThemeGTE(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldTheme, v))
}

// ThemeLT applies the LT predicate on the "theme" field.
func ThemeLT(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldTheme, v))
}

// ThemeLTE applies the LTE predicate on the "theme" field.
func ThemeLTE(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldTheme, v))
}

// ThemeContains applies the Contains predicate on the "theme" field.
func ThemeContains(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldContains(FieldTheme, v))
}

// ThemeHasPrefix applies the HasPrefix predicate on the "theme" field.
func ThemeHasPrefix(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldHasPrefix(FieldTheme, v))
}

// ThemeHasSuffix applies the HasSuffix predicate on the "theme" field.
func ThemeHasSuffix(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldHasSuffix(FieldTheme, v))
}

// ThemeEqualFold applies the EqualFold predicate on the "theme" field.
func ThemeEqualFold(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEqualFold(FieldTheme, v))
}

// ThemeContainsFold applies the ContainsFold predicate on the "theme" field.
func ThemeContainsFold(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldContainsFold(FieldTheme, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldType, v))
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldFrom, v))
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldTo, v))
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldTo, v))
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldTo, vs...))
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldTo, vs...))
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldTo, v))
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldTo, v))
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldTo, v))
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldTo, v))
}

// NumEQ applies the EQ predicate on the "num" field.
func NumEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldNum, v))
}

// NumNEQ applies the NEQ predicate on the "num" field.
func NumNEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldNum, v))
}

// NumIn applies the In predicate on the "num" field.
func NumIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldNum, vs...))
}

// NumNotIn applies the NotIn predicate on the "num" field.
func NumNotIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldNum, vs...))
}

// NumGT applies the GT predicate on the "num" field.
func NumGT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldNum, v))
}

// NumGTE applies the GTE predicate on the "num" field.
func NumGTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldNum, v))
}

// NumLT applies the LT predicate on the "num" field.
func NumLT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldNum, v))
}

// NumLTE applies the LTE predicate on the "num" field.
func NumLTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldNum, v))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int64) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldSort, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldContainsFold(FieldContent, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.FieldLTE(FieldStatus, v))
}

// HasDones applies the HasEdge predicate on the "dones" edge.
func HasDones() predicate.PalacesTodo {
	return predicate.PalacesTodo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DonesTable, DonesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDonesWith applies the HasEdge predicate on the "dones" edge with a given conditions (other predicates).
func HasDonesWith(preds ...predicate.PalacesTodoDone) predicate.PalacesTodo {
	return predicate.PalacesTodo(func(s *sql.Selector) {
		step := newDonesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PalacesTodo) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PalacesTodo) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PalacesTodo) predicate.PalacesTodo {
	return predicate.PalacesTodo(sql.NotPredicates(p))
}
