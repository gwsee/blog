// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/predicate"
	"blog/internal/ent/userproject"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// UserProjectUpdate is the builder for updating UserProject entities.
type UserProjectUpdate struct {
	config
	hooks    []Hook
	mutation *UserProjectMutation
}

// Where appends a list predicates to the UserProjectUpdate builder.
func (upu *UserProjectUpdate) Where(ps ...predicate.UserProject) *UserProjectUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetUpdatedAt sets the "updated_at" field.
func (upu *UserProjectUpdate) SetUpdatedAt(i int64) *UserProjectUpdate {
	upu.mutation.ResetUpdatedAt()
	upu.mutation.SetUpdatedAt(i)
	return upu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (upu *UserProjectUpdate) AddUpdatedAt(i int64) *UserProjectUpdate {
	upu.mutation.AddUpdatedAt(i)
	return upu
}

// SetUpdatedBy sets the "updated_by" field.
func (upu *UserProjectUpdate) SetUpdatedBy(i int64) *UserProjectUpdate {
	upu.mutation.ResetUpdatedBy()
	upu.mutation.SetUpdatedBy(i)
	return upu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableUpdatedBy(i *int64) *UserProjectUpdate {
	if i != nil {
		upu.SetUpdatedBy(*i)
	}
	return upu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (upu *UserProjectUpdate) AddUpdatedBy(i int64) *UserProjectUpdate {
	upu.mutation.AddUpdatedBy(i)
	return upu
}

// SetDeletedAt sets the "deleted_at" field.
func (upu *UserProjectUpdate) SetDeletedAt(i int64) *UserProjectUpdate {
	upu.mutation.ResetDeletedAt()
	upu.mutation.SetDeletedAt(i)
	return upu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableDeletedAt(i *int64) *UserProjectUpdate {
	if i != nil {
		upu.SetDeletedAt(*i)
	}
	return upu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (upu *UserProjectUpdate) AddDeletedAt(i int64) *UserProjectUpdate {
	upu.mutation.AddDeletedAt(i)
	return upu
}

// SetDeletedBy sets the "deleted_by" field.
func (upu *UserProjectUpdate) SetDeletedBy(i int64) *UserProjectUpdate {
	upu.mutation.ResetDeletedBy()
	upu.mutation.SetDeletedBy(i)
	return upu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableDeletedBy(i *int64) *UserProjectUpdate {
	if i != nil {
		upu.SetDeletedBy(*i)
	}
	return upu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (upu *UserProjectUpdate) AddDeletedBy(i int64) *UserProjectUpdate {
	upu.mutation.AddDeletedBy(i)
	return upu
}

// SetUserID sets the "user_id" field.
func (upu *UserProjectUpdate) SetUserID(i int) *UserProjectUpdate {
	upu.mutation.ResetUserID()
	upu.mutation.SetUserID(i)
	return upu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableUserID(i *int) *UserProjectUpdate {
	if i != nil {
		upu.SetUserID(*i)
	}
	return upu
}

// AddUserID adds i to the "user_id" field.
func (upu *UserProjectUpdate) AddUserID(i int) *UserProjectUpdate {
	upu.mutation.AddUserID(i)
	return upu
}

// SetExperienceID sets the "experience_id" field.
func (upu *UserProjectUpdate) SetExperienceID(i int) *UserProjectUpdate {
	upu.mutation.ResetExperienceID()
	upu.mutation.SetExperienceID(i)
	return upu
}

// SetNillableExperienceID sets the "experience_id" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableExperienceID(i *int) *UserProjectUpdate {
	if i != nil {
		upu.SetExperienceID(*i)
	}
	return upu
}

// AddExperienceID adds i to the "experience_id" field.
func (upu *UserProjectUpdate) AddExperienceID(i int) *UserProjectUpdate {
	upu.mutation.AddExperienceID(i)
	return upu
}

// SetTitle sets the "title" field.
func (upu *UserProjectUpdate) SetTitle(s string) *UserProjectUpdate {
	upu.mutation.SetTitle(s)
	return upu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableTitle(s *string) *UserProjectUpdate {
	if s != nil {
		upu.SetTitle(*s)
	}
	return upu
}

// SetDescription sets the "description" field.
func (upu *UserProjectUpdate) SetDescription(s string) *UserProjectUpdate {
	upu.mutation.SetDescription(s)
	return upu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableDescription(s *string) *UserProjectUpdate {
	if s != nil {
		upu.SetDescription(*s)
	}
	return upu
}

// SetSkills sets the "skills" field.
func (upu *UserProjectUpdate) SetSkills(s []string) *UserProjectUpdate {
	upu.mutation.SetSkills(s)
	return upu
}

// AppendSkills appends s to the "skills" field.
func (upu *UserProjectUpdate) AppendSkills(s []string) *UserProjectUpdate {
	upu.mutation.AppendSkills(s)
	return upu
}

// SetStart sets the "start" field.
func (upu *UserProjectUpdate) SetStart(i int64) *UserProjectUpdate {
	upu.mutation.ResetStart()
	upu.mutation.SetStart(i)
	return upu
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableStart(i *int64) *UserProjectUpdate {
	if i != nil {
		upu.SetStart(*i)
	}
	return upu
}

// AddStart adds i to the "start" field.
func (upu *UserProjectUpdate) AddStart(i int64) *UserProjectUpdate {
	upu.mutation.AddStart(i)
	return upu
}

// SetEnd sets the "end" field.
func (upu *UserProjectUpdate) SetEnd(i int64) *UserProjectUpdate {
	upu.mutation.ResetEnd()
	upu.mutation.SetEnd(i)
	return upu
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableEnd(i *int64) *UserProjectUpdate {
	if i != nil {
		upu.SetEnd(*i)
	}
	return upu
}

// AddEnd adds i to the "end" field.
func (upu *UserProjectUpdate) AddEnd(i int64) *UserProjectUpdate {
	upu.mutation.AddEnd(i)
	return upu
}

// SetLink sets the "link" field.
func (upu *UserProjectUpdate) SetLink(s string) *UserProjectUpdate {
	upu.mutation.SetLink(s)
	return upu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableLink(s *string) *UserProjectUpdate {
	if s != nil {
		upu.SetLink(*s)
	}
	return upu
}

// SetPhotos sets the "photos" field.
func (upu *UserProjectUpdate) SetPhotos(s []string) *UserProjectUpdate {
	upu.mutation.SetPhotos(s)
	return upu
}

// AppendPhotos appends s to the "photos" field.
func (upu *UserProjectUpdate) AppendPhotos(s []string) *UserProjectUpdate {
	upu.mutation.AppendPhotos(s)
	return upu
}

// Mutation returns the UserProjectMutation object of the builder.
func (upu *UserProjectUpdate) Mutation() *UserProjectMutation {
	return upu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserProjectUpdate) Save(ctx context.Context) (int, error) {
	if err := upu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserProjectUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserProjectUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upu *UserProjectUpdate) defaults() error {
	if _, ok := upu.mutation.CreatedAt(); !ok {
		if userproject.UpdateDefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized userproject.UpdateDefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := userproject.UpdateDefaultCreatedAt()
		upu.mutation.SetCreatedAt(v)
	}
	if _, ok := upu.mutation.UpdatedAt(); !ok {
		if userproject.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized userproject.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := userproject.UpdateDefaultUpdatedAt()
		upu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (upu *UserProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userproject.Table, userproject.Columns, sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeInt))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.CreatedAt(); ok {
		_spec.SetField(userproject.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(userproject.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.UpdatedAt(); ok {
		_spec.SetField(userproject.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(userproject.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.UpdatedBy(); ok {
		_spec.SetField(userproject.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(userproject.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.DeletedAt(); ok {
		_spec.SetField(userproject.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(userproject.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.DeletedBy(); ok {
		_spec.SetField(userproject.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(userproject.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.UserID(); ok {
		_spec.SetField(userproject.FieldUserID, field.TypeInt, value)
	}
	if value, ok := upu.mutation.AddedUserID(); ok {
		_spec.AddField(userproject.FieldUserID, field.TypeInt, value)
	}
	if value, ok := upu.mutation.ExperienceID(); ok {
		_spec.SetField(userproject.FieldExperienceID, field.TypeInt, value)
	}
	if value, ok := upu.mutation.AddedExperienceID(); ok {
		_spec.AddField(userproject.FieldExperienceID, field.TypeInt, value)
	}
	if value, ok := upu.mutation.Title(); ok {
		_spec.SetField(userproject.FieldTitle, field.TypeString, value)
	}
	if value, ok := upu.mutation.Description(); ok {
		_spec.SetField(userproject.FieldDescription, field.TypeString, value)
	}
	if value, ok := upu.mutation.Skills(); ok {
		_spec.SetField(userproject.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := upu.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userproject.FieldSkills, value)
		})
	}
	if value, ok := upu.mutation.Start(); ok {
		_spec.SetField(userproject.FieldStart, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.AddedStart(); ok {
		_spec.AddField(userproject.FieldStart, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.End(); ok {
		_spec.SetField(userproject.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.AddedEnd(); ok {
		_spec.AddField(userproject.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := upu.mutation.Link(); ok {
		_spec.SetField(userproject.FieldLink, field.TypeString, value)
	}
	if value, ok := upu.mutation.Photos(); ok {
		_spec.SetField(userproject.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := upu.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userproject.FieldPhotos, value)
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserProjectUpdateOne is the builder for updating a single UserProject entity.
type UserProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserProjectMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (upuo *UserProjectUpdateOne) SetUpdatedAt(i int64) *UserProjectUpdateOne {
	upuo.mutation.ResetUpdatedAt()
	upuo.mutation.SetUpdatedAt(i)
	return upuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (upuo *UserProjectUpdateOne) AddUpdatedAt(i int64) *UserProjectUpdateOne {
	upuo.mutation.AddUpdatedAt(i)
	return upuo
}

// SetUpdatedBy sets the "updated_by" field.
func (upuo *UserProjectUpdateOne) SetUpdatedBy(i int64) *UserProjectUpdateOne {
	upuo.mutation.ResetUpdatedBy()
	upuo.mutation.SetUpdatedBy(i)
	return upuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableUpdatedBy(i *int64) *UserProjectUpdateOne {
	if i != nil {
		upuo.SetUpdatedBy(*i)
	}
	return upuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (upuo *UserProjectUpdateOne) AddUpdatedBy(i int64) *UserProjectUpdateOne {
	upuo.mutation.AddUpdatedBy(i)
	return upuo
}

// SetDeletedAt sets the "deleted_at" field.
func (upuo *UserProjectUpdateOne) SetDeletedAt(i int64) *UserProjectUpdateOne {
	upuo.mutation.ResetDeletedAt()
	upuo.mutation.SetDeletedAt(i)
	return upuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableDeletedAt(i *int64) *UserProjectUpdateOne {
	if i != nil {
		upuo.SetDeletedAt(*i)
	}
	return upuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (upuo *UserProjectUpdateOne) AddDeletedAt(i int64) *UserProjectUpdateOne {
	upuo.mutation.AddDeletedAt(i)
	return upuo
}

// SetDeletedBy sets the "deleted_by" field.
func (upuo *UserProjectUpdateOne) SetDeletedBy(i int64) *UserProjectUpdateOne {
	upuo.mutation.ResetDeletedBy()
	upuo.mutation.SetDeletedBy(i)
	return upuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableDeletedBy(i *int64) *UserProjectUpdateOne {
	if i != nil {
		upuo.SetDeletedBy(*i)
	}
	return upuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (upuo *UserProjectUpdateOne) AddDeletedBy(i int64) *UserProjectUpdateOne {
	upuo.mutation.AddDeletedBy(i)
	return upuo
}

// SetUserID sets the "user_id" field.
func (upuo *UserProjectUpdateOne) SetUserID(i int) *UserProjectUpdateOne {
	upuo.mutation.ResetUserID()
	upuo.mutation.SetUserID(i)
	return upuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableUserID(i *int) *UserProjectUpdateOne {
	if i != nil {
		upuo.SetUserID(*i)
	}
	return upuo
}

// AddUserID adds i to the "user_id" field.
func (upuo *UserProjectUpdateOne) AddUserID(i int) *UserProjectUpdateOne {
	upuo.mutation.AddUserID(i)
	return upuo
}

// SetExperienceID sets the "experience_id" field.
func (upuo *UserProjectUpdateOne) SetExperienceID(i int) *UserProjectUpdateOne {
	upuo.mutation.ResetExperienceID()
	upuo.mutation.SetExperienceID(i)
	return upuo
}

// SetNillableExperienceID sets the "experience_id" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableExperienceID(i *int) *UserProjectUpdateOne {
	if i != nil {
		upuo.SetExperienceID(*i)
	}
	return upuo
}

// AddExperienceID adds i to the "experience_id" field.
func (upuo *UserProjectUpdateOne) AddExperienceID(i int) *UserProjectUpdateOne {
	upuo.mutation.AddExperienceID(i)
	return upuo
}

// SetTitle sets the "title" field.
func (upuo *UserProjectUpdateOne) SetTitle(s string) *UserProjectUpdateOne {
	upuo.mutation.SetTitle(s)
	return upuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableTitle(s *string) *UserProjectUpdateOne {
	if s != nil {
		upuo.SetTitle(*s)
	}
	return upuo
}

// SetDescription sets the "description" field.
func (upuo *UserProjectUpdateOne) SetDescription(s string) *UserProjectUpdateOne {
	upuo.mutation.SetDescription(s)
	return upuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableDescription(s *string) *UserProjectUpdateOne {
	if s != nil {
		upuo.SetDescription(*s)
	}
	return upuo
}

// SetSkills sets the "skills" field.
func (upuo *UserProjectUpdateOne) SetSkills(s []string) *UserProjectUpdateOne {
	upuo.mutation.SetSkills(s)
	return upuo
}

// AppendSkills appends s to the "skills" field.
func (upuo *UserProjectUpdateOne) AppendSkills(s []string) *UserProjectUpdateOne {
	upuo.mutation.AppendSkills(s)
	return upuo
}

// SetStart sets the "start" field.
func (upuo *UserProjectUpdateOne) SetStart(i int64) *UserProjectUpdateOne {
	upuo.mutation.ResetStart()
	upuo.mutation.SetStart(i)
	return upuo
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableStart(i *int64) *UserProjectUpdateOne {
	if i != nil {
		upuo.SetStart(*i)
	}
	return upuo
}

// AddStart adds i to the "start" field.
func (upuo *UserProjectUpdateOne) AddStart(i int64) *UserProjectUpdateOne {
	upuo.mutation.AddStart(i)
	return upuo
}

// SetEnd sets the "end" field.
func (upuo *UserProjectUpdateOne) SetEnd(i int64) *UserProjectUpdateOne {
	upuo.mutation.ResetEnd()
	upuo.mutation.SetEnd(i)
	return upuo
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableEnd(i *int64) *UserProjectUpdateOne {
	if i != nil {
		upuo.SetEnd(*i)
	}
	return upuo
}

// AddEnd adds i to the "end" field.
func (upuo *UserProjectUpdateOne) AddEnd(i int64) *UserProjectUpdateOne {
	upuo.mutation.AddEnd(i)
	return upuo
}

// SetLink sets the "link" field.
func (upuo *UserProjectUpdateOne) SetLink(s string) *UserProjectUpdateOne {
	upuo.mutation.SetLink(s)
	return upuo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableLink(s *string) *UserProjectUpdateOne {
	if s != nil {
		upuo.SetLink(*s)
	}
	return upuo
}

// SetPhotos sets the "photos" field.
func (upuo *UserProjectUpdateOne) SetPhotos(s []string) *UserProjectUpdateOne {
	upuo.mutation.SetPhotos(s)
	return upuo
}

// AppendPhotos appends s to the "photos" field.
func (upuo *UserProjectUpdateOne) AppendPhotos(s []string) *UserProjectUpdateOne {
	upuo.mutation.AppendPhotos(s)
	return upuo
}

// Mutation returns the UserProjectMutation object of the builder.
func (upuo *UserProjectUpdateOne) Mutation() *UserProjectMutation {
	return upuo.mutation
}

// Where appends a list predicates to the UserProjectUpdate builder.
func (upuo *UserProjectUpdateOne) Where(ps ...predicate.UserProject) *UserProjectUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserProjectUpdateOne) Select(field string, fields ...string) *UserProjectUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserProject entity.
func (upuo *UserProjectUpdateOne) Save(ctx context.Context) (*UserProject, error) {
	if err := upuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserProjectUpdateOne) SaveX(ctx context.Context) *UserProject {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserProjectUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upuo *UserProjectUpdateOne) defaults() error {
	if _, ok := upuo.mutation.CreatedAt(); !ok {
		if userproject.UpdateDefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized userproject.UpdateDefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := userproject.UpdateDefaultCreatedAt()
		upuo.mutation.SetCreatedAt(v)
	}
	if _, ok := upuo.mutation.UpdatedAt(); !ok {
		if userproject.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized userproject.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := userproject.UpdateDefaultUpdatedAt()
		upuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (upuo *UserProjectUpdateOne) sqlSave(ctx context.Context) (_node *UserProject, err error) {
	_spec := sqlgraph.NewUpdateSpec(userproject.Table, userproject.Columns, sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeInt))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserProject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userproject.FieldID)
		for _, f := range fields {
			if !userproject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.CreatedAt(); ok {
		_spec.SetField(userproject.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(userproject.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userproject.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(userproject.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.UpdatedBy(); ok {
		_spec.SetField(userproject.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(userproject.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.DeletedAt(); ok {
		_spec.SetField(userproject.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(userproject.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.DeletedBy(); ok {
		_spec.SetField(userproject.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(userproject.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.UserID(); ok {
		_spec.SetField(userproject.FieldUserID, field.TypeInt, value)
	}
	if value, ok := upuo.mutation.AddedUserID(); ok {
		_spec.AddField(userproject.FieldUserID, field.TypeInt, value)
	}
	if value, ok := upuo.mutation.ExperienceID(); ok {
		_spec.SetField(userproject.FieldExperienceID, field.TypeInt, value)
	}
	if value, ok := upuo.mutation.AddedExperienceID(); ok {
		_spec.AddField(userproject.FieldExperienceID, field.TypeInt, value)
	}
	if value, ok := upuo.mutation.Title(); ok {
		_spec.SetField(userproject.FieldTitle, field.TypeString, value)
	}
	if value, ok := upuo.mutation.Description(); ok {
		_spec.SetField(userproject.FieldDescription, field.TypeString, value)
	}
	if value, ok := upuo.mutation.Skills(); ok {
		_spec.SetField(userproject.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := upuo.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userproject.FieldSkills, value)
		})
	}
	if value, ok := upuo.mutation.Start(); ok {
		_spec.SetField(userproject.FieldStart, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.AddedStart(); ok {
		_spec.AddField(userproject.FieldStart, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.End(); ok {
		_spec.SetField(userproject.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.AddedEnd(); ok {
		_spec.AddField(userproject.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := upuo.mutation.Link(); ok {
		_spec.SetField(userproject.FieldLink, field.TypeString, value)
	}
	if value, ok := upuo.mutation.Photos(); ok {
		_spec.SetField(userproject.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := upuo.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userproject.FieldPhotos, value)
		})
	}
	_node = &UserProject{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
