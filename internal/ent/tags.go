// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/tags"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 标签信息
type Tags struct {
	config `json:"-"`
	// ID of the ent.
	// 标签ID
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 创建人
	CreatedBy int64 `json:"created_by,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 更新人
	UpdatedBy int64 `json:"updated_by,omitempty"`
	// 软删除时间
	DeletedAt int64 `json:"deleted_at,omitempty"`
	// 删除人
	DeletedBy int64 `json:"deleted_by,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TagsQuery when eager-loading is set.
	Edges        TagsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TagsEdges holds the relations/edges for other nodes in the graph.
type TagsEdges struct {
	// Blogs holds the value of the blogs edge.
	Blogs []*Blogs `json:"blogs,omitempty"`
	// TagRelation holds the value of the tag_relation edge.
	TagRelation []*TagsRelation `json:"tag_relation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BlogsOrErr returns the Blogs value or an error if the edge
// was not loaded in eager-loading.
func (e TagsEdges) BlogsOrErr() ([]*Blogs, error) {
	if e.loadedTypes[0] {
		return e.Blogs, nil
	}
	return nil, &NotLoadedError{edge: "blogs"}
}

// TagRelationOrErr returns the TagRelation value or an error if the edge
// was not loaded in eager-loading.
func (e TagsEdges) TagRelationOrErr() ([]*TagsRelation, error) {
	if e.loadedTypes[1] {
		return e.TagRelation, nil
	}
	return nil, &NotLoadedError{edge: "tag_relation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tags) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tags.FieldID, tags.FieldCreatedAt, tags.FieldCreatedBy, tags.FieldUpdatedAt, tags.FieldUpdatedBy, tags.FieldDeletedAt, tags.FieldDeletedBy:
			values[i] = new(sql.NullInt64)
		case tags.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tags fields.
func (t *Tags) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tags.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tags.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Int64
			}
		case tags.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				t.CreatedBy = value.Int64
			}
		case tags.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Int64
			}
		case tags.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				t.UpdatedBy = value.Int64
			}
		case tags.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				t.DeletedAt = value.Int64
			}
		case tags.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				t.DeletedBy = value.Int64
			}
		case tags.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tags.
// This includes values selected through modifiers, order, etc.
func (t *Tags) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryBlogs queries the "blogs" edge of the Tags entity.
func (t *Tags) QueryBlogs() *BlogsQuery {
	return NewTagsClient(t.config).QueryBlogs(t)
}

// QueryTagRelation queries the "tag_relation" edge of the Tags entity.
func (t *Tags) QueryTagRelation() *TagsRelationQuery {
	return NewTagsClient(t.config).QueryTagRelation(t)
}

// Update returns a builder for updating this Tags.
// Note that you need to call Tags.Unwrap() before calling this method if this Tags
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tags) Update() *TagsUpdateOne {
	return NewTagsClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tags entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tags) Unwrap() *Tags {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tags is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tags) String() string {
	var builder strings.Builder
	builder.WriteString("Tags(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", t.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", t.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", t.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", t.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", t.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(fmt.Sprintf("%v", t.DeletedBy))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteByte(')')
	return builder.String()
}

// TagsSlice is a parsable slice of Tags.
type TagsSlice []*Tags
