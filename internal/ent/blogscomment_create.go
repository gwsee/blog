// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/blogscomment"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlogsCommentCreate is the builder for creating a BlogsComment entity.
type BlogsCommentCreate struct {
	config
	mutation *BlogsCommentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bcc *BlogsCommentCreate) SetCreatedAt(i int64) *BlogsCommentCreate {
	bcc.mutation.SetCreatedAt(i)
	return bcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bcc *BlogsCommentCreate) SetNillableCreatedAt(i *int64) *BlogsCommentCreate {
	if i != nil {
		bcc.SetCreatedAt(*i)
	}
	return bcc
}

// SetCreatedBy sets the "created_by" field.
func (bcc *BlogsCommentCreate) SetCreatedBy(i int64) *BlogsCommentCreate {
	bcc.mutation.SetCreatedBy(i)
	return bcc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (bcc *BlogsCommentCreate) SetNillableCreatedBy(i *int64) *BlogsCommentCreate {
	if i != nil {
		bcc.SetCreatedBy(*i)
	}
	return bcc
}

// SetUpdatedAt sets the "updated_at" field.
func (bcc *BlogsCommentCreate) SetUpdatedAt(i int64) *BlogsCommentCreate {
	bcc.mutation.SetUpdatedAt(i)
	return bcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bcc *BlogsCommentCreate) SetNillableUpdatedAt(i *int64) *BlogsCommentCreate {
	if i != nil {
		bcc.SetUpdatedAt(*i)
	}
	return bcc
}

// SetUpdatedBy sets the "updated_by" field.
func (bcc *BlogsCommentCreate) SetUpdatedBy(i int64) *BlogsCommentCreate {
	bcc.mutation.SetUpdatedBy(i)
	return bcc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (bcc *BlogsCommentCreate) SetNillableUpdatedBy(i *int64) *BlogsCommentCreate {
	if i != nil {
		bcc.SetUpdatedBy(*i)
	}
	return bcc
}

// SetDeletedAt sets the "deleted_at" field.
func (bcc *BlogsCommentCreate) SetDeletedAt(i int64) *BlogsCommentCreate {
	bcc.mutation.SetDeletedAt(i)
	return bcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bcc *BlogsCommentCreate) SetNillableDeletedAt(i *int64) *BlogsCommentCreate {
	if i != nil {
		bcc.SetDeletedAt(*i)
	}
	return bcc
}

// SetDeletedBy sets the "deleted_by" field.
func (bcc *BlogsCommentCreate) SetDeletedBy(i int64) *BlogsCommentCreate {
	bcc.mutation.SetDeletedBy(i)
	return bcc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (bcc *BlogsCommentCreate) SetNillableDeletedBy(i *int64) *BlogsCommentCreate {
	if i != nil {
		bcc.SetDeletedBy(*i)
	}
	return bcc
}

// SetAccountID sets the "account_id" field.
func (bcc *BlogsCommentCreate) SetAccountID(i int) *BlogsCommentCreate {
	bcc.mutation.SetAccountID(i)
	return bcc
}

// SetBlogID sets the "blog_id" field.
func (bcc *BlogsCommentCreate) SetBlogID(i int) *BlogsCommentCreate {
	bcc.mutation.SetBlogID(i)
	return bcc
}

// SetTopID sets the "top_id" field.
func (bcc *BlogsCommentCreate) SetTopID(i int) *BlogsCommentCreate {
	bcc.mutation.SetTopID(i)
	return bcc
}

// SetNillableTopID sets the "top_id" field if the given value is not nil.
func (bcc *BlogsCommentCreate) SetNillableTopID(i *int) *BlogsCommentCreate {
	if i != nil {
		bcc.SetTopID(*i)
	}
	return bcc
}

// SetParentID sets the "parent_id" field.
func (bcc *BlogsCommentCreate) SetParentID(i int) *BlogsCommentCreate {
	bcc.mutation.SetParentID(i)
	return bcc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (bcc *BlogsCommentCreate) SetNillableParentID(i *int) *BlogsCommentCreate {
	if i != nil {
		bcc.SetParentID(*i)
	}
	return bcc
}

// SetLevel sets the "level" field.
func (bcc *BlogsCommentCreate) SetLevel(i int) *BlogsCommentCreate {
	bcc.mutation.SetLevel(i)
	return bcc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (bcc *BlogsCommentCreate) SetNillableLevel(i *int) *BlogsCommentCreate {
	if i != nil {
		bcc.SetLevel(*i)
	}
	return bcc
}

// SetTotal sets the "total" field.
func (bcc *BlogsCommentCreate) SetTotal(i int) *BlogsCommentCreate {
	bcc.mutation.SetTotal(i)
	return bcc
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (bcc *BlogsCommentCreate) SetNillableTotal(i *int) *BlogsCommentCreate {
	if i != nil {
		bcc.SetTotal(*i)
	}
	return bcc
}

// SetStatus sets the "status" field.
func (bcc *BlogsCommentCreate) SetStatus(i int8) *BlogsCommentCreate {
	bcc.mutation.SetStatus(i)
	return bcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bcc *BlogsCommentCreate) SetNillableStatus(i *int8) *BlogsCommentCreate {
	if i != nil {
		bcc.SetStatus(*i)
	}
	return bcc
}

// SetContent sets the "content" field.
func (bcc *BlogsCommentCreate) SetContent(s string) *BlogsCommentCreate {
	bcc.mutation.SetContent(s)
	return bcc
}

// SetID sets the "id" field.
func (bcc *BlogsCommentCreate) SetID(i int) *BlogsCommentCreate {
	bcc.mutation.SetID(i)
	return bcc
}

// Mutation returns the BlogsCommentMutation object of the builder.
func (bcc *BlogsCommentCreate) Mutation() *BlogsCommentMutation {
	return bcc.mutation
}

// Save creates the BlogsComment in the database.
func (bcc *BlogsCommentCreate) Save(ctx context.Context) (*BlogsComment, error) {
	if err := bcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bcc.sqlSave, bcc.mutation, bcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bcc *BlogsCommentCreate) SaveX(ctx context.Context) *BlogsComment {
	v, err := bcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcc *BlogsCommentCreate) Exec(ctx context.Context) error {
	_, err := bcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcc *BlogsCommentCreate) ExecX(ctx context.Context) {
	if err := bcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcc *BlogsCommentCreate) defaults() error {
	if _, ok := bcc.mutation.CreatedAt(); !ok {
		v := blogscomment.DefaultCreatedAt
		bcc.mutation.SetCreatedAt(v)
	}
	if _, ok := bcc.mutation.CreatedBy(); !ok {
		v := blogscomment.DefaultCreatedBy
		bcc.mutation.SetCreatedBy(v)
	}
	if _, ok := bcc.mutation.UpdatedAt(); !ok {
		v := blogscomment.DefaultUpdatedAt
		bcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bcc.mutation.UpdatedBy(); !ok {
		v := blogscomment.DefaultUpdatedBy
		bcc.mutation.SetUpdatedBy(v)
	}
	if _, ok := bcc.mutation.DeletedAt(); !ok {
		v := blogscomment.DefaultDeletedAt
		bcc.mutation.SetDeletedAt(v)
	}
	if _, ok := bcc.mutation.DeletedBy(); !ok {
		v := blogscomment.DefaultDeletedBy
		bcc.mutation.SetDeletedBy(v)
	}
	if _, ok := bcc.mutation.TopID(); !ok {
		v := blogscomment.DefaultTopID
		bcc.mutation.SetTopID(v)
	}
	if _, ok := bcc.mutation.ParentID(); !ok {
		v := blogscomment.DefaultParentID
		bcc.mutation.SetParentID(v)
	}
	if _, ok := bcc.mutation.Level(); !ok {
		v := blogscomment.DefaultLevel
		bcc.mutation.SetLevel(v)
	}
	if _, ok := bcc.mutation.Total(); !ok {
		v := blogscomment.DefaultTotal
		bcc.mutation.SetTotal(v)
	}
	if _, ok := bcc.mutation.Status(); !ok {
		v := blogscomment.DefaultStatus
		bcc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bcc *BlogsCommentCreate) check() error {
	if _, ok := bcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlogsComment.created_at"`)}
	}
	if _, ok := bcc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "BlogsComment.created_by"`)}
	}
	if _, ok := bcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlogsComment.updated_at"`)}
	}
	if _, ok := bcc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "BlogsComment.updated_by"`)}
	}
	if _, ok := bcc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "BlogsComment.deleted_at"`)}
	}
	if _, ok := bcc.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "BlogsComment.deleted_by"`)}
	}
	if _, ok := bcc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "BlogsComment.account_id"`)}
	}
	if v, ok := bcc.mutation.AccountID(); ok {
		if err := blogscomment.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "BlogsComment.account_id": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.BlogID(); !ok {
		return &ValidationError{Name: "blog_id", err: errors.New(`ent: missing required field "BlogsComment.blog_id"`)}
	}
	if v, ok := bcc.mutation.BlogID(); ok {
		if err := blogscomment.BlogIDValidator(v); err != nil {
			return &ValidationError{Name: "blog_id", err: fmt.Errorf(`ent: validator failed for field "BlogsComment.blog_id": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.TopID(); !ok {
		return &ValidationError{Name: "top_id", err: errors.New(`ent: missing required field "BlogsComment.top_id"`)}
	}
	if _, ok := bcc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "BlogsComment.parent_id"`)}
	}
	if _, ok := bcc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "BlogsComment.level"`)}
	}
	if _, ok := bcc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "BlogsComment.total"`)}
	}
	if _, ok := bcc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "BlogsComment.status"`)}
	}
	if _, ok := bcc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "BlogsComment.content"`)}
	}
	if v, ok := bcc.mutation.ID(); ok {
		if err := blogscomment.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "BlogsComment.id": %w`, err)}
		}
	}
	return nil
}

func (bcc *BlogsCommentCreate) sqlSave(ctx context.Context) (*BlogsComment, error) {
	if err := bcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bcc.mutation.id = &_node.ID
	bcc.mutation.done = true
	return _node, nil
}

func (bcc *BlogsCommentCreate) createSpec() (*BlogsComment, *sqlgraph.CreateSpec) {
	var (
		_node = &BlogsComment{config: bcc.config}
		_spec = sqlgraph.NewCreateSpec(blogscomment.Table, sqlgraph.NewFieldSpec(blogscomment.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bcc.conflict
	if id, ok := bcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bcc.mutation.CreatedAt(); ok {
		_spec.SetField(blogscomment.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := bcc.mutation.CreatedBy(); ok {
		_spec.SetField(blogscomment.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := bcc.mutation.UpdatedAt(); ok {
		_spec.SetField(blogscomment.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := bcc.mutation.UpdatedBy(); ok {
		_spec.SetField(blogscomment.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := bcc.mutation.DeletedAt(); ok {
		_spec.SetField(blogscomment.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := bcc.mutation.DeletedBy(); ok {
		_spec.SetField(blogscomment.FieldDeletedBy, field.TypeInt64, value)
		_node.DeletedBy = value
	}
	if value, ok := bcc.mutation.AccountID(); ok {
		_spec.SetField(blogscomment.FieldAccountID, field.TypeInt, value)
		_node.AccountID = value
	}
	if value, ok := bcc.mutation.BlogID(); ok {
		_spec.SetField(blogscomment.FieldBlogID, field.TypeInt, value)
		_node.BlogID = value
	}
	if value, ok := bcc.mutation.TopID(); ok {
		_spec.SetField(blogscomment.FieldTopID, field.TypeInt, value)
		_node.TopID = value
	}
	if value, ok := bcc.mutation.ParentID(); ok {
		_spec.SetField(blogscomment.FieldParentID, field.TypeInt, value)
		_node.ParentID = value
	}
	if value, ok := bcc.mutation.Level(); ok {
		_spec.SetField(blogscomment.FieldLevel, field.TypeInt, value)
		_node.Level = value
	}
	if value, ok := bcc.mutation.Total(); ok {
		_spec.SetField(blogscomment.FieldTotal, field.TypeInt, value)
		_node.Total = value
	}
	if value, ok := bcc.mutation.Status(); ok {
		_spec.SetField(blogscomment.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := bcc.mutation.Content(); ok {
		_spec.SetField(blogscomment.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlogsComment.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlogsCommentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bcc *BlogsCommentCreate) OnConflict(opts ...sql.ConflictOption) *BlogsCommentUpsertOne {
	bcc.conflict = opts
	return &BlogsCommentUpsertOne{
		create: bcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlogsComment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcc *BlogsCommentCreate) OnConflictColumns(columns ...string) *BlogsCommentUpsertOne {
	bcc.conflict = append(bcc.conflict, sql.ConflictColumns(columns...))
	return &BlogsCommentUpsertOne{
		create: bcc,
	}
}

type (
	// BlogsCommentUpsertOne is the builder for "upsert"-ing
	//  one BlogsComment node.
	BlogsCommentUpsertOne struct {
		create *BlogsCommentCreate
	}

	// BlogsCommentUpsert is the "OnConflict" setter.
	BlogsCommentUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BlogsCommentUpsert) SetUpdatedAt(v int64) *BlogsCommentUpsert {
	u.Set(blogscomment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlogsCommentUpsert) UpdateUpdatedAt() *BlogsCommentUpsert {
	u.SetExcluded(blogscomment.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *BlogsCommentUpsert) AddUpdatedAt(v int64) *BlogsCommentUpsert {
	u.Add(blogscomment.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *BlogsCommentUpsert) SetUpdatedBy(v int64) *BlogsCommentUpsert {
	u.Set(blogscomment.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *BlogsCommentUpsert) UpdateUpdatedBy() *BlogsCommentUpsert {
	u.SetExcluded(blogscomment.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *BlogsCommentUpsert) AddUpdatedBy(v int64) *BlogsCommentUpsert {
	u.Add(blogscomment.FieldUpdatedBy, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BlogsCommentUpsert) SetDeletedAt(v int64) *BlogsCommentUpsert {
	u.Set(blogscomment.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BlogsCommentUpsert) UpdateDeletedAt() *BlogsCommentUpsert {
	u.SetExcluded(blogscomment.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *BlogsCommentUpsert) AddDeletedAt(v int64) *BlogsCommentUpsert {
	u.Add(blogscomment.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *BlogsCommentUpsert) SetDeletedBy(v int64) *BlogsCommentUpsert {
	u.Set(blogscomment.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *BlogsCommentUpsert) UpdateDeletedBy() *BlogsCommentUpsert {
	u.SetExcluded(blogscomment.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *BlogsCommentUpsert) AddDeletedBy(v int64) *BlogsCommentUpsert {
	u.Add(blogscomment.FieldDeletedBy, v)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *BlogsCommentUpsert) SetAccountID(v int) *BlogsCommentUpsert {
	u.Set(blogscomment.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *BlogsCommentUpsert) UpdateAccountID() *BlogsCommentUpsert {
	u.SetExcluded(blogscomment.FieldAccountID)
	return u
}

// AddAccountID adds v to the "account_id" field.
func (u *BlogsCommentUpsert) AddAccountID(v int) *BlogsCommentUpsert {
	u.Add(blogscomment.FieldAccountID, v)
	return u
}

// SetBlogID sets the "blog_id" field.
func (u *BlogsCommentUpsert) SetBlogID(v int) *BlogsCommentUpsert {
	u.Set(blogscomment.FieldBlogID, v)
	return u
}

// UpdateBlogID sets the "blog_id" field to the value that was provided on create.
func (u *BlogsCommentUpsert) UpdateBlogID() *BlogsCommentUpsert {
	u.SetExcluded(blogscomment.FieldBlogID)
	return u
}

// AddBlogID adds v to the "blog_id" field.
func (u *BlogsCommentUpsert) AddBlogID(v int) *BlogsCommentUpsert {
	u.Add(blogscomment.FieldBlogID, v)
	return u
}

// SetTopID sets the "top_id" field.
func (u *BlogsCommentUpsert) SetTopID(v int) *BlogsCommentUpsert {
	u.Set(blogscomment.FieldTopID, v)
	return u
}

// UpdateTopID sets the "top_id" field to the value that was provided on create.
func (u *BlogsCommentUpsert) UpdateTopID() *BlogsCommentUpsert {
	u.SetExcluded(blogscomment.FieldTopID)
	return u
}

// AddTopID adds v to the "top_id" field.
func (u *BlogsCommentUpsert) AddTopID(v int) *BlogsCommentUpsert {
	u.Add(blogscomment.FieldTopID, v)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *BlogsCommentUpsert) SetParentID(v int) *BlogsCommentUpsert {
	u.Set(blogscomment.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *BlogsCommentUpsert) UpdateParentID() *BlogsCommentUpsert {
	u.SetExcluded(blogscomment.FieldParentID)
	return u
}

// AddParentID adds v to the "parent_id" field.
func (u *BlogsCommentUpsert) AddParentID(v int) *BlogsCommentUpsert {
	u.Add(blogscomment.FieldParentID, v)
	return u
}

// SetLevel sets the "level" field.
func (u *BlogsCommentUpsert) SetLevel(v int) *BlogsCommentUpsert {
	u.Set(blogscomment.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *BlogsCommentUpsert) UpdateLevel() *BlogsCommentUpsert {
	u.SetExcluded(blogscomment.FieldLevel)
	return u
}

// AddLevel adds v to the "level" field.
func (u *BlogsCommentUpsert) AddLevel(v int) *BlogsCommentUpsert {
	u.Add(blogscomment.FieldLevel, v)
	return u
}

// SetTotal sets the "total" field.
func (u *BlogsCommentUpsert) SetTotal(v int) *BlogsCommentUpsert {
	u.Set(blogscomment.FieldTotal, v)
	return u
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *BlogsCommentUpsert) UpdateTotal() *BlogsCommentUpsert {
	u.SetExcluded(blogscomment.FieldTotal)
	return u
}

// AddTotal adds v to the "total" field.
func (u *BlogsCommentUpsert) AddTotal(v int) *BlogsCommentUpsert {
	u.Add(blogscomment.FieldTotal, v)
	return u
}

// SetStatus sets the "status" field.
func (u *BlogsCommentUpsert) SetStatus(v int8) *BlogsCommentUpsert {
	u.Set(blogscomment.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BlogsCommentUpsert) UpdateStatus() *BlogsCommentUpsert {
	u.SetExcluded(blogscomment.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *BlogsCommentUpsert) AddStatus(v int8) *BlogsCommentUpsert {
	u.Add(blogscomment.FieldStatus, v)
	return u
}

// SetContent sets the "content" field.
func (u *BlogsCommentUpsert) SetContent(v string) *BlogsCommentUpsert {
	u.Set(blogscomment.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *BlogsCommentUpsert) UpdateContent() *BlogsCommentUpsert {
	u.SetExcluded(blogscomment.FieldContent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BlogsComment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blogscomment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlogsCommentUpsertOne) UpdateNewValues() *BlogsCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(blogscomment.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blogscomment.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(blogscomment.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlogsComment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlogsCommentUpsertOne) Ignore() *BlogsCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlogsCommentUpsertOne) DoNothing() *BlogsCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlogsCommentCreate.OnConflict
// documentation for more info.
func (u *BlogsCommentUpsertOne) Update(set func(*BlogsCommentUpsert)) *BlogsCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlogsCommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlogsCommentUpsertOne) SetUpdatedAt(v int64) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *BlogsCommentUpsertOne) AddUpdatedAt(v int64) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlogsCommentUpsertOne) UpdateUpdatedAt() *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *BlogsCommentUpsertOne) SetUpdatedBy(v int64) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *BlogsCommentUpsertOne) AddUpdatedBy(v int64) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *BlogsCommentUpsertOne) UpdateUpdatedBy() *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BlogsCommentUpsertOne) SetDeletedAt(v int64) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *BlogsCommentUpsertOne) AddDeletedAt(v int64) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BlogsCommentUpsertOne) UpdateDeletedAt() *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *BlogsCommentUpsertOne) SetDeletedBy(v int64) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *BlogsCommentUpsertOne) AddDeletedBy(v int64) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *BlogsCommentUpsertOne) UpdateDeletedBy() *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetAccountID sets the "account_id" field.
func (u *BlogsCommentUpsertOne) SetAccountID(v int) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *BlogsCommentUpsertOne) AddAccountID(v int) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *BlogsCommentUpsertOne) UpdateAccountID() *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateAccountID()
	})
}

// SetBlogID sets the "blog_id" field.
func (u *BlogsCommentUpsertOne) SetBlogID(v int) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetBlogID(v)
	})
}

// AddBlogID adds v to the "blog_id" field.
func (u *BlogsCommentUpsertOne) AddBlogID(v int) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddBlogID(v)
	})
}

// UpdateBlogID sets the "blog_id" field to the value that was provided on create.
func (u *BlogsCommentUpsertOne) UpdateBlogID() *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateBlogID()
	})
}

// SetTopID sets the "top_id" field.
func (u *BlogsCommentUpsertOne) SetTopID(v int) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetTopID(v)
	})
}

// AddTopID adds v to the "top_id" field.
func (u *BlogsCommentUpsertOne) AddTopID(v int) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddTopID(v)
	})
}

// UpdateTopID sets the "top_id" field to the value that was provided on create.
func (u *BlogsCommentUpsertOne) UpdateTopID() *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateTopID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *BlogsCommentUpsertOne) SetParentID(v int) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *BlogsCommentUpsertOne) AddParentID(v int) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *BlogsCommentUpsertOne) UpdateParentID() *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateParentID()
	})
}

// SetLevel sets the "level" field.
func (u *BlogsCommentUpsertOne) SetLevel(v int) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *BlogsCommentUpsertOne) AddLevel(v int) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *BlogsCommentUpsertOne) UpdateLevel() *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateLevel()
	})
}

// SetTotal sets the "total" field.
func (u *BlogsCommentUpsertOne) SetTotal(v int) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetTotal(v)
	})
}

// AddTotal adds v to the "total" field.
func (u *BlogsCommentUpsertOne) AddTotal(v int) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *BlogsCommentUpsertOne) UpdateTotal() *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateTotal()
	})
}

// SetStatus sets the "status" field.
func (u *BlogsCommentUpsertOne) SetStatus(v int8) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *BlogsCommentUpsertOne) AddStatus(v int8) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BlogsCommentUpsertOne) UpdateStatus() *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateStatus()
	})
}

// SetContent sets the "content" field.
func (u *BlogsCommentUpsertOne) SetContent(v string) *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *BlogsCommentUpsertOne) UpdateContent() *BlogsCommentUpsertOne {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *BlogsCommentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlogsCommentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlogsCommentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlogsCommentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlogsCommentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlogsCommentCreateBulk is the builder for creating many BlogsComment entities in bulk.
type BlogsCommentCreateBulk struct {
	config
	err      error
	builders []*BlogsCommentCreate
	conflict []sql.ConflictOption
}

// Save creates the BlogsComment entities in the database.
func (bccb *BlogsCommentCreateBulk) Save(ctx context.Context) ([]*BlogsComment, error) {
	if bccb.err != nil {
		return nil, bccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bccb.builders))
	nodes := make([]*BlogsComment, len(bccb.builders))
	mutators := make([]Mutator, len(bccb.builders))
	for i := range bccb.builders {
		func(i int, root context.Context) {
			builder := bccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogsCommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bccb *BlogsCommentCreateBulk) SaveX(ctx context.Context) []*BlogsComment {
	v, err := bccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bccb *BlogsCommentCreateBulk) Exec(ctx context.Context) error {
	_, err := bccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bccb *BlogsCommentCreateBulk) ExecX(ctx context.Context) {
	if err := bccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlogsComment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlogsCommentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bccb *BlogsCommentCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlogsCommentUpsertBulk {
	bccb.conflict = opts
	return &BlogsCommentUpsertBulk{
		create: bccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlogsComment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bccb *BlogsCommentCreateBulk) OnConflictColumns(columns ...string) *BlogsCommentUpsertBulk {
	bccb.conflict = append(bccb.conflict, sql.ConflictColumns(columns...))
	return &BlogsCommentUpsertBulk{
		create: bccb,
	}
}

// BlogsCommentUpsertBulk is the builder for "upsert"-ing
// a bulk of BlogsComment nodes.
type BlogsCommentUpsertBulk struct {
	create *BlogsCommentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlogsComment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blogscomment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlogsCommentUpsertBulk) UpdateNewValues() *BlogsCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(blogscomment.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blogscomment.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(blogscomment.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlogsComment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlogsCommentUpsertBulk) Ignore() *BlogsCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlogsCommentUpsertBulk) DoNothing() *BlogsCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlogsCommentCreateBulk.OnConflict
// documentation for more info.
func (u *BlogsCommentUpsertBulk) Update(set func(*BlogsCommentUpsert)) *BlogsCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlogsCommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlogsCommentUpsertBulk) SetUpdatedAt(v int64) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *BlogsCommentUpsertBulk) AddUpdatedAt(v int64) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlogsCommentUpsertBulk) UpdateUpdatedAt() *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *BlogsCommentUpsertBulk) SetUpdatedBy(v int64) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *BlogsCommentUpsertBulk) AddUpdatedBy(v int64) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *BlogsCommentUpsertBulk) UpdateUpdatedBy() *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BlogsCommentUpsertBulk) SetDeletedAt(v int64) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *BlogsCommentUpsertBulk) AddDeletedAt(v int64) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BlogsCommentUpsertBulk) UpdateDeletedAt() *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *BlogsCommentUpsertBulk) SetDeletedBy(v int64) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *BlogsCommentUpsertBulk) AddDeletedBy(v int64) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *BlogsCommentUpsertBulk) UpdateDeletedBy() *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetAccountID sets the "account_id" field.
func (u *BlogsCommentUpsertBulk) SetAccountID(v int) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *BlogsCommentUpsertBulk) AddAccountID(v int) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *BlogsCommentUpsertBulk) UpdateAccountID() *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateAccountID()
	})
}

// SetBlogID sets the "blog_id" field.
func (u *BlogsCommentUpsertBulk) SetBlogID(v int) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetBlogID(v)
	})
}

// AddBlogID adds v to the "blog_id" field.
func (u *BlogsCommentUpsertBulk) AddBlogID(v int) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddBlogID(v)
	})
}

// UpdateBlogID sets the "blog_id" field to the value that was provided on create.
func (u *BlogsCommentUpsertBulk) UpdateBlogID() *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateBlogID()
	})
}

// SetTopID sets the "top_id" field.
func (u *BlogsCommentUpsertBulk) SetTopID(v int) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetTopID(v)
	})
}

// AddTopID adds v to the "top_id" field.
func (u *BlogsCommentUpsertBulk) AddTopID(v int) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddTopID(v)
	})
}

// UpdateTopID sets the "top_id" field to the value that was provided on create.
func (u *BlogsCommentUpsertBulk) UpdateTopID() *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateTopID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *BlogsCommentUpsertBulk) SetParentID(v int) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *BlogsCommentUpsertBulk) AddParentID(v int) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *BlogsCommentUpsertBulk) UpdateParentID() *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateParentID()
	})
}

// SetLevel sets the "level" field.
func (u *BlogsCommentUpsertBulk) SetLevel(v int) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *BlogsCommentUpsertBulk) AddLevel(v int) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *BlogsCommentUpsertBulk) UpdateLevel() *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateLevel()
	})
}

// SetTotal sets the "total" field.
func (u *BlogsCommentUpsertBulk) SetTotal(v int) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetTotal(v)
	})
}

// AddTotal adds v to the "total" field.
func (u *BlogsCommentUpsertBulk) AddTotal(v int) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *BlogsCommentUpsertBulk) UpdateTotal() *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateTotal()
	})
}

// SetStatus sets the "status" field.
func (u *BlogsCommentUpsertBulk) SetStatus(v int8) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *BlogsCommentUpsertBulk) AddStatus(v int8) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BlogsCommentUpsertBulk) UpdateStatus() *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateStatus()
	})
}

// SetContent sets the "content" field.
func (u *BlogsCommentUpsertBulk) SetContent(v string) *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *BlogsCommentUpsertBulk) UpdateContent() *BlogsCommentUpsertBulk {
	return u.Update(func(s *BlogsCommentUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *BlogsCommentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlogsCommentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlogsCommentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlogsCommentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
