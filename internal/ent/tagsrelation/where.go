// Code generated by ent, DO NOT EDIT.

package tagsrelation

import (
	"blog/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldLTE(FieldID, id))
}

// TagID applies equality check predicate on the "tag_id" field. It's identical to TagIDEQ.
func TagID(v int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldEQ(FieldTagID, v))
}

// Relation applies equality check predicate on the "relation" field. It's identical to RelationEQ.
func Relation(v string) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldEQ(FieldRelation, v))
}

// RelationID applies equality check predicate on the "relation_id" field. It's identical to RelationIDEQ.
func RelationID(v int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldEQ(FieldRelationID, v))
}

// TagIDEQ applies the EQ predicate on the "tag_id" field.
func TagIDEQ(v int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldEQ(FieldTagID, v))
}

// TagIDNEQ applies the NEQ predicate on the "tag_id" field.
func TagIDNEQ(v int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldNEQ(FieldTagID, v))
}

// TagIDIn applies the In predicate on the "tag_id" field.
func TagIDIn(vs ...int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldIn(FieldTagID, vs...))
}

// TagIDNotIn applies the NotIn predicate on the "tag_id" field.
func TagIDNotIn(vs ...int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldNotIn(FieldTagID, vs...))
}

// RelationEQ applies the EQ predicate on the "relation" field.
func RelationEQ(v string) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldEQ(FieldRelation, v))
}

// RelationNEQ applies the NEQ predicate on the "relation" field.
func RelationNEQ(v string) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldNEQ(FieldRelation, v))
}

// RelationIn applies the In predicate on the "relation" field.
func RelationIn(vs ...string) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldIn(FieldRelation, vs...))
}

// RelationNotIn applies the NotIn predicate on the "relation" field.
func RelationNotIn(vs ...string) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldNotIn(FieldRelation, vs...))
}

// RelationGT applies the GT predicate on the "relation" field.
func RelationGT(v string) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldGT(FieldRelation, v))
}

// RelationGTE applies the GTE predicate on the "relation" field.
func RelationGTE(v string) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldGTE(FieldRelation, v))
}

// RelationLT applies the LT predicate on the "relation" field.
func RelationLT(v string) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldLT(FieldRelation, v))
}

// RelationLTE applies the LTE predicate on the "relation" field.
func RelationLTE(v string) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldLTE(FieldRelation, v))
}

// RelationContains applies the Contains predicate on the "relation" field.
func RelationContains(v string) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldContains(FieldRelation, v))
}

// RelationHasPrefix applies the HasPrefix predicate on the "relation" field.
func RelationHasPrefix(v string) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldHasPrefix(FieldRelation, v))
}

// RelationHasSuffix applies the HasSuffix predicate on the "relation" field.
func RelationHasSuffix(v string) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldHasSuffix(FieldRelation, v))
}

// RelationEqualFold applies the EqualFold predicate on the "relation" field.
func RelationEqualFold(v string) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldEqualFold(FieldRelation, v))
}

// RelationContainsFold applies the ContainsFold predicate on the "relation" field.
func RelationContainsFold(v string) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldContainsFold(FieldRelation, v))
}

// RelationIDEQ applies the EQ predicate on the "relation_id" field.
func RelationIDEQ(v int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldEQ(FieldRelationID, v))
}

// RelationIDNEQ applies the NEQ predicate on the "relation_id" field.
func RelationIDNEQ(v int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldNEQ(FieldRelationID, v))
}

// RelationIDIn applies the In predicate on the "relation_id" field.
func RelationIDIn(vs ...int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldIn(FieldRelationID, vs...))
}

// RelationIDNotIn applies the NotIn predicate on the "relation_id" field.
func RelationIDNotIn(vs ...int) predicate.TagsRelation {
	return predicate.TagsRelation(sql.FieldNotIn(FieldRelationID, vs...))
}

// HasBlog applies the HasEdge predicate on the "blog" edge.
func HasBlog() predicate.TagsRelation {
	return predicate.TagsRelation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BlogTable, BlogColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlogWith applies the HasEdge predicate on the "blog" edge with a given conditions (other predicates).
func HasBlogWith(preds ...predicate.Blogs) predicate.TagsRelation {
	return predicate.TagsRelation(func(s *sql.Selector) {
		step := newBlogStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTag applies the HasEdge predicate on the "tag" edge.
func HasTag() predicate.TagsRelation {
	return predicate.TagsRelation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TagTable, TagColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagWith applies the HasEdge predicate on the "tag" edge with a given conditions (other predicates).
func HasTagWith(preds ...predicate.Tags) predicate.TagsRelation {
	return predicate.TagsRelation(func(s *sql.Selector) {
		step := newTagStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TagsRelation) predicate.TagsRelation {
	return predicate.TagsRelation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TagsRelation) predicate.TagsRelation {
	return predicate.TagsRelation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TagsRelation) predicate.TagsRelation {
	return predicate.TagsRelation(sql.NotPredicates(p))
}
