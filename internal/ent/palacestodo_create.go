// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/palacestodo"
	"blog/internal/ent/palacestododone"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PalacesTodoCreate is the builder for creating a PalacesTodo entity.
type PalacesTodoCreate struct {
	config
	mutation *PalacesTodoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ptc *PalacesTodoCreate) SetCreatedAt(i int64) *PalacesTodoCreate {
	ptc.mutation.SetCreatedAt(i)
	return ptc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptc *PalacesTodoCreate) SetNillableCreatedAt(i *int64) *PalacesTodoCreate {
	if i != nil {
		ptc.SetCreatedAt(*i)
	}
	return ptc
}

// SetCreatedBy sets the "created_by" field.
func (ptc *PalacesTodoCreate) SetCreatedBy(i int64) *PalacesTodoCreate {
	ptc.mutation.SetCreatedBy(i)
	return ptc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ptc *PalacesTodoCreate) SetNillableCreatedBy(i *int64) *PalacesTodoCreate {
	if i != nil {
		ptc.SetCreatedBy(*i)
	}
	return ptc
}

// SetUpdatedAt sets the "updated_at" field.
func (ptc *PalacesTodoCreate) SetUpdatedAt(i int64) *PalacesTodoCreate {
	ptc.mutation.SetUpdatedAt(i)
	return ptc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptc *PalacesTodoCreate) SetNillableUpdatedAt(i *int64) *PalacesTodoCreate {
	if i != nil {
		ptc.SetUpdatedAt(*i)
	}
	return ptc
}

// SetUpdatedBy sets the "updated_by" field.
func (ptc *PalacesTodoCreate) SetUpdatedBy(i int64) *PalacesTodoCreate {
	ptc.mutation.SetUpdatedBy(i)
	return ptc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ptc *PalacesTodoCreate) SetNillableUpdatedBy(i *int64) *PalacesTodoCreate {
	if i != nil {
		ptc.SetUpdatedBy(*i)
	}
	return ptc
}

// SetDeletedAt sets the "deleted_at" field.
func (ptc *PalacesTodoCreate) SetDeletedAt(i int64) *PalacesTodoCreate {
	ptc.mutation.SetDeletedAt(i)
	return ptc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptc *PalacesTodoCreate) SetNillableDeletedAt(i *int64) *PalacesTodoCreate {
	if i != nil {
		ptc.SetDeletedAt(*i)
	}
	return ptc
}

// SetDeletedBy sets the "deleted_by" field.
func (ptc *PalacesTodoCreate) SetDeletedBy(i int64) *PalacesTodoCreate {
	ptc.mutation.SetDeletedBy(i)
	return ptc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ptc *PalacesTodoCreate) SetNillableDeletedBy(i *int64) *PalacesTodoCreate {
	if i != nil {
		ptc.SetDeletedBy(*i)
	}
	return ptc
}

// SetAccountID sets the "account_id" field.
func (ptc *PalacesTodoCreate) SetAccountID(i int) *PalacesTodoCreate {
	ptc.mutation.SetAccountID(i)
	return ptc
}

// SetTheme sets the "theme" field.
func (ptc *PalacesTodoCreate) SetTheme(s string) *PalacesTodoCreate {
	ptc.mutation.SetTheme(s)
	return ptc
}

// SetType sets the "type" field.
func (ptc *PalacesTodoCreate) SetType(i int8) *PalacesTodoCreate {
	ptc.mutation.SetType(i)
	return ptc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ptc *PalacesTodoCreate) SetNillableType(i *int8) *PalacesTodoCreate {
	if i != nil {
		ptc.SetType(*i)
	}
	return ptc
}

// SetFrom sets the "from" field.
func (ptc *PalacesTodoCreate) SetFrom(i int64) *PalacesTodoCreate {
	ptc.mutation.SetFrom(i)
	return ptc
}

// SetTo sets the "to" field.
func (ptc *PalacesTodoCreate) SetTo(i int64) *PalacesTodoCreate {
	ptc.mutation.SetTo(i)
	return ptc
}

// SetNum sets the "num" field.
func (ptc *PalacesTodoCreate) SetNum(i int64) *PalacesTodoCreate {
	ptc.mutation.SetNum(i)
	return ptc
}

// SetSort sets the "sort" field.
func (ptc *PalacesTodoCreate) SetSort(i int64) *PalacesTodoCreate {
	ptc.mutation.SetSort(i)
	return ptc
}

// SetContent sets the "content" field.
func (ptc *PalacesTodoCreate) SetContent(s string) *PalacesTodoCreate {
	ptc.mutation.SetContent(s)
	return ptc
}

// SetStatus sets the "status" field.
func (ptc *PalacesTodoCreate) SetStatus(i int8) *PalacesTodoCreate {
	ptc.mutation.SetStatus(i)
	return ptc
}

// SetID sets the "id" field.
func (ptc *PalacesTodoCreate) SetID(i int) *PalacesTodoCreate {
	ptc.mutation.SetID(i)
	return ptc
}

// AddDoneIDs adds the "dones" edge to the PalacesTodoDone entity by IDs.
func (ptc *PalacesTodoCreate) AddDoneIDs(ids ...int) *PalacesTodoCreate {
	ptc.mutation.AddDoneIDs(ids...)
	return ptc
}

// AddDones adds the "dones" edges to the PalacesTodoDone entity.
func (ptc *PalacesTodoCreate) AddDones(p ...*PalacesTodoDone) *PalacesTodoCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptc.AddDoneIDs(ids...)
}

// Mutation returns the PalacesTodoMutation object of the builder.
func (ptc *PalacesTodoCreate) Mutation() *PalacesTodoMutation {
	return ptc.mutation
}

// Save creates the PalacesTodo in the database.
func (ptc *PalacesTodoCreate) Save(ctx context.Context) (*PalacesTodo, error) {
	if err := ptc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PalacesTodoCreate) SaveX(ctx context.Context) *PalacesTodo {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *PalacesTodoCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *PalacesTodoCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *PalacesTodoCreate) defaults() error {
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		v := palacestodo.DefaultCreatedAt
		ptc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptc.mutation.CreatedBy(); !ok {
		v := palacestodo.DefaultCreatedBy
		ptc.mutation.SetCreatedBy(v)
	}
	if _, ok := ptc.mutation.UpdatedAt(); !ok {
		v := palacestodo.DefaultUpdatedAt
		ptc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ptc.mutation.UpdatedBy(); !ok {
		v := palacestodo.DefaultUpdatedBy
		ptc.mutation.SetUpdatedBy(v)
	}
	if _, ok := ptc.mutation.DeletedAt(); !ok {
		v := palacestodo.DefaultDeletedAt
		ptc.mutation.SetDeletedAt(v)
	}
	if _, ok := ptc.mutation.DeletedBy(); !ok {
		v := palacestodo.DefaultDeletedBy
		ptc.mutation.SetDeletedBy(v)
	}
	if _, ok := ptc.mutation.GetType(); !ok {
		v := palacestodo.DefaultType
		ptc.mutation.SetType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PalacesTodoCreate) check() error {
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PalacesTodo.created_at"`)}
	}
	if _, ok := ptc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "PalacesTodo.created_by"`)}
	}
	if _, ok := ptc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PalacesTodo.updated_at"`)}
	}
	if _, ok := ptc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "PalacesTodo.updated_by"`)}
	}
	if _, ok := ptc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "PalacesTodo.deleted_at"`)}
	}
	if _, ok := ptc.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "PalacesTodo.deleted_by"`)}
	}
	if _, ok := ptc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "PalacesTodo.account_id"`)}
	}
	if _, ok := ptc.mutation.Theme(); !ok {
		return &ValidationError{Name: "theme", err: errors.New(`ent: missing required field "PalacesTodo.theme"`)}
	}
	if _, ok := ptc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PalacesTodo.type"`)}
	}
	if _, ok := ptc.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "PalacesTodo.from"`)}
	}
	if _, ok := ptc.mutation.To(); !ok {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required field "PalacesTodo.to"`)}
	}
	if _, ok := ptc.mutation.Num(); !ok {
		return &ValidationError{Name: "num", err: errors.New(`ent: missing required field "PalacesTodo.num"`)}
	}
	if _, ok := ptc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "PalacesTodo.sort"`)}
	}
	if _, ok := ptc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "PalacesTodo.content"`)}
	}
	if v, ok := ptc.mutation.Content(); ok {
		if err := palacestodo.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "PalacesTodo.content": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PalacesTodo.status"`)}
	}
	if v, ok := ptc.mutation.ID(); ok {
		if err := palacestodo.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PalacesTodo.id": %w`, err)}
		}
	}
	return nil
}

func (ptc *PalacesTodoCreate) sqlSave(ctx context.Context) (*PalacesTodo, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *PalacesTodoCreate) createSpec() (*PalacesTodo, *sqlgraph.CreateSpec) {
	var (
		_node = &PalacesTodo{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(palacestodo.Table, sqlgraph.NewFieldSpec(palacestodo.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ptc.conflict
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ptc.mutation.CreatedAt(); ok {
		_spec.SetField(palacestodo.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := ptc.mutation.CreatedBy(); ok {
		_spec.SetField(palacestodo.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := ptc.mutation.UpdatedAt(); ok {
		_spec.SetField(palacestodo.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := ptc.mutation.UpdatedBy(); ok {
		_spec.SetField(palacestodo.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := ptc.mutation.DeletedAt(); ok {
		_spec.SetField(palacestodo.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := ptc.mutation.DeletedBy(); ok {
		_spec.SetField(palacestodo.FieldDeletedBy, field.TypeInt64, value)
		_node.DeletedBy = value
	}
	if value, ok := ptc.mutation.AccountID(); ok {
		_spec.SetField(palacestodo.FieldAccountID, field.TypeInt, value)
		_node.AccountID = value
	}
	if value, ok := ptc.mutation.Theme(); ok {
		_spec.SetField(palacestodo.FieldTheme, field.TypeString, value)
		_node.Theme = value
	}
	if value, ok := ptc.mutation.GetType(); ok {
		_spec.SetField(palacestodo.FieldType, field.TypeInt8, value)
		_node.Type = value
	}
	if value, ok := ptc.mutation.From(); ok {
		_spec.SetField(palacestodo.FieldFrom, field.TypeInt64, value)
		_node.From = value
	}
	if value, ok := ptc.mutation.To(); ok {
		_spec.SetField(palacestodo.FieldTo, field.TypeInt64, value)
		_node.To = value
	}
	if value, ok := ptc.mutation.Num(); ok {
		_spec.SetField(palacestodo.FieldNum, field.TypeInt64, value)
		_node.Num = value
	}
	if value, ok := ptc.mutation.Sort(); ok {
		_spec.SetField(palacestodo.FieldSort, field.TypeInt64, value)
		_node.Sort = value
	}
	if value, ok := ptc.mutation.Content(); ok {
		_spec.SetField(palacestodo.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := ptc.mutation.Status(); ok {
		_spec.SetField(palacestodo.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if nodes := ptc.mutation.DonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   palacestodo.DonesTable,
			Columns: []string{palacestodo.DonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(palacestododone.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PalacesTodo.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PalacesTodoUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ptc *PalacesTodoCreate) OnConflict(opts ...sql.ConflictOption) *PalacesTodoUpsertOne {
	ptc.conflict = opts
	return &PalacesTodoUpsertOne{
		create: ptc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PalacesTodo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptc *PalacesTodoCreate) OnConflictColumns(columns ...string) *PalacesTodoUpsertOne {
	ptc.conflict = append(ptc.conflict, sql.ConflictColumns(columns...))
	return &PalacesTodoUpsertOne{
		create: ptc,
	}
}

type (
	// PalacesTodoUpsertOne is the builder for "upsert"-ing
	//  one PalacesTodo node.
	PalacesTodoUpsertOne struct {
		create *PalacesTodoCreate
	}

	// PalacesTodoUpsert is the "OnConflict" setter.
	PalacesTodoUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PalacesTodoUpsert) SetUpdatedAt(v int64) *PalacesTodoUpsert {
	u.Set(palacestodo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PalacesTodoUpsert) UpdateUpdatedAt() *PalacesTodoUpsert {
	u.SetExcluded(palacestodo.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PalacesTodoUpsert) AddUpdatedAt(v int64) *PalacesTodoUpsert {
	u.Add(palacestodo.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PalacesTodoUpsert) SetUpdatedBy(v int64) *PalacesTodoUpsert {
	u.Set(palacestodo.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PalacesTodoUpsert) UpdateUpdatedBy() *PalacesTodoUpsert {
	u.SetExcluded(palacestodo.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PalacesTodoUpsert) AddUpdatedBy(v int64) *PalacesTodoUpsert {
	u.Add(palacestodo.FieldUpdatedBy, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PalacesTodoUpsert) SetDeletedAt(v int64) *PalacesTodoUpsert {
	u.Set(palacestodo.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PalacesTodoUpsert) UpdateDeletedAt() *PalacesTodoUpsert {
	u.SetExcluded(palacestodo.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PalacesTodoUpsert) AddDeletedAt(v int64) *PalacesTodoUpsert {
	u.Add(palacestodo.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *PalacesTodoUpsert) SetDeletedBy(v int64) *PalacesTodoUpsert {
	u.Set(palacestodo.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *PalacesTodoUpsert) UpdateDeletedBy() *PalacesTodoUpsert {
	u.SetExcluded(palacestodo.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *PalacesTodoUpsert) AddDeletedBy(v int64) *PalacesTodoUpsert {
	u.Add(palacestodo.FieldDeletedBy, v)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *PalacesTodoUpsert) SetAccountID(v int) *PalacesTodoUpsert {
	u.Set(palacestodo.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PalacesTodoUpsert) UpdateAccountID() *PalacesTodoUpsert {
	u.SetExcluded(palacestodo.FieldAccountID)
	return u
}

// AddAccountID adds v to the "account_id" field.
func (u *PalacesTodoUpsert) AddAccountID(v int) *PalacesTodoUpsert {
	u.Add(palacestodo.FieldAccountID, v)
	return u
}

// SetTheme sets the "theme" field.
func (u *PalacesTodoUpsert) SetTheme(v string) *PalacesTodoUpsert {
	u.Set(palacestodo.FieldTheme, v)
	return u
}

// UpdateTheme sets the "theme" field to the value that was provided on create.
func (u *PalacesTodoUpsert) UpdateTheme() *PalacesTodoUpsert {
	u.SetExcluded(palacestodo.FieldTheme)
	return u
}

// SetType sets the "type" field.
func (u *PalacesTodoUpsert) SetType(v int8) *PalacesTodoUpsert {
	u.Set(palacestodo.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PalacesTodoUpsert) UpdateType() *PalacesTodoUpsert {
	u.SetExcluded(palacestodo.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *PalacesTodoUpsert) AddType(v int8) *PalacesTodoUpsert {
	u.Add(palacestodo.FieldType, v)
	return u
}

// SetFrom sets the "from" field.
func (u *PalacesTodoUpsert) SetFrom(v int64) *PalacesTodoUpsert {
	u.Set(palacestodo.FieldFrom, v)
	return u
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *PalacesTodoUpsert) UpdateFrom() *PalacesTodoUpsert {
	u.SetExcluded(palacestodo.FieldFrom)
	return u
}

// AddFrom adds v to the "from" field.
func (u *PalacesTodoUpsert) AddFrom(v int64) *PalacesTodoUpsert {
	u.Add(palacestodo.FieldFrom, v)
	return u
}

// SetTo sets the "to" field.
func (u *PalacesTodoUpsert) SetTo(v int64) *PalacesTodoUpsert {
	u.Set(palacestodo.FieldTo, v)
	return u
}

// UpdateTo sets the "to" field to the value that was provided on create.
func (u *PalacesTodoUpsert) UpdateTo() *PalacesTodoUpsert {
	u.SetExcluded(palacestodo.FieldTo)
	return u
}

// AddTo adds v to the "to" field.
func (u *PalacesTodoUpsert) AddTo(v int64) *PalacesTodoUpsert {
	u.Add(palacestodo.FieldTo, v)
	return u
}

// SetNum sets the "num" field.
func (u *PalacesTodoUpsert) SetNum(v int64) *PalacesTodoUpsert {
	u.Set(palacestodo.FieldNum, v)
	return u
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *PalacesTodoUpsert) UpdateNum() *PalacesTodoUpsert {
	u.SetExcluded(palacestodo.FieldNum)
	return u
}

// AddNum adds v to the "num" field.
func (u *PalacesTodoUpsert) AddNum(v int64) *PalacesTodoUpsert {
	u.Add(palacestodo.FieldNum, v)
	return u
}

// SetSort sets the "sort" field.
func (u *PalacesTodoUpsert) SetSort(v int64) *PalacesTodoUpsert {
	u.Set(palacestodo.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *PalacesTodoUpsert) UpdateSort() *PalacesTodoUpsert {
	u.SetExcluded(palacestodo.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *PalacesTodoUpsert) AddSort(v int64) *PalacesTodoUpsert {
	u.Add(palacestodo.FieldSort, v)
	return u
}

// SetContent sets the "content" field.
func (u *PalacesTodoUpsert) SetContent(v string) *PalacesTodoUpsert {
	u.Set(palacestodo.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PalacesTodoUpsert) UpdateContent() *PalacesTodoUpsert {
	u.SetExcluded(palacestodo.FieldContent)
	return u
}

// SetStatus sets the "status" field.
func (u *PalacesTodoUpsert) SetStatus(v int8) *PalacesTodoUpsert {
	u.Set(palacestodo.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PalacesTodoUpsert) UpdateStatus() *PalacesTodoUpsert {
	u.SetExcluded(palacestodo.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *PalacesTodoUpsert) AddStatus(v int8) *PalacesTodoUpsert {
	u.Add(palacestodo.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PalacesTodo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(palacestodo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PalacesTodoUpsertOne) UpdateNewValues() *PalacesTodoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(palacestodo.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(palacestodo.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(palacestodo.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PalacesTodo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PalacesTodoUpsertOne) Ignore() *PalacesTodoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PalacesTodoUpsertOne) DoNothing() *PalacesTodoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PalacesTodoCreate.OnConflict
// documentation for more info.
func (u *PalacesTodoUpsertOne) Update(set func(*PalacesTodoUpsert)) *PalacesTodoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PalacesTodoUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PalacesTodoUpsertOne) SetUpdatedAt(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PalacesTodoUpsertOne) AddUpdatedAt(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PalacesTodoUpsertOne) UpdateUpdatedAt() *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PalacesTodoUpsertOne) SetUpdatedBy(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PalacesTodoUpsertOne) AddUpdatedBy(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PalacesTodoUpsertOne) UpdateUpdatedBy() *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PalacesTodoUpsertOne) SetDeletedAt(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PalacesTodoUpsertOne) AddDeletedAt(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PalacesTodoUpsertOne) UpdateDeletedAt() *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *PalacesTodoUpsertOne) SetDeletedBy(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *PalacesTodoUpsertOne) AddDeletedBy(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *PalacesTodoUpsertOne) UpdateDeletedBy() *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetAccountID sets the "account_id" field.
func (u *PalacesTodoUpsertOne) SetAccountID(v int) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *PalacesTodoUpsertOne) AddAccountID(v int) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PalacesTodoUpsertOne) UpdateAccountID() *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateAccountID()
	})
}

// SetTheme sets the "theme" field.
func (u *PalacesTodoUpsertOne) SetTheme(v string) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetTheme(v)
	})
}

// UpdateTheme sets the "theme" field to the value that was provided on create.
func (u *PalacesTodoUpsertOne) UpdateTheme() *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateTheme()
	})
}

// SetType sets the "type" field.
func (u *PalacesTodoUpsertOne) SetType(v int8) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PalacesTodoUpsertOne) AddType(v int8) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PalacesTodoUpsertOne) UpdateType() *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateType()
	})
}

// SetFrom sets the "from" field.
func (u *PalacesTodoUpsertOne) SetFrom(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetFrom(v)
	})
}

// AddFrom adds v to the "from" field.
func (u *PalacesTodoUpsertOne) AddFrom(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddFrom(v)
	})
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *PalacesTodoUpsertOne) UpdateFrom() *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateFrom()
	})
}

// SetTo sets the "to" field.
func (u *PalacesTodoUpsertOne) SetTo(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetTo(v)
	})
}

// AddTo adds v to the "to" field.
func (u *PalacesTodoUpsertOne) AddTo(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddTo(v)
	})
}

// UpdateTo sets the "to" field to the value that was provided on create.
func (u *PalacesTodoUpsertOne) UpdateTo() *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateTo()
	})
}

// SetNum sets the "num" field.
func (u *PalacesTodoUpsertOne) SetNum(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetNum(v)
	})
}

// AddNum adds v to the "num" field.
func (u *PalacesTodoUpsertOne) AddNum(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddNum(v)
	})
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *PalacesTodoUpsertOne) UpdateNum() *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateNum()
	})
}

// SetSort sets the "sort" field.
func (u *PalacesTodoUpsertOne) SetSort(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *PalacesTodoUpsertOne) AddSort(v int64) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *PalacesTodoUpsertOne) UpdateSort() *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateSort()
	})
}

// SetContent sets the "content" field.
func (u *PalacesTodoUpsertOne) SetContent(v string) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PalacesTodoUpsertOne) UpdateContent() *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateContent()
	})
}

// SetStatus sets the "status" field.
func (u *PalacesTodoUpsertOne) SetStatus(v int8) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PalacesTodoUpsertOne) AddStatus(v int8) *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PalacesTodoUpsertOne) UpdateStatus() *PalacesTodoUpsertOne {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *PalacesTodoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PalacesTodoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PalacesTodoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PalacesTodoUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PalacesTodoUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PalacesTodoCreateBulk is the builder for creating many PalacesTodo entities in bulk.
type PalacesTodoCreateBulk struct {
	config
	err      error
	builders []*PalacesTodoCreate
	conflict []sql.ConflictOption
}

// Save creates the PalacesTodo entities in the database.
func (ptcb *PalacesTodoCreateBulk) Save(ctx context.Context) ([]*PalacesTodo, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*PalacesTodo, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PalacesTodoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ptcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *PalacesTodoCreateBulk) SaveX(ctx context.Context) []*PalacesTodo {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *PalacesTodoCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *PalacesTodoCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PalacesTodo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PalacesTodoUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ptcb *PalacesTodoCreateBulk) OnConflict(opts ...sql.ConflictOption) *PalacesTodoUpsertBulk {
	ptcb.conflict = opts
	return &PalacesTodoUpsertBulk{
		create: ptcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PalacesTodo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptcb *PalacesTodoCreateBulk) OnConflictColumns(columns ...string) *PalacesTodoUpsertBulk {
	ptcb.conflict = append(ptcb.conflict, sql.ConflictColumns(columns...))
	return &PalacesTodoUpsertBulk{
		create: ptcb,
	}
}

// PalacesTodoUpsertBulk is the builder for "upsert"-ing
// a bulk of PalacesTodo nodes.
type PalacesTodoUpsertBulk struct {
	create *PalacesTodoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PalacesTodo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(palacestodo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PalacesTodoUpsertBulk) UpdateNewValues() *PalacesTodoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(palacestodo.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(palacestodo.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(palacestodo.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PalacesTodo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PalacesTodoUpsertBulk) Ignore() *PalacesTodoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PalacesTodoUpsertBulk) DoNothing() *PalacesTodoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PalacesTodoCreateBulk.OnConflict
// documentation for more info.
func (u *PalacesTodoUpsertBulk) Update(set func(*PalacesTodoUpsert)) *PalacesTodoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PalacesTodoUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PalacesTodoUpsertBulk) SetUpdatedAt(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PalacesTodoUpsertBulk) AddUpdatedAt(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PalacesTodoUpsertBulk) UpdateUpdatedAt() *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PalacesTodoUpsertBulk) SetUpdatedBy(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PalacesTodoUpsertBulk) AddUpdatedBy(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PalacesTodoUpsertBulk) UpdateUpdatedBy() *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PalacesTodoUpsertBulk) SetDeletedAt(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PalacesTodoUpsertBulk) AddDeletedAt(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PalacesTodoUpsertBulk) UpdateDeletedAt() *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *PalacesTodoUpsertBulk) SetDeletedBy(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *PalacesTodoUpsertBulk) AddDeletedBy(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *PalacesTodoUpsertBulk) UpdateDeletedBy() *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetAccountID sets the "account_id" field.
func (u *PalacesTodoUpsertBulk) SetAccountID(v int) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *PalacesTodoUpsertBulk) AddAccountID(v int) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PalacesTodoUpsertBulk) UpdateAccountID() *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateAccountID()
	})
}

// SetTheme sets the "theme" field.
func (u *PalacesTodoUpsertBulk) SetTheme(v string) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetTheme(v)
	})
}

// UpdateTheme sets the "theme" field to the value that was provided on create.
func (u *PalacesTodoUpsertBulk) UpdateTheme() *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateTheme()
	})
}

// SetType sets the "type" field.
func (u *PalacesTodoUpsertBulk) SetType(v int8) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PalacesTodoUpsertBulk) AddType(v int8) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PalacesTodoUpsertBulk) UpdateType() *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateType()
	})
}

// SetFrom sets the "from" field.
func (u *PalacesTodoUpsertBulk) SetFrom(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetFrom(v)
	})
}

// AddFrom adds v to the "from" field.
func (u *PalacesTodoUpsertBulk) AddFrom(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddFrom(v)
	})
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *PalacesTodoUpsertBulk) UpdateFrom() *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateFrom()
	})
}

// SetTo sets the "to" field.
func (u *PalacesTodoUpsertBulk) SetTo(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetTo(v)
	})
}

// AddTo adds v to the "to" field.
func (u *PalacesTodoUpsertBulk) AddTo(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddTo(v)
	})
}

// UpdateTo sets the "to" field to the value that was provided on create.
func (u *PalacesTodoUpsertBulk) UpdateTo() *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateTo()
	})
}

// SetNum sets the "num" field.
func (u *PalacesTodoUpsertBulk) SetNum(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetNum(v)
	})
}

// AddNum adds v to the "num" field.
func (u *PalacesTodoUpsertBulk) AddNum(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddNum(v)
	})
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *PalacesTodoUpsertBulk) UpdateNum() *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateNum()
	})
}

// SetSort sets the "sort" field.
func (u *PalacesTodoUpsertBulk) SetSort(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *PalacesTodoUpsertBulk) AddSort(v int64) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *PalacesTodoUpsertBulk) UpdateSort() *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateSort()
	})
}

// SetContent sets the "content" field.
func (u *PalacesTodoUpsertBulk) SetContent(v string) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PalacesTodoUpsertBulk) UpdateContent() *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateContent()
	})
}

// SetStatus sets the "status" field.
func (u *PalacesTodoUpsertBulk) SetStatus(v int8) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PalacesTodoUpsertBulk) AddStatus(v int8) *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PalacesTodoUpsertBulk) UpdateStatus() *PalacesTodoUpsertBulk {
	return u.Update(func(s *PalacesTodoUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *PalacesTodoUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PalacesTodoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PalacesTodoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PalacesTodoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
