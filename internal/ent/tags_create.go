// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/blogs"
	"blog/internal/ent/tags"
	"blog/internal/ent/tagsrelation"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TagsCreate is the builder for creating a Tags entity.
type TagsCreate struct {
	config
	mutation *TagsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TagsCreate) SetCreatedAt(i int64) *TagsCreate {
	tc.mutation.SetCreatedAt(i)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TagsCreate) SetNillableCreatedAt(i *int64) *TagsCreate {
	if i != nil {
		tc.SetCreatedAt(*i)
	}
	return tc
}

// SetCreatedBy sets the "created_by" field.
func (tc *TagsCreate) SetCreatedBy(i int64) *TagsCreate {
	tc.mutation.SetCreatedBy(i)
	return tc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tc *TagsCreate) SetNillableCreatedBy(i *int64) *TagsCreate {
	if i != nil {
		tc.SetCreatedBy(*i)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TagsCreate) SetUpdatedAt(i int64) *TagsCreate {
	tc.mutation.SetUpdatedAt(i)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TagsCreate) SetNillableUpdatedAt(i *int64) *TagsCreate {
	if i != nil {
		tc.SetUpdatedAt(*i)
	}
	return tc
}

// SetUpdatedBy sets the "updated_by" field.
func (tc *TagsCreate) SetUpdatedBy(i int64) *TagsCreate {
	tc.mutation.SetUpdatedBy(i)
	return tc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tc *TagsCreate) SetNillableUpdatedBy(i *int64) *TagsCreate {
	if i != nil {
		tc.SetUpdatedBy(*i)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TagsCreate) SetDeletedAt(i int64) *TagsCreate {
	tc.mutation.SetDeletedAt(i)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TagsCreate) SetNillableDeletedAt(i *int64) *TagsCreate {
	if i != nil {
		tc.SetDeletedAt(*i)
	}
	return tc
}

// SetDeletedBy sets the "deleted_by" field.
func (tc *TagsCreate) SetDeletedBy(i int64) *TagsCreate {
	tc.mutation.SetDeletedBy(i)
	return tc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tc *TagsCreate) SetNillableDeletedBy(i *int64) *TagsCreate {
	if i != nil {
		tc.SetDeletedBy(*i)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TagsCreate) SetName(s string) *TagsCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetID sets the "id" field.
func (tc *TagsCreate) SetID(i int) *TagsCreate {
	tc.mutation.SetID(i)
	return tc
}

// AddBlogIDs adds the "blogs" edge to the Blogs entity by IDs.
func (tc *TagsCreate) AddBlogIDs(ids ...int) *TagsCreate {
	tc.mutation.AddBlogIDs(ids...)
	return tc
}

// AddBlogs adds the "blogs" edges to the Blogs entity.
func (tc *TagsCreate) AddBlogs(b ...*Blogs) *TagsCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tc.AddBlogIDs(ids...)
}

// AddTagRelationIDs adds the "tag_relation" edge to the TagsRelation entity by IDs.
func (tc *TagsCreate) AddTagRelationIDs(ids ...int) *TagsCreate {
	tc.mutation.AddTagRelationIDs(ids...)
	return tc
}

// AddTagRelation adds the "tag_relation" edges to the TagsRelation entity.
func (tc *TagsCreate) AddTagRelation(t ...*TagsRelation) *TagsCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTagRelationIDs(ids...)
}

// Mutation returns the TagsMutation object of the builder.
func (tc *TagsCreate) Mutation() *TagsMutation {
	return tc.mutation
}

// Save creates the Tags in the database.
func (tc *TagsCreate) Save(ctx context.Context) (*Tags, error) {
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TagsCreate) SaveX(ctx context.Context) *Tags {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TagsCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TagsCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TagsCreate) defaults() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tags.DefaultCreatedAt
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.CreatedBy(); !ok {
		v := tags.DefaultCreatedBy
		tc.mutation.SetCreatedBy(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := tags.DefaultUpdatedAt
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedBy(); !ok {
		v := tags.DefaultUpdatedBy
		tc.mutation.SetUpdatedBy(v)
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		v := tags.DefaultDeletedAt
		tc.mutation.SetDeletedAt(v)
	}
	if _, ok := tc.mutation.DeletedBy(); !ok {
		v := tags.DefaultDeletedBy
		tc.mutation.SetDeletedBy(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TagsCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Tags.created_at"`)}
	}
	if _, ok := tc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Tags.created_by"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Tags.updated_at"`)}
	}
	if _, ok := tc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Tags.updated_by"`)}
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Tags.deleted_at"`)}
	}
	if _, ok := tc.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "Tags.deleted_by"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Tags.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := tags.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tags.name": %w`, err)}
		}
	}
	if v, ok := tc.mutation.ID(); ok {
		if err := tags.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Tags.id": %w`, err)}
		}
	}
	return nil
}

func (tc *TagsCreate) sqlSave(ctx context.Context) (*Tags, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TagsCreate) createSpec() (*Tags, *sqlgraph.CreateSpec) {
	var (
		_node = &Tags{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tags.Table, sqlgraph.NewFieldSpec(tags.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(tags.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.CreatedBy(); ok {
		_spec.SetField(tags.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(tags.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.UpdatedBy(); ok {
		_spec.SetField(tags.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.SetField(tags.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.DeletedBy(); ok {
		_spec.SetField(tags.FieldDeletedBy, field.TypeInt64, value)
		_node.DeletedBy = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(tags.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := tc.mutation.BlogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tags.BlogsTable,
			Columns: tags.BlogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogs.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TagRelationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tags.TagRelationTable,
			Columns: []string{tags.TagRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tagsrelation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tags.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TagsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TagsCreate) OnConflict(opts ...sql.ConflictOption) *TagsUpsertOne {
	tc.conflict = opts
	return &TagsUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tags.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TagsCreate) OnConflictColumns(columns ...string) *TagsUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TagsUpsertOne{
		create: tc,
	}
}

type (
	// TagsUpsertOne is the builder for "upsert"-ing
	//  one Tags node.
	TagsUpsertOne struct {
		create *TagsCreate
	}

	// TagsUpsert is the "OnConflict" setter.
	TagsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TagsUpsert) SetUpdatedAt(v int64) *TagsUpsert {
	u.Set(tags.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TagsUpsert) UpdateUpdatedAt() *TagsUpsert {
	u.SetExcluded(tags.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TagsUpsert) AddUpdatedAt(v int64) *TagsUpsert {
	u.Add(tags.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TagsUpsert) SetUpdatedBy(v int64) *TagsUpsert {
	u.Set(tags.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TagsUpsert) UpdateUpdatedBy() *TagsUpsert {
	u.SetExcluded(tags.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TagsUpsert) AddUpdatedBy(v int64) *TagsUpsert {
	u.Add(tags.FieldUpdatedBy, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TagsUpsert) SetDeletedAt(v int64) *TagsUpsert {
	u.Set(tags.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TagsUpsert) UpdateDeletedAt() *TagsUpsert {
	u.SetExcluded(tags.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TagsUpsert) AddDeletedAt(v int64) *TagsUpsert {
	u.Add(tags.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *TagsUpsert) SetDeletedBy(v int64) *TagsUpsert {
	u.Set(tags.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *TagsUpsert) UpdateDeletedBy() *TagsUpsert {
	u.SetExcluded(tags.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *TagsUpsert) AddDeletedBy(v int64) *TagsUpsert {
	u.Add(tags.FieldDeletedBy, v)
	return u
}

// SetName sets the "name" field.
func (u *TagsUpsert) SetName(v string) *TagsUpsert {
	u.Set(tags.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TagsUpsert) UpdateName() *TagsUpsert {
	u.SetExcluded(tags.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Tags.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tags.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TagsUpsertOne) UpdateNewValues() *TagsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tags.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(tags.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(tags.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tags.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TagsUpsertOne) Ignore() *TagsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TagsUpsertOne) DoNothing() *TagsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TagsCreate.OnConflict
// documentation for more info.
func (u *TagsUpsertOne) Update(set func(*TagsUpsert)) *TagsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TagsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TagsUpsertOne) SetUpdatedAt(v int64) *TagsUpsertOne {
	return u.Update(func(s *TagsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TagsUpsertOne) AddUpdatedAt(v int64) *TagsUpsertOne {
	return u.Update(func(s *TagsUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TagsUpsertOne) UpdateUpdatedAt() *TagsUpsertOne {
	return u.Update(func(s *TagsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TagsUpsertOne) SetUpdatedBy(v int64) *TagsUpsertOne {
	return u.Update(func(s *TagsUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TagsUpsertOne) AddUpdatedBy(v int64) *TagsUpsertOne {
	return u.Update(func(s *TagsUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TagsUpsertOne) UpdateUpdatedBy() *TagsUpsertOne {
	return u.Update(func(s *TagsUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TagsUpsertOne) SetDeletedAt(v int64) *TagsUpsertOne {
	return u.Update(func(s *TagsUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TagsUpsertOne) AddDeletedAt(v int64) *TagsUpsertOne {
	return u.Update(func(s *TagsUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TagsUpsertOne) UpdateDeletedAt() *TagsUpsertOne {
	return u.Update(func(s *TagsUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *TagsUpsertOne) SetDeletedBy(v int64) *TagsUpsertOne {
	return u.Update(func(s *TagsUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *TagsUpsertOne) AddDeletedBy(v int64) *TagsUpsertOne {
	return u.Update(func(s *TagsUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *TagsUpsertOne) UpdateDeletedBy() *TagsUpsertOne {
	return u.Update(func(s *TagsUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetName sets the "name" field.
func (u *TagsUpsertOne) SetName(v string) *TagsUpsertOne {
	return u.Update(func(s *TagsUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TagsUpsertOne) UpdateName() *TagsUpsertOne {
	return u.Update(func(s *TagsUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *TagsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TagsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TagsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TagsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TagsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TagsCreateBulk is the builder for creating many Tags entities in bulk.
type TagsCreateBulk struct {
	config
	err      error
	builders []*TagsCreate
	conflict []sql.ConflictOption
}

// Save creates the Tags entities in the database.
func (tcb *TagsCreateBulk) Save(ctx context.Context) ([]*Tags, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tags, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TagsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TagsCreateBulk) SaveX(ctx context.Context) []*Tags {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TagsCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TagsCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tags.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TagsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TagsCreateBulk) OnConflict(opts ...sql.ConflictOption) *TagsUpsertBulk {
	tcb.conflict = opts
	return &TagsUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tags.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TagsCreateBulk) OnConflictColumns(columns ...string) *TagsUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TagsUpsertBulk{
		create: tcb,
	}
}

// TagsUpsertBulk is the builder for "upsert"-ing
// a bulk of Tags nodes.
type TagsUpsertBulk struct {
	create *TagsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Tags.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tags.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TagsUpsertBulk) UpdateNewValues() *TagsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tags.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(tags.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(tags.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tags.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TagsUpsertBulk) Ignore() *TagsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TagsUpsertBulk) DoNothing() *TagsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TagsCreateBulk.OnConflict
// documentation for more info.
func (u *TagsUpsertBulk) Update(set func(*TagsUpsert)) *TagsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TagsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TagsUpsertBulk) SetUpdatedAt(v int64) *TagsUpsertBulk {
	return u.Update(func(s *TagsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TagsUpsertBulk) AddUpdatedAt(v int64) *TagsUpsertBulk {
	return u.Update(func(s *TagsUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TagsUpsertBulk) UpdateUpdatedAt() *TagsUpsertBulk {
	return u.Update(func(s *TagsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TagsUpsertBulk) SetUpdatedBy(v int64) *TagsUpsertBulk {
	return u.Update(func(s *TagsUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TagsUpsertBulk) AddUpdatedBy(v int64) *TagsUpsertBulk {
	return u.Update(func(s *TagsUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TagsUpsertBulk) UpdateUpdatedBy() *TagsUpsertBulk {
	return u.Update(func(s *TagsUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TagsUpsertBulk) SetDeletedAt(v int64) *TagsUpsertBulk {
	return u.Update(func(s *TagsUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TagsUpsertBulk) AddDeletedAt(v int64) *TagsUpsertBulk {
	return u.Update(func(s *TagsUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TagsUpsertBulk) UpdateDeletedAt() *TagsUpsertBulk {
	return u.Update(func(s *TagsUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *TagsUpsertBulk) SetDeletedBy(v int64) *TagsUpsertBulk {
	return u.Update(func(s *TagsUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *TagsUpsertBulk) AddDeletedBy(v int64) *TagsUpsertBulk {
	return u.Update(func(s *TagsUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *TagsUpsertBulk) UpdateDeletedBy() *TagsUpsertBulk {
	return u.Update(func(s *TagsUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetName sets the "name" field.
func (u *TagsUpsertBulk) SetName(v string) *TagsUpsertBulk {
	return u.Update(func(s *TagsUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TagsUpsertBulk) UpdateName() *TagsUpsertBulk {
	return u.Update(func(s *TagsUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *TagsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TagsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TagsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TagsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
