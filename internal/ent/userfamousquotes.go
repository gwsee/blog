// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/userfamousquotes"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 名言警句
type UserFamousQuotes struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 创建人
	CreatedBy int64 `json:"created_by,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 更新人
	UpdatedBy int64 `json:"updated_by,omitempty"`
	// 软删除时间
	DeletedAt int64 `json:"deleted_at,omitempty"`
	// 删除人
	DeletedBy int64 `json:"deleted_by,omitempty"`
	// 名言警句
	Text         string `json:"text,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserFamousQuotes) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userfamousquotes.FieldID, userfamousquotes.FieldCreatedAt, userfamousquotes.FieldCreatedBy, userfamousquotes.FieldUpdatedAt, userfamousquotes.FieldUpdatedBy, userfamousquotes.FieldDeletedAt, userfamousquotes.FieldDeletedBy:
			values[i] = new(sql.NullInt64)
		case userfamousquotes.FieldText:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserFamousQuotes fields.
func (ufq *UserFamousQuotes) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userfamousquotes.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ufq.ID = int(value.Int64)
		case userfamousquotes.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ufq.CreatedAt = value.Int64
			}
		case userfamousquotes.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ufq.CreatedBy = value.Int64
			}
		case userfamousquotes.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ufq.UpdatedAt = value.Int64
			}
		case userfamousquotes.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ufq.UpdatedBy = value.Int64
			}
		case userfamousquotes.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ufq.DeletedAt = value.Int64
			}
		case userfamousquotes.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				ufq.DeletedBy = value.Int64
			}
		case userfamousquotes.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				ufq.Text = value.String
			}
		default:
			ufq.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserFamousQuotes.
// This includes values selected through modifiers, order, etc.
func (ufq *UserFamousQuotes) Value(name string) (ent.Value, error) {
	return ufq.selectValues.Get(name)
}

// Update returns a builder for updating this UserFamousQuotes.
// Note that you need to call UserFamousQuotes.Unwrap() before calling this method if this UserFamousQuotes
// was returned from a transaction, and the transaction was committed or rolled back.
func (ufq *UserFamousQuotes) Update() *UserFamousQuotesUpdateOne {
	return NewUserFamousQuotesClient(ufq.config).UpdateOne(ufq)
}

// Unwrap unwraps the UserFamousQuotes entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ufq *UserFamousQuotes) Unwrap() *UserFamousQuotes {
	_tx, ok := ufq.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserFamousQuotes is not a transactional entity")
	}
	ufq.config.driver = _tx.drv
	return ufq
}

// String implements the fmt.Stringer.
func (ufq *UserFamousQuotes) String() string {
	var builder strings.Builder
	builder.WriteString("UserFamousQuotes(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ufq.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ufq.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ufq.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ufq.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ufq.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ufq.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(fmt.Sprintf("%v", ufq.DeletedBy))
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(ufq.Text)
	builder.WriteByte(')')
	return builder.String()
}

// UserFamousQuotesSlice is a parsable slice of UserFamousQuotes.
type UserFamousQuotesSlice []*UserFamousQuotes
