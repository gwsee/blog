// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/account"
	"blog/internal/ent/predicate"
	"blog/internal/ent/travelextends"
	"blog/internal/ent/travels"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// TravelsUpdate is the builder for updating Travels entities.
type TravelsUpdate struct {
	config
	hooks    []Hook
	mutation *TravelsMutation
}

// Where appends a list predicates to the TravelsUpdate builder.
func (tu *TravelsUpdate) Where(ps ...predicate.Travels) *TravelsUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TravelsUpdate) SetUpdatedAt(i int64) *TravelsUpdate {
	tu.mutation.ResetUpdatedAt()
	tu.mutation.SetUpdatedAt(i)
	return tu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tu *TravelsUpdate) AddUpdatedAt(i int64) *TravelsUpdate {
	tu.mutation.AddUpdatedAt(i)
	return tu
}

// SetUpdatedBy sets the "updated_by" field.
func (tu *TravelsUpdate) SetUpdatedBy(i int64) *TravelsUpdate {
	tu.mutation.ResetUpdatedBy()
	tu.mutation.SetUpdatedBy(i)
	return tu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tu *TravelsUpdate) SetNillableUpdatedBy(i *int64) *TravelsUpdate {
	if i != nil {
		tu.SetUpdatedBy(*i)
	}
	return tu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (tu *TravelsUpdate) AddUpdatedBy(i int64) *TravelsUpdate {
	tu.mutation.AddUpdatedBy(i)
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TravelsUpdate) SetDeletedAt(i int64) *TravelsUpdate {
	tu.mutation.ResetDeletedAt()
	tu.mutation.SetDeletedAt(i)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TravelsUpdate) SetNillableDeletedAt(i *int64) *TravelsUpdate {
	if i != nil {
		tu.SetDeletedAt(*i)
	}
	return tu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (tu *TravelsUpdate) AddDeletedAt(i int64) *TravelsUpdate {
	tu.mutation.AddDeletedAt(i)
	return tu
}

// SetDeletedBy sets the "deleted_by" field.
func (tu *TravelsUpdate) SetDeletedBy(i int64) *TravelsUpdate {
	tu.mutation.ResetDeletedBy()
	tu.mutation.SetDeletedBy(i)
	return tu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tu *TravelsUpdate) SetNillableDeletedBy(i *int64) *TravelsUpdate {
	if i != nil {
		tu.SetDeletedBy(*i)
	}
	return tu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (tu *TravelsUpdate) AddDeletedBy(i int64) *TravelsUpdate {
	tu.mutation.AddDeletedBy(i)
	return tu
}

// SetTitle sets the "title" field.
func (tu *TravelsUpdate) SetTitle(s string) *TravelsUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TravelsUpdate) SetNillableTitle(s *string) *TravelsUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TravelsUpdate) SetDescription(s string) *TravelsUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TravelsUpdate) SetNillableDescription(s *string) *TravelsUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetVideo sets the "video" field.
func (tu *TravelsUpdate) SetVideo(s string) *TravelsUpdate {
	tu.mutation.SetVideo(s)
	return tu
}

// SetNillableVideo sets the "video" field if the given value is not nil.
func (tu *TravelsUpdate) SetNillableVideo(s *string) *TravelsUpdate {
	if s != nil {
		tu.SetVideo(*s)
	}
	return tu
}

// SetIsHidden sets the "is_hidden" field.
func (tu *TravelsUpdate) SetIsHidden(b bool) *TravelsUpdate {
	tu.mutation.SetIsHidden(b)
	return tu
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (tu *TravelsUpdate) SetNillableIsHidden(b *bool) *TravelsUpdate {
	if b != nil {
		tu.SetIsHidden(*b)
	}
	return tu
}

// SetAccountID sets the "account_id" field.
func (tu *TravelsUpdate) SetAccountID(i int) *TravelsUpdate {
	tu.mutation.SetAccountID(i)
	return tu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (tu *TravelsUpdate) SetNillableAccountID(i *int) *TravelsUpdate {
	if i != nil {
		tu.SetAccountID(*i)
	}
	return tu
}

// ClearAccountID clears the value of the "account_id" field.
func (tu *TravelsUpdate) ClearAccountID() *TravelsUpdate {
	tu.mutation.ClearAccountID()
	return tu
}

// SetPhotos sets the "photos" field.
func (tu *TravelsUpdate) SetPhotos(s []string) *TravelsUpdate {
	tu.mutation.SetPhotos(s)
	return tu
}

// AppendPhotos appends s to the "photos" field.
func (tu *TravelsUpdate) AppendPhotos(s []string) *TravelsUpdate {
	tu.mutation.AppendPhotos(s)
	return tu
}

// SetBrowseNum sets the "browse_num" field.
func (tu *TravelsUpdate) SetBrowseNum(i int) *TravelsUpdate {
	tu.mutation.ResetBrowseNum()
	tu.mutation.SetBrowseNum(i)
	return tu
}

// SetNillableBrowseNum sets the "browse_num" field if the given value is not nil.
func (tu *TravelsUpdate) SetNillableBrowseNum(i *int) *TravelsUpdate {
	if i != nil {
		tu.SetBrowseNum(*i)
	}
	return tu
}

// AddBrowseNum adds i to the "browse_num" field.
func (tu *TravelsUpdate) AddBrowseNum(i int) *TravelsUpdate {
	tu.mutation.AddBrowseNum(i)
	return tu
}

// SetThumbNum sets the "thumb_num" field.
func (tu *TravelsUpdate) SetThumbNum(i int) *TravelsUpdate {
	tu.mutation.ResetThumbNum()
	tu.mutation.SetThumbNum(i)
	return tu
}

// SetNillableThumbNum sets the "thumb_num" field if the given value is not nil.
func (tu *TravelsUpdate) SetNillableThumbNum(i *int) *TravelsUpdate {
	if i != nil {
		tu.SetThumbNum(*i)
	}
	return tu
}

// AddThumbNum adds i to the "thumb_num" field.
func (tu *TravelsUpdate) AddThumbNum(i int) *TravelsUpdate {
	tu.mutation.AddThumbNum(i)
	return tu
}

// SetCollectNum sets the "collect_num" field.
func (tu *TravelsUpdate) SetCollectNum(i int) *TravelsUpdate {
	tu.mutation.ResetCollectNum()
	tu.mutation.SetCollectNum(i)
	return tu
}

// SetNillableCollectNum sets the "collect_num" field if the given value is not nil.
func (tu *TravelsUpdate) SetNillableCollectNum(i *int) *TravelsUpdate {
	if i != nil {
		tu.SetCollectNum(*i)
	}
	return tu
}

// AddCollectNum adds i to the "collect_num" field.
func (tu *TravelsUpdate) AddCollectNum(i int) *TravelsUpdate {
	tu.mutation.AddCollectNum(i)
	return tu
}

// AddTravelExtendIDs adds the "travel_extends" edge to the TravelExtends entity by IDs.
func (tu *TravelsUpdate) AddTravelExtendIDs(ids ...int) *TravelsUpdate {
	tu.mutation.AddTravelExtendIDs(ids...)
	return tu
}

// AddTravelExtends adds the "travel_extends" edges to the TravelExtends entity.
func (tu *TravelsUpdate) AddTravelExtends(t ...*TravelExtends) *TravelsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTravelExtendIDs(ids...)
}

// SetTravelAccountID sets the "travel_account" edge to the Account entity by ID.
func (tu *TravelsUpdate) SetTravelAccountID(id int) *TravelsUpdate {
	tu.mutation.SetTravelAccountID(id)
	return tu
}

// SetNillableTravelAccountID sets the "travel_account" edge to the Account entity by ID if the given value is not nil.
func (tu *TravelsUpdate) SetNillableTravelAccountID(id *int) *TravelsUpdate {
	if id != nil {
		tu = tu.SetTravelAccountID(*id)
	}
	return tu
}

// SetTravelAccount sets the "travel_account" edge to the Account entity.
func (tu *TravelsUpdate) SetTravelAccount(a *Account) *TravelsUpdate {
	return tu.SetTravelAccountID(a.ID)
}

// Mutation returns the TravelsMutation object of the builder.
func (tu *TravelsUpdate) Mutation() *TravelsMutation {
	return tu.mutation
}

// ClearTravelExtends clears all "travel_extends" edges to the TravelExtends entity.
func (tu *TravelsUpdate) ClearTravelExtends() *TravelsUpdate {
	tu.mutation.ClearTravelExtends()
	return tu
}

// RemoveTravelExtendIDs removes the "travel_extends" edge to TravelExtends entities by IDs.
func (tu *TravelsUpdate) RemoveTravelExtendIDs(ids ...int) *TravelsUpdate {
	tu.mutation.RemoveTravelExtendIDs(ids...)
	return tu
}

// RemoveTravelExtends removes "travel_extends" edges to TravelExtends entities.
func (tu *TravelsUpdate) RemoveTravelExtends(t ...*TravelExtends) *TravelsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTravelExtendIDs(ids...)
}

// ClearTravelAccount clears the "travel_account" edge to the Account entity.
func (tu *TravelsUpdate) ClearTravelAccount() *TravelsUpdate {
	tu.mutation.ClearTravelAccount()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TravelsUpdate) Save(ctx context.Context) (int, error) {
	if err := tu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TravelsUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TravelsUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TravelsUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TravelsUpdate) defaults() error {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		if travels.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized travels.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := travels.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tu *TravelsUpdate) check() error {
	if v, ok := tu.mutation.Title(); ok {
		if err := travels.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Travels.title": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Description(); ok {
		if err := travels.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Travels.description": %w`, err)}
		}
	}
	return nil
}

func (tu *TravelsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(travels.Table, travels.Columns, sqlgraph.NewFieldSpec(travels.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(travels.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(travels.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.UpdatedBy(); ok {
		_spec.SetField(travels.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(travels.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.SetField(travels.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(travels.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.DeletedBy(); ok {
		_spec.SetField(travels.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(travels.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(travels.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(travels.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.Video(); ok {
		_spec.SetField(travels.FieldVideo, field.TypeString, value)
	}
	if value, ok := tu.mutation.IsHidden(); ok {
		_spec.SetField(travels.FieldIsHidden, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Photos(); ok {
		_spec.SetField(travels.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, travels.FieldPhotos, value)
		})
	}
	if value, ok := tu.mutation.BrowseNum(); ok {
		_spec.SetField(travels.FieldBrowseNum, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedBrowseNum(); ok {
		_spec.AddField(travels.FieldBrowseNum, field.TypeInt, value)
	}
	if value, ok := tu.mutation.ThumbNum(); ok {
		_spec.SetField(travels.FieldThumbNum, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedThumbNum(); ok {
		_spec.AddField(travels.FieldThumbNum, field.TypeInt, value)
	}
	if value, ok := tu.mutation.CollectNum(); ok {
		_spec.SetField(travels.FieldCollectNum, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedCollectNum(); ok {
		_spec.AddField(travels.FieldCollectNum, field.TypeInt, value)
	}
	if tu.mutation.TravelExtendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   travels.TravelExtendsTable,
			Columns: []string{travels.TravelExtendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travelextends.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTravelExtendsIDs(); len(nodes) > 0 && !tu.mutation.TravelExtendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   travels.TravelExtendsTable,
			Columns: []string{travels.TravelExtendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travelextends.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TravelExtendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   travels.TravelExtendsTable,
			Columns: []string{travels.TravelExtendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travelextends.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TravelAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   travels.TravelAccountTable,
			Columns: []string{travels.TravelAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TravelAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   travels.TravelAccountTable,
			Columns: []string{travels.TravelAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{travels.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TravelsUpdateOne is the builder for updating a single Travels entity.
type TravelsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TravelsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TravelsUpdateOne) SetUpdatedAt(i int64) *TravelsUpdateOne {
	tuo.mutation.ResetUpdatedAt()
	tuo.mutation.SetUpdatedAt(i)
	return tuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tuo *TravelsUpdateOne) AddUpdatedAt(i int64) *TravelsUpdateOne {
	tuo.mutation.AddUpdatedAt(i)
	return tuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tuo *TravelsUpdateOne) SetUpdatedBy(i int64) *TravelsUpdateOne {
	tuo.mutation.ResetUpdatedBy()
	tuo.mutation.SetUpdatedBy(i)
	return tuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tuo *TravelsUpdateOne) SetNillableUpdatedBy(i *int64) *TravelsUpdateOne {
	if i != nil {
		tuo.SetUpdatedBy(*i)
	}
	return tuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (tuo *TravelsUpdateOne) AddUpdatedBy(i int64) *TravelsUpdateOne {
	tuo.mutation.AddUpdatedBy(i)
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TravelsUpdateOne) SetDeletedAt(i int64) *TravelsUpdateOne {
	tuo.mutation.ResetDeletedAt()
	tuo.mutation.SetDeletedAt(i)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TravelsUpdateOne) SetNillableDeletedAt(i *int64) *TravelsUpdateOne {
	if i != nil {
		tuo.SetDeletedAt(*i)
	}
	return tuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (tuo *TravelsUpdateOne) AddDeletedAt(i int64) *TravelsUpdateOne {
	tuo.mutation.AddDeletedAt(i)
	return tuo
}

// SetDeletedBy sets the "deleted_by" field.
func (tuo *TravelsUpdateOne) SetDeletedBy(i int64) *TravelsUpdateOne {
	tuo.mutation.ResetDeletedBy()
	tuo.mutation.SetDeletedBy(i)
	return tuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tuo *TravelsUpdateOne) SetNillableDeletedBy(i *int64) *TravelsUpdateOne {
	if i != nil {
		tuo.SetDeletedBy(*i)
	}
	return tuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (tuo *TravelsUpdateOne) AddDeletedBy(i int64) *TravelsUpdateOne {
	tuo.mutation.AddDeletedBy(i)
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TravelsUpdateOne) SetTitle(s string) *TravelsUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TravelsUpdateOne) SetNillableTitle(s *string) *TravelsUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TravelsUpdateOne) SetDescription(s string) *TravelsUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TravelsUpdateOne) SetNillableDescription(s *string) *TravelsUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetVideo sets the "video" field.
func (tuo *TravelsUpdateOne) SetVideo(s string) *TravelsUpdateOne {
	tuo.mutation.SetVideo(s)
	return tuo
}

// SetNillableVideo sets the "video" field if the given value is not nil.
func (tuo *TravelsUpdateOne) SetNillableVideo(s *string) *TravelsUpdateOne {
	if s != nil {
		tuo.SetVideo(*s)
	}
	return tuo
}

// SetIsHidden sets the "is_hidden" field.
func (tuo *TravelsUpdateOne) SetIsHidden(b bool) *TravelsUpdateOne {
	tuo.mutation.SetIsHidden(b)
	return tuo
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (tuo *TravelsUpdateOne) SetNillableIsHidden(b *bool) *TravelsUpdateOne {
	if b != nil {
		tuo.SetIsHidden(*b)
	}
	return tuo
}

// SetAccountID sets the "account_id" field.
func (tuo *TravelsUpdateOne) SetAccountID(i int) *TravelsUpdateOne {
	tuo.mutation.SetAccountID(i)
	return tuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (tuo *TravelsUpdateOne) SetNillableAccountID(i *int) *TravelsUpdateOne {
	if i != nil {
		tuo.SetAccountID(*i)
	}
	return tuo
}

// ClearAccountID clears the value of the "account_id" field.
func (tuo *TravelsUpdateOne) ClearAccountID() *TravelsUpdateOne {
	tuo.mutation.ClearAccountID()
	return tuo
}

// SetPhotos sets the "photos" field.
func (tuo *TravelsUpdateOne) SetPhotos(s []string) *TravelsUpdateOne {
	tuo.mutation.SetPhotos(s)
	return tuo
}

// AppendPhotos appends s to the "photos" field.
func (tuo *TravelsUpdateOne) AppendPhotos(s []string) *TravelsUpdateOne {
	tuo.mutation.AppendPhotos(s)
	return tuo
}

// SetBrowseNum sets the "browse_num" field.
func (tuo *TravelsUpdateOne) SetBrowseNum(i int) *TravelsUpdateOne {
	tuo.mutation.ResetBrowseNum()
	tuo.mutation.SetBrowseNum(i)
	return tuo
}

// SetNillableBrowseNum sets the "browse_num" field if the given value is not nil.
func (tuo *TravelsUpdateOne) SetNillableBrowseNum(i *int) *TravelsUpdateOne {
	if i != nil {
		tuo.SetBrowseNum(*i)
	}
	return tuo
}

// AddBrowseNum adds i to the "browse_num" field.
func (tuo *TravelsUpdateOne) AddBrowseNum(i int) *TravelsUpdateOne {
	tuo.mutation.AddBrowseNum(i)
	return tuo
}

// SetThumbNum sets the "thumb_num" field.
func (tuo *TravelsUpdateOne) SetThumbNum(i int) *TravelsUpdateOne {
	tuo.mutation.ResetThumbNum()
	tuo.mutation.SetThumbNum(i)
	return tuo
}

// SetNillableThumbNum sets the "thumb_num" field if the given value is not nil.
func (tuo *TravelsUpdateOne) SetNillableThumbNum(i *int) *TravelsUpdateOne {
	if i != nil {
		tuo.SetThumbNum(*i)
	}
	return tuo
}

// AddThumbNum adds i to the "thumb_num" field.
func (tuo *TravelsUpdateOne) AddThumbNum(i int) *TravelsUpdateOne {
	tuo.mutation.AddThumbNum(i)
	return tuo
}

// SetCollectNum sets the "collect_num" field.
func (tuo *TravelsUpdateOne) SetCollectNum(i int) *TravelsUpdateOne {
	tuo.mutation.ResetCollectNum()
	tuo.mutation.SetCollectNum(i)
	return tuo
}

// SetNillableCollectNum sets the "collect_num" field if the given value is not nil.
func (tuo *TravelsUpdateOne) SetNillableCollectNum(i *int) *TravelsUpdateOne {
	if i != nil {
		tuo.SetCollectNum(*i)
	}
	return tuo
}

// AddCollectNum adds i to the "collect_num" field.
func (tuo *TravelsUpdateOne) AddCollectNum(i int) *TravelsUpdateOne {
	tuo.mutation.AddCollectNum(i)
	return tuo
}

// AddTravelExtendIDs adds the "travel_extends" edge to the TravelExtends entity by IDs.
func (tuo *TravelsUpdateOne) AddTravelExtendIDs(ids ...int) *TravelsUpdateOne {
	tuo.mutation.AddTravelExtendIDs(ids...)
	return tuo
}

// AddTravelExtends adds the "travel_extends" edges to the TravelExtends entity.
func (tuo *TravelsUpdateOne) AddTravelExtends(t ...*TravelExtends) *TravelsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTravelExtendIDs(ids...)
}

// SetTravelAccountID sets the "travel_account" edge to the Account entity by ID.
func (tuo *TravelsUpdateOne) SetTravelAccountID(id int) *TravelsUpdateOne {
	tuo.mutation.SetTravelAccountID(id)
	return tuo
}

// SetNillableTravelAccountID sets the "travel_account" edge to the Account entity by ID if the given value is not nil.
func (tuo *TravelsUpdateOne) SetNillableTravelAccountID(id *int) *TravelsUpdateOne {
	if id != nil {
		tuo = tuo.SetTravelAccountID(*id)
	}
	return tuo
}

// SetTravelAccount sets the "travel_account" edge to the Account entity.
func (tuo *TravelsUpdateOne) SetTravelAccount(a *Account) *TravelsUpdateOne {
	return tuo.SetTravelAccountID(a.ID)
}

// Mutation returns the TravelsMutation object of the builder.
func (tuo *TravelsUpdateOne) Mutation() *TravelsMutation {
	return tuo.mutation
}

// ClearTravelExtends clears all "travel_extends" edges to the TravelExtends entity.
func (tuo *TravelsUpdateOne) ClearTravelExtends() *TravelsUpdateOne {
	tuo.mutation.ClearTravelExtends()
	return tuo
}

// RemoveTravelExtendIDs removes the "travel_extends" edge to TravelExtends entities by IDs.
func (tuo *TravelsUpdateOne) RemoveTravelExtendIDs(ids ...int) *TravelsUpdateOne {
	tuo.mutation.RemoveTravelExtendIDs(ids...)
	return tuo
}

// RemoveTravelExtends removes "travel_extends" edges to TravelExtends entities.
func (tuo *TravelsUpdateOne) RemoveTravelExtends(t ...*TravelExtends) *TravelsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTravelExtendIDs(ids...)
}

// ClearTravelAccount clears the "travel_account" edge to the Account entity.
func (tuo *TravelsUpdateOne) ClearTravelAccount() *TravelsUpdateOne {
	tuo.mutation.ClearTravelAccount()
	return tuo
}

// Where appends a list predicates to the TravelsUpdate builder.
func (tuo *TravelsUpdateOne) Where(ps ...predicate.Travels) *TravelsUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TravelsUpdateOne) Select(field string, fields ...string) *TravelsUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Travels entity.
func (tuo *TravelsUpdateOne) Save(ctx context.Context) (*Travels, error) {
	if err := tuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TravelsUpdateOne) SaveX(ctx context.Context) *Travels {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TravelsUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TravelsUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TravelsUpdateOne) defaults() error {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		if travels.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized travels.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := travels.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TravelsUpdateOne) check() error {
	if v, ok := tuo.mutation.Title(); ok {
		if err := travels.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Travels.title": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Description(); ok {
		if err := travels.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Travels.description": %w`, err)}
		}
	}
	return nil
}

func (tuo *TravelsUpdateOne) sqlSave(ctx context.Context) (_node *Travels, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(travels.Table, travels.Columns, sqlgraph.NewFieldSpec(travels.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Travels.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, travels.FieldID)
		for _, f := range fields {
			if !travels.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != travels.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(travels.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(travels.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.UpdatedBy(); ok {
		_spec.SetField(travels.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(travels.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.SetField(travels.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(travels.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.DeletedBy(); ok {
		_spec.SetField(travels.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(travels.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(travels.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(travels.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Video(); ok {
		_spec.SetField(travels.FieldVideo, field.TypeString, value)
	}
	if value, ok := tuo.mutation.IsHidden(); ok {
		_spec.SetField(travels.FieldIsHidden, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Photos(); ok {
		_spec.SetField(travels.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, travels.FieldPhotos, value)
		})
	}
	if value, ok := tuo.mutation.BrowseNum(); ok {
		_spec.SetField(travels.FieldBrowseNum, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedBrowseNum(); ok {
		_spec.AddField(travels.FieldBrowseNum, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.ThumbNum(); ok {
		_spec.SetField(travels.FieldThumbNum, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedThumbNum(); ok {
		_spec.AddField(travels.FieldThumbNum, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.CollectNum(); ok {
		_spec.SetField(travels.FieldCollectNum, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedCollectNum(); ok {
		_spec.AddField(travels.FieldCollectNum, field.TypeInt, value)
	}
	if tuo.mutation.TravelExtendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   travels.TravelExtendsTable,
			Columns: []string{travels.TravelExtendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travelextends.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTravelExtendsIDs(); len(nodes) > 0 && !tuo.mutation.TravelExtendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   travels.TravelExtendsTable,
			Columns: []string{travels.TravelExtendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travelextends.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TravelExtendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   travels.TravelExtendsTable,
			Columns: []string{travels.TravelExtendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travelextends.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TravelAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   travels.TravelAccountTable,
			Columns: []string{travels.TravelAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TravelAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   travels.TravelAccountTable,
			Columns: []string{travels.TravelAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Travels{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{travels.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
