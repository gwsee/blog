// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/accountproject"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountProjectCreate is the builder for creating a AccountProject entity.
type AccountProjectCreate struct {
	config
	mutation *AccountProjectMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (apc *AccountProjectCreate) SetCreatedAt(i int64) *AccountProjectCreate {
	apc.mutation.SetCreatedAt(i)
	return apc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (apc *AccountProjectCreate) SetNillableCreatedAt(i *int64) *AccountProjectCreate {
	if i != nil {
		apc.SetCreatedAt(*i)
	}
	return apc
}

// SetCreatedBy sets the "created_by" field.
func (apc *AccountProjectCreate) SetCreatedBy(i int64) *AccountProjectCreate {
	apc.mutation.SetCreatedBy(i)
	return apc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (apc *AccountProjectCreate) SetNillableCreatedBy(i *int64) *AccountProjectCreate {
	if i != nil {
		apc.SetCreatedBy(*i)
	}
	return apc
}

// SetUpdatedAt sets the "updated_at" field.
func (apc *AccountProjectCreate) SetUpdatedAt(i int64) *AccountProjectCreate {
	apc.mutation.SetUpdatedAt(i)
	return apc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (apc *AccountProjectCreate) SetNillableUpdatedAt(i *int64) *AccountProjectCreate {
	if i != nil {
		apc.SetUpdatedAt(*i)
	}
	return apc
}

// SetUpdatedBy sets the "updated_by" field.
func (apc *AccountProjectCreate) SetUpdatedBy(i int64) *AccountProjectCreate {
	apc.mutation.SetUpdatedBy(i)
	return apc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (apc *AccountProjectCreate) SetNillableUpdatedBy(i *int64) *AccountProjectCreate {
	if i != nil {
		apc.SetUpdatedBy(*i)
	}
	return apc
}

// SetDeletedAt sets the "deleted_at" field.
func (apc *AccountProjectCreate) SetDeletedAt(i int64) *AccountProjectCreate {
	apc.mutation.SetDeletedAt(i)
	return apc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (apc *AccountProjectCreate) SetNillableDeletedAt(i *int64) *AccountProjectCreate {
	if i != nil {
		apc.SetDeletedAt(*i)
	}
	return apc
}

// SetDeletedBy sets the "deleted_by" field.
func (apc *AccountProjectCreate) SetDeletedBy(i int64) *AccountProjectCreate {
	apc.mutation.SetDeletedBy(i)
	return apc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (apc *AccountProjectCreate) SetNillableDeletedBy(i *int64) *AccountProjectCreate {
	if i != nil {
		apc.SetDeletedBy(*i)
	}
	return apc
}

// SetUserID sets the "user_id" field.
func (apc *AccountProjectCreate) SetUserID(i int) *AccountProjectCreate {
	apc.mutation.SetUserID(i)
	return apc
}

// SetExperienceID sets the "experience_id" field.
func (apc *AccountProjectCreate) SetExperienceID(i int) *AccountProjectCreate {
	apc.mutation.SetExperienceID(i)
	return apc
}

// SetTitle sets the "title" field.
func (apc *AccountProjectCreate) SetTitle(s string) *AccountProjectCreate {
	apc.mutation.SetTitle(s)
	return apc
}

// SetDescription sets the "description" field.
func (apc *AccountProjectCreate) SetDescription(s string) *AccountProjectCreate {
	apc.mutation.SetDescription(s)
	return apc
}

// SetSkills sets the "skills" field.
func (apc *AccountProjectCreate) SetSkills(s []string) *AccountProjectCreate {
	apc.mutation.SetSkills(s)
	return apc
}

// SetStart sets the "start" field.
func (apc *AccountProjectCreate) SetStart(i int64) *AccountProjectCreate {
	apc.mutation.SetStart(i)
	return apc
}

// SetEnd sets the "end" field.
func (apc *AccountProjectCreate) SetEnd(i int64) *AccountProjectCreate {
	apc.mutation.SetEnd(i)
	return apc
}

// SetLink sets the "link" field.
func (apc *AccountProjectCreate) SetLink(s string) *AccountProjectCreate {
	apc.mutation.SetLink(s)
	return apc
}

// SetPhotos sets the "photos" field.
func (apc *AccountProjectCreate) SetPhotos(s []string) *AccountProjectCreate {
	apc.mutation.SetPhotos(s)
	return apc
}

// SetID sets the "id" field.
func (apc *AccountProjectCreate) SetID(i int) *AccountProjectCreate {
	apc.mutation.SetID(i)
	return apc
}

// Mutation returns the AccountProjectMutation object of the builder.
func (apc *AccountProjectCreate) Mutation() *AccountProjectMutation {
	return apc.mutation
}

// Save creates the AccountProject in the database.
func (apc *AccountProjectCreate) Save(ctx context.Context) (*AccountProject, error) {
	if err := apc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, apc.sqlSave, apc.mutation, apc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (apc *AccountProjectCreate) SaveX(ctx context.Context) *AccountProject {
	v, err := apc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apc *AccountProjectCreate) Exec(ctx context.Context) error {
	_, err := apc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apc *AccountProjectCreate) ExecX(ctx context.Context) {
	if err := apc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apc *AccountProjectCreate) defaults() error {
	if _, ok := apc.mutation.CreatedAt(); !ok {
		v := accountproject.DefaultCreatedAt
		apc.mutation.SetCreatedAt(v)
	}
	if _, ok := apc.mutation.CreatedBy(); !ok {
		v := accountproject.DefaultCreatedBy
		apc.mutation.SetCreatedBy(v)
	}
	if _, ok := apc.mutation.UpdatedAt(); !ok {
		v := accountproject.DefaultUpdatedAt
		apc.mutation.SetUpdatedAt(v)
	}
	if _, ok := apc.mutation.UpdatedBy(); !ok {
		v := accountproject.DefaultUpdatedBy
		apc.mutation.SetUpdatedBy(v)
	}
	if _, ok := apc.mutation.DeletedAt(); !ok {
		v := accountproject.DefaultDeletedAt
		apc.mutation.SetDeletedAt(v)
	}
	if _, ok := apc.mutation.DeletedBy(); !ok {
		v := accountproject.DefaultDeletedBy
		apc.mutation.SetDeletedBy(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (apc *AccountProjectCreate) check() error {
	if _, ok := apc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AccountProject.created_at"`)}
	}
	if _, ok := apc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "AccountProject.created_by"`)}
	}
	if _, ok := apc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AccountProject.updated_at"`)}
	}
	if _, ok := apc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "AccountProject.updated_by"`)}
	}
	if _, ok := apc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "AccountProject.deleted_at"`)}
	}
	if _, ok := apc.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "AccountProject.deleted_by"`)}
	}
	if _, ok := apc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AccountProject.user_id"`)}
	}
	if _, ok := apc.mutation.ExperienceID(); !ok {
		return &ValidationError{Name: "experience_id", err: errors.New(`ent: missing required field "AccountProject.experience_id"`)}
	}
	if _, ok := apc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "AccountProject.title"`)}
	}
	if _, ok := apc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "AccountProject.description"`)}
	}
	if _, ok := apc.mutation.Skills(); !ok {
		return &ValidationError{Name: "skills", err: errors.New(`ent: missing required field "AccountProject.skills"`)}
	}
	if _, ok := apc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "AccountProject.start"`)}
	}
	if _, ok := apc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "AccountProject.end"`)}
	}
	if _, ok := apc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "AccountProject.link"`)}
	}
	if _, ok := apc.mutation.Photos(); !ok {
		return &ValidationError{Name: "photos", err: errors.New(`ent: missing required field "AccountProject.photos"`)}
	}
	if v, ok := apc.mutation.ID(); ok {
		if err := accountproject.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "AccountProject.id": %w`, err)}
		}
	}
	return nil
}

func (apc *AccountProjectCreate) sqlSave(ctx context.Context) (*AccountProject, error) {
	if err := apc.check(); err != nil {
		return nil, err
	}
	_node, _spec := apc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	apc.mutation.id = &_node.ID
	apc.mutation.done = true
	return _node, nil
}

func (apc *AccountProjectCreate) createSpec() (*AccountProject, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountProject{config: apc.config}
		_spec = sqlgraph.NewCreateSpec(accountproject.Table, sqlgraph.NewFieldSpec(accountproject.FieldID, field.TypeInt))
	)
	_spec.OnConflict = apc.conflict
	if id, ok := apc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := apc.mutation.CreatedAt(); ok {
		_spec.SetField(accountproject.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := apc.mutation.CreatedBy(); ok {
		_spec.SetField(accountproject.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := apc.mutation.UpdatedAt(); ok {
		_spec.SetField(accountproject.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := apc.mutation.UpdatedBy(); ok {
		_spec.SetField(accountproject.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := apc.mutation.DeletedAt(); ok {
		_spec.SetField(accountproject.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := apc.mutation.DeletedBy(); ok {
		_spec.SetField(accountproject.FieldDeletedBy, field.TypeInt64, value)
		_node.DeletedBy = value
	}
	if value, ok := apc.mutation.UserID(); ok {
		_spec.SetField(accountproject.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := apc.mutation.ExperienceID(); ok {
		_spec.SetField(accountproject.FieldExperienceID, field.TypeInt, value)
		_node.ExperienceID = value
	}
	if value, ok := apc.mutation.Title(); ok {
		_spec.SetField(accountproject.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := apc.mutation.Description(); ok {
		_spec.SetField(accountproject.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := apc.mutation.Skills(); ok {
		_spec.SetField(accountproject.FieldSkills, field.TypeJSON, value)
		_node.Skills = value
	}
	if value, ok := apc.mutation.Start(); ok {
		_spec.SetField(accountproject.FieldStart, field.TypeInt64, value)
		_node.Start = value
	}
	if value, ok := apc.mutation.End(); ok {
		_spec.SetField(accountproject.FieldEnd, field.TypeInt64, value)
		_node.End = value
	}
	if value, ok := apc.mutation.Link(); ok {
		_spec.SetField(accountproject.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := apc.mutation.Photos(); ok {
		_spec.SetField(accountproject.FieldPhotos, field.TypeJSON, value)
		_node.Photos = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccountProject.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountProjectUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (apc *AccountProjectCreate) OnConflict(opts ...sql.ConflictOption) *AccountProjectUpsertOne {
	apc.conflict = opts
	return &AccountProjectUpsertOne{
		create: apc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccountProject.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (apc *AccountProjectCreate) OnConflictColumns(columns ...string) *AccountProjectUpsertOne {
	apc.conflict = append(apc.conflict, sql.ConflictColumns(columns...))
	return &AccountProjectUpsertOne{
		create: apc,
	}
}

type (
	// AccountProjectUpsertOne is the builder for "upsert"-ing
	//  one AccountProject node.
	AccountProjectUpsertOne struct {
		create *AccountProjectCreate
	}

	// AccountProjectUpsert is the "OnConflict" setter.
	AccountProjectUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AccountProjectUpsert) SetUpdatedAt(v int64) *AccountProjectUpsert {
	u.Set(accountproject.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AccountProjectUpsert) UpdateUpdatedAt() *AccountProjectUpsert {
	u.SetExcluded(accountproject.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AccountProjectUpsert) AddUpdatedAt(v int64) *AccountProjectUpsert {
	u.Add(accountproject.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *AccountProjectUpsert) SetUpdatedBy(v int64) *AccountProjectUpsert {
	u.Set(accountproject.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *AccountProjectUpsert) UpdateUpdatedBy() *AccountProjectUpsert {
	u.SetExcluded(accountproject.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *AccountProjectUpsert) AddUpdatedBy(v int64) *AccountProjectUpsert {
	u.Add(accountproject.FieldUpdatedBy, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AccountProjectUpsert) SetDeletedAt(v int64) *AccountProjectUpsert {
	u.Set(accountproject.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AccountProjectUpsert) UpdateDeletedAt() *AccountProjectUpsert {
	u.SetExcluded(accountproject.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AccountProjectUpsert) AddDeletedAt(v int64) *AccountProjectUpsert {
	u.Add(accountproject.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *AccountProjectUpsert) SetDeletedBy(v int64) *AccountProjectUpsert {
	u.Set(accountproject.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *AccountProjectUpsert) UpdateDeletedBy() *AccountProjectUpsert {
	u.SetExcluded(accountproject.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *AccountProjectUpsert) AddDeletedBy(v int64) *AccountProjectUpsert {
	u.Add(accountproject.FieldDeletedBy, v)
	return u
}

// SetUserID sets the "user_id" field.
func (u *AccountProjectUpsert) SetUserID(v int) *AccountProjectUpsert {
	u.Set(accountproject.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AccountProjectUpsert) UpdateUserID() *AccountProjectUpsert {
	u.SetExcluded(accountproject.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *AccountProjectUpsert) AddUserID(v int) *AccountProjectUpsert {
	u.Add(accountproject.FieldUserID, v)
	return u
}

// SetExperienceID sets the "experience_id" field.
func (u *AccountProjectUpsert) SetExperienceID(v int) *AccountProjectUpsert {
	u.Set(accountproject.FieldExperienceID, v)
	return u
}

// UpdateExperienceID sets the "experience_id" field to the value that was provided on create.
func (u *AccountProjectUpsert) UpdateExperienceID() *AccountProjectUpsert {
	u.SetExcluded(accountproject.FieldExperienceID)
	return u
}

// AddExperienceID adds v to the "experience_id" field.
func (u *AccountProjectUpsert) AddExperienceID(v int) *AccountProjectUpsert {
	u.Add(accountproject.FieldExperienceID, v)
	return u
}

// SetTitle sets the "title" field.
func (u *AccountProjectUpsert) SetTitle(v string) *AccountProjectUpsert {
	u.Set(accountproject.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AccountProjectUpsert) UpdateTitle() *AccountProjectUpsert {
	u.SetExcluded(accountproject.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *AccountProjectUpsert) SetDescription(v string) *AccountProjectUpsert {
	u.Set(accountproject.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AccountProjectUpsert) UpdateDescription() *AccountProjectUpsert {
	u.SetExcluded(accountproject.FieldDescription)
	return u
}

// SetSkills sets the "skills" field.
func (u *AccountProjectUpsert) SetSkills(v []string) *AccountProjectUpsert {
	u.Set(accountproject.FieldSkills, v)
	return u
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *AccountProjectUpsert) UpdateSkills() *AccountProjectUpsert {
	u.SetExcluded(accountproject.FieldSkills)
	return u
}

// SetStart sets the "start" field.
func (u *AccountProjectUpsert) SetStart(v int64) *AccountProjectUpsert {
	u.Set(accountproject.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *AccountProjectUpsert) UpdateStart() *AccountProjectUpsert {
	u.SetExcluded(accountproject.FieldStart)
	return u
}

// AddStart adds v to the "start" field.
func (u *AccountProjectUpsert) AddStart(v int64) *AccountProjectUpsert {
	u.Add(accountproject.FieldStart, v)
	return u
}

// SetEnd sets the "end" field.
func (u *AccountProjectUpsert) SetEnd(v int64) *AccountProjectUpsert {
	u.Set(accountproject.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *AccountProjectUpsert) UpdateEnd() *AccountProjectUpsert {
	u.SetExcluded(accountproject.FieldEnd)
	return u
}

// AddEnd adds v to the "end" field.
func (u *AccountProjectUpsert) AddEnd(v int64) *AccountProjectUpsert {
	u.Add(accountproject.FieldEnd, v)
	return u
}

// SetLink sets the "link" field.
func (u *AccountProjectUpsert) SetLink(v string) *AccountProjectUpsert {
	u.Set(accountproject.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *AccountProjectUpsert) UpdateLink() *AccountProjectUpsert {
	u.SetExcluded(accountproject.FieldLink)
	return u
}

// SetPhotos sets the "photos" field.
func (u *AccountProjectUpsert) SetPhotos(v []string) *AccountProjectUpsert {
	u.Set(accountproject.FieldPhotos, v)
	return u
}

// UpdatePhotos sets the "photos" field to the value that was provided on create.
func (u *AccountProjectUpsert) UpdatePhotos() *AccountProjectUpsert {
	u.SetExcluded(accountproject.FieldPhotos)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AccountProject.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(accountproject.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AccountProjectUpsertOne) UpdateNewValues() *AccountProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(accountproject.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(accountproject.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(accountproject.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AccountProject.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AccountProjectUpsertOne) Ignore() *AccountProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountProjectUpsertOne) DoNothing() *AccountProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountProjectCreate.OnConflict
// documentation for more info.
func (u *AccountProjectUpsertOne) Update(set func(*AccountProjectUpsert)) *AccountProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AccountProjectUpsertOne) SetUpdatedAt(v int64) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AccountProjectUpsertOne) AddUpdatedAt(v int64) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AccountProjectUpsertOne) UpdateUpdatedAt() *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *AccountProjectUpsertOne) SetUpdatedBy(v int64) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *AccountProjectUpsertOne) AddUpdatedBy(v int64) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *AccountProjectUpsertOne) UpdateUpdatedBy() *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AccountProjectUpsertOne) SetDeletedAt(v int64) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AccountProjectUpsertOne) AddDeletedAt(v int64) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AccountProjectUpsertOne) UpdateDeletedAt() *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *AccountProjectUpsertOne) SetDeletedBy(v int64) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *AccountProjectUpsertOne) AddDeletedBy(v int64) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *AccountProjectUpsertOne) UpdateDeletedBy() *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetUserID sets the "user_id" field.
func (u *AccountProjectUpsertOne) SetUserID(v int) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *AccountProjectUpsertOne) AddUserID(v int) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AccountProjectUpsertOne) UpdateUserID() *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateUserID()
	})
}

// SetExperienceID sets the "experience_id" field.
func (u *AccountProjectUpsertOne) SetExperienceID(v int) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetExperienceID(v)
	})
}

// AddExperienceID adds v to the "experience_id" field.
func (u *AccountProjectUpsertOne) AddExperienceID(v int) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddExperienceID(v)
	})
}

// UpdateExperienceID sets the "experience_id" field to the value that was provided on create.
func (u *AccountProjectUpsertOne) UpdateExperienceID() *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateExperienceID()
	})
}

// SetTitle sets the "title" field.
func (u *AccountProjectUpsertOne) SetTitle(v string) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AccountProjectUpsertOne) UpdateTitle() *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *AccountProjectUpsertOne) SetDescription(v string) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AccountProjectUpsertOne) UpdateDescription() *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateDescription()
	})
}

// SetSkills sets the "skills" field.
func (u *AccountProjectUpsertOne) SetSkills(v []string) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetSkills(v)
	})
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *AccountProjectUpsertOne) UpdateSkills() *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateSkills()
	})
}

// SetStart sets the "start" field.
func (u *AccountProjectUpsertOne) SetStart(v int64) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *AccountProjectUpsertOne) AddStart(v int64) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *AccountProjectUpsertOne) UpdateStart() *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *AccountProjectUpsertOne) SetEnd(v int64) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *AccountProjectUpsertOne) AddEnd(v int64) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *AccountProjectUpsertOne) UpdateEnd() *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateEnd()
	})
}

// SetLink sets the "link" field.
func (u *AccountProjectUpsertOne) SetLink(v string) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *AccountProjectUpsertOne) UpdateLink() *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateLink()
	})
}

// SetPhotos sets the "photos" field.
func (u *AccountProjectUpsertOne) SetPhotos(v []string) *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetPhotos(v)
	})
}

// UpdatePhotos sets the "photos" field to the value that was provided on create.
func (u *AccountProjectUpsertOne) UpdatePhotos() *AccountProjectUpsertOne {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdatePhotos()
	})
}

// Exec executes the query.
func (u *AccountProjectUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountProjectCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountProjectUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AccountProjectUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AccountProjectUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AccountProjectCreateBulk is the builder for creating many AccountProject entities in bulk.
type AccountProjectCreateBulk struct {
	config
	err      error
	builders []*AccountProjectCreate
	conflict []sql.ConflictOption
}

// Save creates the AccountProject entities in the database.
func (apcb *AccountProjectCreateBulk) Save(ctx context.Context) ([]*AccountProject, error) {
	if apcb.err != nil {
		return nil, apcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(apcb.builders))
	nodes := make([]*AccountProject, len(apcb.builders))
	mutators := make([]Mutator, len(apcb.builders))
	for i := range apcb.builders {
		func(i int, root context.Context) {
			builder := apcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = apcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apcb *AccountProjectCreateBulk) SaveX(ctx context.Context) []*AccountProject {
	v, err := apcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apcb *AccountProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := apcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apcb *AccountProjectCreateBulk) ExecX(ctx context.Context) {
	if err := apcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccountProject.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountProjectUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (apcb *AccountProjectCreateBulk) OnConflict(opts ...sql.ConflictOption) *AccountProjectUpsertBulk {
	apcb.conflict = opts
	return &AccountProjectUpsertBulk{
		create: apcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccountProject.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (apcb *AccountProjectCreateBulk) OnConflictColumns(columns ...string) *AccountProjectUpsertBulk {
	apcb.conflict = append(apcb.conflict, sql.ConflictColumns(columns...))
	return &AccountProjectUpsertBulk{
		create: apcb,
	}
}

// AccountProjectUpsertBulk is the builder for "upsert"-ing
// a bulk of AccountProject nodes.
type AccountProjectUpsertBulk struct {
	create *AccountProjectCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AccountProject.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(accountproject.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AccountProjectUpsertBulk) UpdateNewValues() *AccountProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(accountproject.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(accountproject.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(accountproject.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AccountProject.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AccountProjectUpsertBulk) Ignore() *AccountProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountProjectUpsertBulk) DoNothing() *AccountProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountProjectCreateBulk.OnConflict
// documentation for more info.
func (u *AccountProjectUpsertBulk) Update(set func(*AccountProjectUpsert)) *AccountProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AccountProjectUpsertBulk) SetUpdatedAt(v int64) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AccountProjectUpsertBulk) AddUpdatedAt(v int64) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AccountProjectUpsertBulk) UpdateUpdatedAt() *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *AccountProjectUpsertBulk) SetUpdatedBy(v int64) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *AccountProjectUpsertBulk) AddUpdatedBy(v int64) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *AccountProjectUpsertBulk) UpdateUpdatedBy() *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AccountProjectUpsertBulk) SetDeletedAt(v int64) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AccountProjectUpsertBulk) AddDeletedAt(v int64) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AccountProjectUpsertBulk) UpdateDeletedAt() *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *AccountProjectUpsertBulk) SetDeletedBy(v int64) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *AccountProjectUpsertBulk) AddDeletedBy(v int64) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *AccountProjectUpsertBulk) UpdateDeletedBy() *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetUserID sets the "user_id" field.
func (u *AccountProjectUpsertBulk) SetUserID(v int) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *AccountProjectUpsertBulk) AddUserID(v int) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AccountProjectUpsertBulk) UpdateUserID() *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateUserID()
	})
}

// SetExperienceID sets the "experience_id" field.
func (u *AccountProjectUpsertBulk) SetExperienceID(v int) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetExperienceID(v)
	})
}

// AddExperienceID adds v to the "experience_id" field.
func (u *AccountProjectUpsertBulk) AddExperienceID(v int) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddExperienceID(v)
	})
}

// UpdateExperienceID sets the "experience_id" field to the value that was provided on create.
func (u *AccountProjectUpsertBulk) UpdateExperienceID() *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateExperienceID()
	})
}

// SetTitle sets the "title" field.
func (u *AccountProjectUpsertBulk) SetTitle(v string) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AccountProjectUpsertBulk) UpdateTitle() *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *AccountProjectUpsertBulk) SetDescription(v string) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AccountProjectUpsertBulk) UpdateDescription() *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateDescription()
	})
}

// SetSkills sets the "skills" field.
func (u *AccountProjectUpsertBulk) SetSkills(v []string) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetSkills(v)
	})
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *AccountProjectUpsertBulk) UpdateSkills() *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateSkills()
	})
}

// SetStart sets the "start" field.
func (u *AccountProjectUpsertBulk) SetStart(v int64) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *AccountProjectUpsertBulk) AddStart(v int64) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *AccountProjectUpsertBulk) UpdateStart() *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *AccountProjectUpsertBulk) SetEnd(v int64) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *AccountProjectUpsertBulk) AddEnd(v int64) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *AccountProjectUpsertBulk) UpdateEnd() *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateEnd()
	})
}

// SetLink sets the "link" field.
func (u *AccountProjectUpsertBulk) SetLink(v string) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *AccountProjectUpsertBulk) UpdateLink() *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdateLink()
	})
}

// SetPhotos sets the "photos" field.
func (u *AccountProjectUpsertBulk) SetPhotos(v []string) *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.SetPhotos(v)
	})
}

// UpdatePhotos sets the "photos" field to the value that was provided on create.
func (u *AccountProjectUpsertBulk) UpdatePhotos() *AccountProjectUpsertBulk {
	return u.Update(func(s *AccountProjectUpsert) {
		s.UpdatePhotos()
	})
}

// Exec executes the query.
func (u *AccountProjectUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AccountProjectCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountProjectCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountProjectUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
