// Code generated by ent, DO NOT EDIT.

package blogsextend

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the blogsextend type in the database.
	Label = "blogs_extend"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBlogID holds the string denoting the blog_id field in the database.
	FieldBlogID = "blog_id"
	// FieldAccountID holds the string denoting the account_id field in the database.
	FieldAccountID = "account_id"
	// FieldBrowseNum holds the string denoting the browse_num field in the database.
	FieldBrowseNum = "browse_num"
	// FieldBrowseAt holds the string denoting the browse_at field in the database.
	FieldBrowseAt = "browse_at"
	// FieldCollect holds the string denoting the collect field in the database.
	FieldCollect = "collect"
	// FieldCollectAt holds the string denoting the collect_at field in the database.
	FieldCollectAt = "collect_at"
	// FieldLove holds the string denoting the love field in the database.
	FieldLove = "love"
	// FieldLoveAt holds the string denoting the love_at field in the database.
	FieldLoveAt = "love_at"
	// Table holds the table name of the blogsextend in the database.
	Table = "blogs_extend"
)

// Columns holds all SQL columns for blogsextend fields.
var Columns = []string{
	FieldID,
	FieldBlogID,
	FieldAccountID,
	FieldBrowseNum,
	FieldBrowseAt,
	FieldCollect,
	FieldCollectAt,
	FieldLove,
	FieldLoveAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultBrowseNum holds the default value on creation for the "browse_num" field.
	DefaultBrowseNum int
	// DefaultBrowseAt holds the default value on creation for the "browse_at" field.
	DefaultBrowseAt int64
	// DefaultCollect holds the default value on creation for the "collect" field.
	DefaultCollect bool
	// DefaultCollectAt holds the default value on creation for the "collect_at" field.
	DefaultCollectAt int64
	// DefaultLove holds the default value on creation for the "love" field.
	DefaultLove bool
	// DefaultLoveAt holds the default value on creation for the "love_at" field.
	DefaultLoveAt int64
)

// OrderOption defines the ordering options for the BlogsExtend queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBlogID orders the results by the blog_id field.
func ByBlogID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlogID, opts...).ToFunc()
}

// ByAccountID orders the results by the account_id field.
func ByAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountID, opts...).ToFunc()
}

// ByBrowseNum orders the results by the browse_num field.
func ByBrowseNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrowseNum, opts...).ToFunc()
}

// ByBrowseAt orders the results by the browse_at field.
func ByBrowseAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrowseAt, opts...).ToFunc()
}

// ByCollect orders the results by the collect field.
func ByCollect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollect, opts...).ToFunc()
}

// ByCollectAt orders the results by the collect_at field.
func ByCollectAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollectAt, opts...).ToFunc()
}

// ByLove orders the results by the love field.
func ByLove(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLove, opts...).ToFunc()
}

// ByLoveAt orders the results by the love_at field.
func ByLoveAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoveAt, opts...).ToFunc()
}
