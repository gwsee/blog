// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/palacesmemo"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 备忘录
type PalacesMemo struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 创建人
	CreatedBy int64 `json:"created_by,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 更新人
	UpdatedBy int64 `json:"updated_by,omitempty"`
	// 软删除时间
	DeletedAt int64 `json:"deleted_at,omitempty"`
	// 删除人
	DeletedBy int64 `json:"deleted_by,omitempty"`
	// 账户ID
	AccountID int `json:"account_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// 内容
	Content string `json:"content,omitempty"`
	// 不同数值代办的不同记忆情况 越大代表越不需要记忆 为后续数据列表做铺垫
	Status       int8 `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PalacesMemo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case palacesmemo.FieldID, palacesmemo.FieldCreatedAt, palacesmemo.FieldCreatedBy, palacesmemo.FieldUpdatedAt, palacesmemo.FieldUpdatedBy, palacesmemo.FieldDeletedAt, palacesmemo.FieldDeletedBy, palacesmemo.FieldAccountID, palacesmemo.FieldStatus:
			values[i] = new(sql.NullInt64)
		case palacesmemo.FieldName, palacesmemo.FieldContent:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PalacesMemo fields.
func (pm *PalacesMemo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case palacesmemo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pm.ID = int(value.Int64)
		case palacesmemo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pm.CreatedAt = value.Int64
			}
		case palacesmemo.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pm.CreatedBy = value.Int64
			}
		case palacesmemo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pm.UpdatedAt = value.Int64
			}
		case palacesmemo.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pm.UpdatedBy = value.Int64
			}
		case palacesmemo.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pm.DeletedAt = value.Int64
			}
		case palacesmemo.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				pm.DeletedBy = value.Int64
			}
		case palacesmemo.FieldAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				pm.AccountID = int(value.Int64)
			}
		case palacesmemo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pm.Name = value.String
			}
		case palacesmemo.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pm.Content = value.String
			}
		case palacesmemo.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pm.Status = int8(value.Int64)
			}
		default:
			pm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PalacesMemo.
// This includes values selected through modifiers, order, etc.
func (pm *PalacesMemo) Value(name string) (ent.Value, error) {
	return pm.selectValues.Get(name)
}

// Update returns a builder for updating this PalacesMemo.
// Note that you need to call PalacesMemo.Unwrap() before calling this method if this PalacesMemo
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *PalacesMemo) Update() *PalacesMemoUpdateOne {
	return NewPalacesMemoClient(pm.config).UpdateOne(pm)
}

// Unwrap unwraps the PalacesMemo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *PalacesMemo) Unwrap() *PalacesMemo {
	_tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("ent: PalacesMemo is not a transactional entity")
	}
	pm.config.driver = _tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *PalacesMemo) String() string {
	var builder strings.Builder
	builder.WriteString("PalacesMemo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", pm.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", pm.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", pm.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", pm.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", pm.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(fmt.Sprintf("%v", pm.DeletedBy))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", pm.AccountID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pm.Name)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(pm.Content)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pm.Status))
	builder.WriteByte(')')
	return builder.String()
}

// PalacesMemos is a parsable slice of PalacesMemo.
type PalacesMemos []*PalacesMemo
