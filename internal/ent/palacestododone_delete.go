// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/palacestododone"
	"blog/internal/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PalacesTodoDoneDelete is the builder for deleting a PalacesTodoDone entity.
type PalacesTodoDoneDelete struct {
	config
	hooks    []Hook
	mutation *PalacesTodoDoneMutation
}

// Where appends a list predicates to the PalacesTodoDoneDelete builder.
func (ptdd *PalacesTodoDoneDelete) Where(ps ...predicate.PalacesTodoDone) *PalacesTodoDoneDelete {
	ptdd.mutation.Where(ps...)
	return ptdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ptdd *PalacesTodoDoneDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ptdd.sqlExec, ptdd.mutation, ptdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ptdd *PalacesTodoDoneDelete) ExecX(ctx context.Context) int {
	n, err := ptdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ptdd *PalacesTodoDoneDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(palacestododone.Table, sqlgraph.NewFieldSpec(palacestododone.FieldID, field.TypeInt))
	if ps := ptdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ptdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ptdd.mutation.done = true
	return affected, err
}

// PalacesTodoDoneDeleteOne is the builder for deleting a single PalacesTodoDone entity.
type PalacesTodoDoneDeleteOne struct {
	ptdd *PalacesTodoDoneDelete
}

// Where appends a list predicates to the PalacesTodoDoneDelete builder.
func (ptddo *PalacesTodoDoneDeleteOne) Where(ps ...predicate.PalacesTodoDone) *PalacesTodoDoneDeleteOne {
	ptddo.ptdd.mutation.Where(ps...)
	return ptddo
}

// Exec executes the deletion query.
func (ptddo *PalacesTodoDoneDeleteOne) Exec(ctx context.Context) error {
	n, err := ptddo.ptdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{palacestododone.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ptddo *PalacesTodoDoneDeleteOne) ExecX(ctx context.Context) {
	if err := ptddo.Exec(ctx); err != nil {
		panic(err)
	}
}
