// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/travelextend"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TravelExtendCreate is the builder for creating a TravelExtend entity.
type TravelExtendCreate struct {
	config
	mutation *TravelExtendMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tec *TravelExtendCreate) SetCreatedAt(i int64) *TravelExtendCreate {
	tec.mutation.SetCreatedAt(i)
	return tec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tec *TravelExtendCreate) SetNillableCreatedAt(i *int64) *TravelExtendCreate {
	if i != nil {
		tec.SetCreatedAt(*i)
	}
	return tec
}

// SetCreatedBy sets the "created_by" field.
func (tec *TravelExtendCreate) SetCreatedBy(i int64) *TravelExtendCreate {
	tec.mutation.SetCreatedBy(i)
	return tec
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tec *TravelExtendCreate) SetNillableCreatedBy(i *int64) *TravelExtendCreate {
	if i != nil {
		tec.SetCreatedBy(*i)
	}
	return tec
}

// SetUpdatedAt sets the "updated_at" field.
func (tec *TravelExtendCreate) SetUpdatedAt(i int64) *TravelExtendCreate {
	tec.mutation.SetUpdatedAt(i)
	return tec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tec *TravelExtendCreate) SetNillableUpdatedAt(i *int64) *TravelExtendCreate {
	if i != nil {
		tec.SetUpdatedAt(*i)
	}
	return tec
}

// SetUpdatedBy sets the "updated_by" field.
func (tec *TravelExtendCreate) SetUpdatedBy(i int64) *TravelExtendCreate {
	tec.mutation.SetUpdatedBy(i)
	return tec
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tec *TravelExtendCreate) SetNillableUpdatedBy(i *int64) *TravelExtendCreate {
	if i != nil {
		tec.SetUpdatedBy(*i)
	}
	return tec
}

// SetDeletedAt sets the "deleted_at" field.
func (tec *TravelExtendCreate) SetDeletedAt(i int64) *TravelExtendCreate {
	tec.mutation.SetDeletedAt(i)
	return tec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tec *TravelExtendCreate) SetNillableDeletedAt(i *int64) *TravelExtendCreate {
	if i != nil {
		tec.SetDeletedAt(*i)
	}
	return tec
}

// SetDeletedBy sets the "deleted_by" field.
func (tec *TravelExtendCreate) SetDeletedBy(i int64) *TravelExtendCreate {
	tec.mutation.SetDeletedBy(i)
	return tec
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tec *TravelExtendCreate) SetNillableDeletedBy(i *int64) *TravelExtendCreate {
	if i != nil {
		tec.SetDeletedBy(*i)
	}
	return tec
}

// SetAccountID sets the "account_id" field.
func (tec *TravelExtendCreate) SetAccountID(i int) *TravelExtendCreate {
	tec.mutation.SetAccountID(i)
	return tec
}

// SetTravelID sets the "travel_id" field.
func (tec *TravelExtendCreate) SetTravelID(i int) *TravelExtendCreate {
	tec.mutation.SetTravelID(i)
	return tec
}

// SetIsThumb sets the "is_thumb" field.
func (tec *TravelExtendCreate) SetIsThumb(b bool) *TravelExtendCreate {
	tec.mutation.SetIsThumb(b)
	return tec
}

// SetIsCollect sets the "is_collect" field.
func (tec *TravelExtendCreate) SetIsCollect(b bool) *TravelExtendCreate {
	tec.mutation.SetIsCollect(b)
	return tec
}

// Mutation returns the TravelExtendMutation object of the builder.
func (tec *TravelExtendCreate) Mutation() *TravelExtendMutation {
	return tec.mutation
}

// Save creates the TravelExtend in the database.
func (tec *TravelExtendCreate) Save(ctx context.Context) (*TravelExtend, error) {
	if err := tec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tec.sqlSave, tec.mutation, tec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tec *TravelExtendCreate) SaveX(ctx context.Context) *TravelExtend {
	v, err := tec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tec *TravelExtendCreate) Exec(ctx context.Context) error {
	_, err := tec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tec *TravelExtendCreate) ExecX(ctx context.Context) {
	if err := tec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tec *TravelExtendCreate) defaults() error {
	if _, ok := tec.mutation.CreatedAt(); !ok {
		v := travelextend.DefaultCreatedAt
		tec.mutation.SetCreatedAt(v)
	}
	if _, ok := tec.mutation.CreatedBy(); !ok {
		v := travelextend.DefaultCreatedBy
		tec.mutation.SetCreatedBy(v)
	}
	if _, ok := tec.mutation.UpdatedAt(); !ok {
		v := travelextend.DefaultUpdatedAt
		tec.mutation.SetUpdatedAt(v)
	}
	if _, ok := tec.mutation.UpdatedBy(); !ok {
		v := travelextend.DefaultUpdatedBy
		tec.mutation.SetUpdatedBy(v)
	}
	if _, ok := tec.mutation.DeletedAt(); !ok {
		v := travelextend.DefaultDeletedAt
		tec.mutation.SetDeletedAt(v)
	}
	if _, ok := tec.mutation.DeletedBy(); !ok {
		v := travelextend.DefaultDeletedBy
		tec.mutation.SetDeletedBy(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tec *TravelExtendCreate) check() error {
	if _, ok := tec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TravelExtend.created_at"`)}
	}
	if _, ok := tec.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "TravelExtend.created_by"`)}
	}
	if _, ok := tec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TravelExtend.updated_at"`)}
	}
	if _, ok := tec.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "TravelExtend.updated_by"`)}
	}
	if _, ok := tec.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "TravelExtend.deleted_at"`)}
	}
	if _, ok := tec.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "TravelExtend.deleted_by"`)}
	}
	if _, ok := tec.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "TravelExtend.account_id"`)}
	}
	if v, ok := tec.mutation.AccountID(); ok {
		if err := travelextend.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "TravelExtend.account_id": %w`, err)}
		}
	}
	if _, ok := tec.mutation.TravelID(); !ok {
		return &ValidationError{Name: "travel_id", err: errors.New(`ent: missing required field "TravelExtend.travel_id"`)}
	}
	if _, ok := tec.mutation.IsThumb(); !ok {
		return &ValidationError{Name: "is_thumb", err: errors.New(`ent: missing required field "TravelExtend.is_thumb"`)}
	}
	if _, ok := tec.mutation.IsCollect(); !ok {
		return &ValidationError{Name: "is_collect", err: errors.New(`ent: missing required field "TravelExtend.is_collect"`)}
	}
	return nil
}

func (tec *TravelExtendCreate) sqlSave(ctx context.Context) (*TravelExtend, error) {
	if err := tec.check(); err != nil {
		return nil, err
	}
	_node, _spec := tec.createSpec()
	if err := sqlgraph.CreateNode(ctx, tec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tec.mutation.id = &_node.ID
	tec.mutation.done = true
	return _node, nil
}

func (tec *TravelExtendCreate) createSpec() (*TravelExtend, *sqlgraph.CreateSpec) {
	var (
		_node = &TravelExtend{config: tec.config}
		_spec = sqlgraph.NewCreateSpec(travelextend.Table, sqlgraph.NewFieldSpec(travelextend.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tec.conflict
	if value, ok := tec.mutation.CreatedAt(); ok {
		_spec.SetField(travelextend.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tec.mutation.CreatedBy(); ok {
		_spec.SetField(travelextend.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := tec.mutation.UpdatedAt(); ok {
		_spec.SetField(travelextend.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := tec.mutation.UpdatedBy(); ok {
		_spec.SetField(travelextend.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := tec.mutation.DeletedAt(); ok {
		_spec.SetField(travelextend.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := tec.mutation.DeletedBy(); ok {
		_spec.SetField(travelextend.FieldDeletedBy, field.TypeInt64, value)
		_node.DeletedBy = value
	}
	if value, ok := tec.mutation.AccountID(); ok {
		_spec.SetField(travelextend.FieldAccountID, field.TypeInt, value)
		_node.AccountID = value
	}
	if value, ok := tec.mutation.TravelID(); ok {
		_spec.SetField(travelextend.FieldTravelID, field.TypeInt, value)
		_node.TravelID = value
	}
	if value, ok := tec.mutation.IsThumb(); ok {
		_spec.SetField(travelextend.FieldIsThumb, field.TypeBool, value)
		_node.IsThumb = value
	}
	if value, ok := tec.mutation.IsCollect(); ok {
		_spec.SetField(travelextend.FieldIsCollect, field.TypeBool, value)
		_node.IsCollect = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TravelExtend.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TravelExtendUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tec *TravelExtendCreate) OnConflict(opts ...sql.ConflictOption) *TravelExtendUpsertOne {
	tec.conflict = opts
	return &TravelExtendUpsertOne{
		create: tec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TravelExtend.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tec *TravelExtendCreate) OnConflictColumns(columns ...string) *TravelExtendUpsertOne {
	tec.conflict = append(tec.conflict, sql.ConflictColumns(columns...))
	return &TravelExtendUpsertOne{
		create: tec,
	}
}

type (
	// TravelExtendUpsertOne is the builder for "upsert"-ing
	//  one TravelExtend node.
	TravelExtendUpsertOne struct {
		create *TravelExtendCreate
	}

	// TravelExtendUpsert is the "OnConflict" setter.
	TravelExtendUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TravelExtendUpsert) SetUpdatedAt(v int64) *TravelExtendUpsert {
	u.Set(travelextend.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TravelExtendUpsert) UpdateUpdatedAt() *TravelExtendUpsert {
	u.SetExcluded(travelextend.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TravelExtendUpsert) AddUpdatedAt(v int64) *TravelExtendUpsert {
	u.Add(travelextend.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TravelExtendUpsert) SetUpdatedBy(v int64) *TravelExtendUpsert {
	u.Set(travelextend.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TravelExtendUpsert) UpdateUpdatedBy() *TravelExtendUpsert {
	u.SetExcluded(travelextend.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TravelExtendUpsert) AddUpdatedBy(v int64) *TravelExtendUpsert {
	u.Add(travelextend.FieldUpdatedBy, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TravelExtendUpsert) SetDeletedAt(v int64) *TravelExtendUpsert {
	u.Set(travelextend.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TravelExtendUpsert) UpdateDeletedAt() *TravelExtendUpsert {
	u.SetExcluded(travelextend.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TravelExtendUpsert) AddDeletedAt(v int64) *TravelExtendUpsert {
	u.Add(travelextend.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *TravelExtendUpsert) SetDeletedBy(v int64) *TravelExtendUpsert {
	u.Set(travelextend.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *TravelExtendUpsert) UpdateDeletedBy() *TravelExtendUpsert {
	u.SetExcluded(travelextend.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *TravelExtendUpsert) AddDeletedBy(v int64) *TravelExtendUpsert {
	u.Add(travelextend.FieldDeletedBy, v)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *TravelExtendUpsert) SetAccountID(v int) *TravelExtendUpsert {
	u.Set(travelextend.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *TravelExtendUpsert) UpdateAccountID() *TravelExtendUpsert {
	u.SetExcluded(travelextend.FieldAccountID)
	return u
}

// AddAccountID adds v to the "account_id" field.
func (u *TravelExtendUpsert) AddAccountID(v int) *TravelExtendUpsert {
	u.Add(travelextend.FieldAccountID, v)
	return u
}

// SetTravelID sets the "travel_id" field.
func (u *TravelExtendUpsert) SetTravelID(v int) *TravelExtendUpsert {
	u.Set(travelextend.FieldTravelID, v)
	return u
}

// UpdateTravelID sets the "travel_id" field to the value that was provided on create.
func (u *TravelExtendUpsert) UpdateTravelID() *TravelExtendUpsert {
	u.SetExcluded(travelextend.FieldTravelID)
	return u
}

// AddTravelID adds v to the "travel_id" field.
func (u *TravelExtendUpsert) AddTravelID(v int) *TravelExtendUpsert {
	u.Add(travelextend.FieldTravelID, v)
	return u
}

// SetIsThumb sets the "is_thumb" field.
func (u *TravelExtendUpsert) SetIsThumb(v bool) *TravelExtendUpsert {
	u.Set(travelextend.FieldIsThumb, v)
	return u
}

// UpdateIsThumb sets the "is_thumb" field to the value that was provided on create.
func (u *TravelExtendUpsert) UpdateIsThumb() *TravelExtendUpsert {
	u.SetExcluded(travelextend.FieldIsThumb)
	return u
}

// SetIsCollect sets the "is_collect" field.
func (u *TravelExtendUpsert) SetIsCollect(v bool) *TravelExtendUpsert {
	u.Set(travelextend.FieldIsCollect, v)
	return u
}

// UpdateIsCollect sets the "is_collect" field to the value that was provided on create.
func (u *TravelExtendUpsert) UpdateIsCollect() *TravelExtendUpsert {
	u.SetExcluded(travelextend.FieldIsCollect)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TravelExtend.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TravelExtendUpsertOne) UpdateNewValues() *TravelExtendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(travelextend.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(travelextend.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TravelExtend.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TravelExtendUpsertOne) Ignore() *TravelExtendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TravelExtendUpsertOne) DoNothing() *TravelExtendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TravelExtendCreate.OnConflict
// documentation for more info.
func (u *TravelExtendUpsertOne) Update(set func(*TravelExtendUpsert)) *TravelExtendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TravelExtendUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TravelExtendUpsertOne) SetUpdatedAt(v int64) *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TravelExtendUpsertOne) AddUpdatedAt(v int64) *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TravelExtendUpsertOne) UpdateUpdatedAt() *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TravelExtendUpsertOne) SetUpdatedBy(v int64) *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TravelExtendUpsertOne) AddUpdatedBy(v int64) *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TravelExtendUpsertOne) UpdateUpdatedBy() *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TravelExtendUpsertOne) SetDeletedAt(v int64) *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TravelExtendUpsertOne) AddDeletedAt(v int64) *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TravelExtendUpsertOne) UpdateDeletedAt() *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *TravelExtendUpsertOne) SetDeletedBy(v int64) *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *TravelExtendUpsertOne) AddDeletedBy(v int64) *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *TravelExtendUpsertOne) UpdateDeletedBy() *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetAccountID sets the "account_id" field.
func (u *TravelExtendUpsertOne) SetAccountID(v int) *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *TravelExtendUpsertOne) AddAccountID(v int) *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *TravelExtendUpsertOne) UpdateAccountID() *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateAccountID()
	})
}

// SetTravelID sets the "travel_id" field.
func (u *TravelExtendUpsertOne) SetTravelID(v int) *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetTravelID(v)
	})
}

// AddTravelID adds v to the "travel_id" field.
func (u *TravelExtendUpsertOne) AddTravelID(v int) *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.AddTravelID(v)
	})
}

// UpdateTravelID sets the "travel_id" field to the value that was provided on create.
func (u *TravelExtendUpsertOne) UpdateTravelID() *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateTravelID()
	})
}

// SetIsThumb sets the "is_thumb" field.
func (u *TravelExtendUpsertOne) SetIsThumb(v bool) *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetIsThumb(v)
	})
}

// UpdateIsThumb sets the "is_thumb" field to the value that was provided on create.
func (u *TravelExtendUpsertOne) UpdateIsThumb() *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateIsThumb()
	})
}

// SetIsCollect sets the "is_collect" field.
func (u *TravelExtendUpsertOne) SetIsCollect(v bool) *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetIsCollect(v)
	})
}

// UpdateIsCollect sets the "is_collect" field to the value that was provided on create.
func (u *TravelExtendUpsertOne) UpdateIsCollect() *TravelExtendUpsertOne {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateIsCollect()
	})
}

// Exec executes the query.
func (u *TravelExtendUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TravelExtendCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TravelExtendUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TravelExtendUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TravelExtendUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TravelExtendCreateBulk is the builder for creating many TravelExtend entities in bulk.
type TravelExtendCreateBulk struct {
	config
	err      error
	builders []*TravelExtendCreate
	conflict []sql.ConflictOption
}

// Save creates the TravelExtend entities in the database.
func (tecb *TravelExtendCreateBulk) Save(ctx context.Context) ([]*TravelExtend, error) {
	if tecb.err != nil {
		return nil, tecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tecb.builders))
	nodes := make([]*TravelExtend, len(tecb.builders))
	mutators := make([]Mutator, len(tecb.builders))
	for i := range tecb.builders {
		func(i int, root context.Context) {
			builder := tecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TravelExtendMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tecb *TravelExtendCreateBulk) SaveX(ctx context.Context) []*TravelExtend {
	v, err := tecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tecb *TravelExtendCreateBulk) Exec(ctx context.Context) error {
	_, err := tecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tecb *TravelExtendCreateBulk) ExecX(ctx context.Context) {
	if err := tecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TravelExtend.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TravelExtendUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tecb *TravelExtendCreateBulk) OnConflict(opts ...sql.ConflictOption) *TravelExtendUpsertBulk {
	tecb.conflict = opts
	return &TravelExtendUpsertBulk{
		create: tecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TravelExtend.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tecb *TravelExtendCreateBulk) OnConflictColumns(columns ...string) *TravelExtendUpsertBulk {
	tecb.conflict = append(tecb.conflict, sql.ConflictColumns(columns...))
	return &TravelExtendUpsertBulk{
		create: tecb,
	}
}

// TravelExtendUpsertBulk is the builder for "upsert"-ing
// a bulk of TravelExtend nodes.
type TravelExtendUpsertBulk struct {
	create *TravelExtendCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TravelExtend.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TravelExtendUpsertBulk) UpdateNewValues() *TravelExtendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(travelextend.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(travelextend.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TravelExtend.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TravelExtendUpsertBulk) Ignore() *TravelExtendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TravelExtendUpsertBulk) DoNothing() *TravelExtendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TravelExtendCreateBulk.OnConflict
// documentation for more info.
func (u *TravelExtendUpsertBulk) Update(set func(*TravelExtendUpsert)) *TravelExtendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TravelExtendUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TravelExtendUpsertBulk) SetUpdatedAt(v int64) *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TravelExtendUpsertBulk) AddUpdatedAt(v int64) *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TravelExtendUpsertBulk) UpdateUpdatedAt() *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TravelExtendUpsertBulk) SetUpdatedBy(v int64) *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TravelExtendUpsertBulk) AddUpdatedBy(v int64) *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TravelExtendUpsertBulk) UpdateUpdatedBy() *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TravelExtendUpsertBulk) SetDeletedAt(v int64) *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TravelExtendUpsertBulk) AddDeletedAt(v int64) *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TravelExtendUpsertBulk) UpdateDeletedAt() *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *TravelExtendUpsertBulk) SetDeletedBy(v int64) *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *TravelExtendUpsertBulk) AddDeletedBy(v int64) *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *TravelExtendUpsertBulk) UpdateDeletedBy() *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetAccountID sets the "account_id" field.
func (u *TravelExtendUpsertBulk) SetAccountID(v int) *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *TravelExtendUpsertBulk) AddAccountID(v int) *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *TravelExtendUpsertBulk) UpdateAccountID() *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateAccountID()
	})
}

// SetTravelID sets the "travel_id" field.
func (u *TravelExtendUpsertBulk) SetTravelID(v int) *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetTravelID(v)
	})
}

// AddTravelID adds v to the "travel_id" field.
func (u *TravelExtendUpsertBulk) AddTravelID(v int) *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.AddTravelID(v)
	})
}

// UpdateTravelID sets the "travel_id" field to the value that was provided on create.
func (u *TravelExtendUpsertBulk) UpdateTravelID() *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateTravelID()
	})
}

// SetIsThumb sets the "is_thumb" field.
func (u *TravelExtendUpsertBulk) SetIsThumb(v bool) *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetIsThumb(v)
	})
}

// UpdateIsThumb sets the "is_thumb" field to the value that was provided on create.
func (u *TravelExtendUpsertBulk) UpdateIsThumb() *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateIsThumb()
	})
}

// SetIsCollect sets the "is_collect" field.
func (u *TravelExtendUpsertBulk) SetIsCollect(v bool) *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.SetIsCollect(v)
	})
}

// UpdateIsCollect sets the "is_collect" field to the value that was provided on create.
func (u *TravelExtendUpsertBulk) UpdateIsCollect() *TravelExtendUpsertBulk {
	return u.Update(func(s *TravelExtendUpsert) {
		s.UpdateIsCollect()
	})
}

// Exec executes the query.
func (u *TravelExtendUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TravelExtendCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TravelExtendCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TravelExtendUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
