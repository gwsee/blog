// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/accountexperience"
	"blog/internal/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountExperienceDelete is the builder for deleting a AccountExperience entity.
type AccountExperienceDelete struct {
	config
	hooks    []Hook
	mutation *AccountExperienceMutation
}

// Where appends a list predicates to the AccountExperienceDelete builder.
func (aed *AccountExperienceDelete) Where(ps ...predicate.AccountExperience) *AccountExperienceDelete {
	aed.mutation.Where(ps...)
	return aed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (aed *AccountExperienceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, aed.sqlExec, aed.mutation, aed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (aed *AccountExperienceDelete) ExecX(ctx context.Context) int {
	n, err := aed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (aed *AccountExperienceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(accountexperience.Table, sqlgraph.NewFieldSpec(accountexperience.FieldID, field.TypeInt))
	if ps := aed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, aed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	aed.mutation.done = true
	return affected, err
}

// AccountExperienceDeleteOne is the builder for deleting a single AccountExperience entity.
type AccountExperienceDeleteOne struct {
	aed *AccountExperienceDelete
}

// Where appends a list predicates to the AccountExperienceDelete builder.
func (aedo *AccountExperienceDeleteOne) Where(ps ...predicate.AccountExperience) *AccountExperienceDeleteOne {
	aedo.aed.mutation.Where(ps...)
	return aedo
}

// Exec executes the deletion query.
func (aedo *AccountExperienceDeleteOne) Exec(ctx context.Context) error {
	n, err := aedo.aed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{accountexperience.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (aedo *AccountExperienceDeleteOne) ExecX(ctx context.Context) {
	if err := aedo.Exec(ctx); err != nil {
		panic(err)
	}
}
