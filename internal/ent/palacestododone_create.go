// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/palacestodo"
	"blog/internal/ent/palacestododone"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PalacesTodoDoneCreate is the builder for creating a PalacesTodoDone entity.
type PalacesTodoDoneCreate struct {
	config
	mutation *PalacesTodoDoneMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ptdc *PalacesTodoDoneCreate) SetCreatedAt(i int64) *PalacesTodoDoneCreate {
	ptdc.mutation.SetCreatedAt(i)
	return ptdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptdc *PalacesTodoDoneCreate) SetNillableCreatedAt(i *int64) *PalacesTodoDoneCreate {
	if i != nil {
		ptdc.SetCreatedAt(*i)
	}
	return ptdc
}

// SetCreatedBy sets the "created_by" field.
func (ptdc *PalacesTodoDoneCreate) SetCreatedBy(i int64) *PalacesTodoDoneCreate {
	ptdc.mutation.SetCreatedBy(i)
	return ptdc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ptdc *PalacesTodoDoneCreate) SetNillableCreatedBy(i *int64) *PalacesTodoDoneCreate {
	if i != nil {
		ptdc.SetCreatedBy(*i)
	}
	return ptdc
}

// SetUpdatedAt sets the "updated_at" field.
func (ptdc *PalacesTodoDoneCreate) SetUpdatedAt(i int64) *PalacesTodoDoneCreate {
	ptdc.mutation.SetUpdatedAt(i)
	return ptdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptdc *PalacesTodoDoneCreate) SetNillableUpdatedAt(i *int64) *PalacesTodoDoneCreate {
	if i != nil {
		ptdc.SetUpdatedAt(*i)
	}
	return ptdc
}

// SetUpdatedBy sets the "updated_by" field.
func (ptdc *PalacesTodoDoneCreate) SetUpdatedBy(i int64) *PalacesTodoDoneCreate {
	ptdc.mutation.SetUpdatedBy(i)
	return ptdc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ptdc *PalacesTodoDoneCreate) SetNillableUpdatedBy(i *int64) *PalacesTodoDoneCreate {
	if i != nil {
		ptdc.SetUpdatedBy(*i)
	}
	return ptdc
}

// SetDeletedAt sets the "deleted_at" field.
func (ptdc *PalacesTodoDoneCreate) SetDeletedAt(i int64) *PalacesTodoDoneCreate {
	ptdc.mutation.SetDeletedAt(i)
	return ptdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptdc *PalacesTodoDoneCreate) SetNillableDeletedAt(i *int64) *PalacesTodoDoneCreate {
	if i != nil {
		ptdc.SetDeletedAt(*i)
	}
	return ptdc
}

// SetDeletedBy sets the "deleted_by" field.
func (ptdc *PalacesTodoDoneCreate) SetDeletedBy(i int64) *PalacesTodoDoneCreate {
	ptdc.mutation.SetDeletedBy(i)
	return ptdc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ptdc *PalacesTodoDoneCreate) SetNillableDeletedBy(i *int64) *PalacesTodoDoneCreate {
	if i != nil {
		ptdc.SetDeletedBy(*i)
	}
	return ptdc
}

// SetTodoID sets the "todo_id" field.
func (ptdc *PalacesTodoDoneCreate) SetTodoID(i int) *PalacesTodoDoneCreate {
	ptdc.mutation.SetTodoID(i)
	return ptdc
}

// SetNillableTodoID sets the "todo_id" field if the given value is not nil.
func (ptdc *PalacesTodoDoneCreate) SetNillableTodoID(i *int) *PalacesTodoDoneCreate {
	if i != nil {
		ptdc.SetTodoID(*i)
	}
	return ptdc
}

// SetID sets the "id" field.
func (ptdc *PalacesTodoDoneCreate) SetID(i int) *PalacesTodoDoneCreate {
	ptdc.mutation.SetID(i)
	return ptdc
}

// SetOwnerID sets the "owner" edge to the PalacesTodo entity by ID.
func (ptdc *PalacesTodoDoneCreate) SetOwnerID(id int) *PalacesTodoDoneCreate {
	ptdc.mutation.SetOwnerID(id)
	return ptdc
}

// SetNillableOwnerID sets the "owner" edge to the PalacesTodo entity by ID if the given value is not nil.
func (ptdc *PalacesTodoDoneCreate) SetNillableOwnerID(id *int) *PalacesTodoDoneCreate {
	if id != nil {
		ptdc = ptdc.SetOwnerID(*id)
	}
	return ptdc
}

// SetOwner sets the "owner" edge to the PalacesTodo entity.
func (ptdc *PalacesTodoDoneCreate) SetOwner(p *PalacesTodo) *PalacesTodoDoneCreate {
	return ptdc.SetOwnerID(p.ID)
}

// Mutation returns the PalacesTodoDoneMutation object of the builder.
func (ptdc *PalacesTodoDoneCreate) Mutation() *PalacesTodoDoneMutation {
	return ptdc.mutation
}

// Save creates the PalacesTodoDone in the database.
func (ptdc *PalacesTodoDoneCreate) Save(ctx context.Context) (*PalacesTodoDone, error) {
	if err := ptdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ptdc.sqlSave, ptdc.mutation, ptdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptdc *PalacesTodoDoneCreate) SaveX(ctx context.Context) *PalacesTodoDone {
	v, err := ptdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptdc *PalacesTodoDoneCreate) Exec(ctx context.Context) error {
	_, err := ptdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptdc *PalacesTodoDoneCreate) ExecX(ctx context.Context) {
	if err := ptdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptdc *PalacesTodoDoneCreate) defaults() error {
	if _, ok := ptdc.mutation.CreatedAt(); !ok {
		v := palacestododone.DefaultCreatedAt
		ptdc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptdc.mutation.CreatedBy(); !ok {
		v := palacestododone.DefaultCreatedBy
		ptdc.mutation.SetCreatedBy(v)
	}
	if _, ok := ptdc.mutation.UpdatedAt(); !ok {
		v := palacestododone.DefaultUpdatedAt
		ptdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ptdc.mutation.UpdatedBy(); !ok {
		v := palacestododone.DefaultUpdatedBy
		ptdc.mutation.SetUpdatedBy(v)
	}
	if _, ok := ptdc.mutation.DeletedAt(); !ok {
		v := palacestododone.DefaultDeletedAt
		ptdc.mutation.SetDeletedAt(v)
	}
	if _, ok := ptdc.mutation.DeletedBy(); !ok {
		v := palacestododone.DefaultDeletedBy
		ptdc.mutation.SetDeletedBy(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ptdc *PalacesTodoDoneCreate) check() error {
	if _, ok := ptdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PalacesTodoDone.created_at"`)}
	}
	if _, ok := ptdc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "PalacesTodoDone.created_by"`)}
	}
	if _, ok := ptdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PalacesTodoDone.updated_at"`)}
	}
	if _, ok := ptdc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "PalacesTodoDone.updated_by"`)}
	}
	if _, ok := ptdc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "PalacesTodoDone.deleted_at"`)}
	}
	if _, ok := ptdc.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "PalacesTodoDone.deleted_by"`)}
	}
	if v, ok := ptdc.mutation.ID(); ok {
		if err := palacestododone.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PalacesTodoDone.id": %w`, err)}
		}
	}
	return nil
}

func (ptdc *PalacesTodoDoneCreate) sqlSave(ctx context.Context) (*PalacesTodoDone, error) {
	if err := ptdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ptdc.mutation.id = &_node.ID
	ptdc.mutation.done = true
	return _node, nil
}

func (ptdc *PalacesTodoDoneCreate) createSpec() (*PalacesTodoDone, *sqlgraph.CreateSpec) {
	var (
		_node = &PalacesTodoDone{config: ptdc.config}
		_spec = sqlgraph.NewCreateSpec(palacestododone.Table, sqlgraph.NewFieldSpec(palacestododone.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ptdc.conflict
	if id, ok := ptdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ptdc.mutation.CreatedAt(); ok {
		_spec.SetField(palacestododone.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := ptdc.mutation.CreatedBy(); ok {
		_spec.SetField(palacestododone.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := ptdc.mutation.UpdatedAt(); ok {
		_spec.SetField(palacestododone.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := ptdc.mutation.UpdatedBy(); ok {
		_spec.SetField(palacestododone.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := ptdc.mutation.DeletedAt(); ok {
		_spec.SetField(palacestododone.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := ptdc.mutation.DeletedBy(); ok {
		_spec.SetField(palacestododone.FieldDeletedBy, field.TypeInt64, value)
		_node.DeletedBy = value
	}
	if nodes := ptdc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   palacestododone.OwnerTable,
			Columns: []string{palacestododone.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(palacestodo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TodoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PalacesTodoDone.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PalacesTodoDoneUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ptdc *PalacesTodoDoneCreate) OnConflict(opts ...sql.ConflictOption) *PalacesTodoDoneUpsertOne {
	ptdc.conflict = opts
	return &PalacesTodoDoneUpsertOne{
		create: ptdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PalacesTodoDone.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptdc *PalacesTodoDoneCreate) OnConflictColumns(columns ...string) *PalacesTodoDoneUpsertOne {
	ptdc.conflict = append(ptdc.conflict, sql.ConflictColumns(columns...))
	return &PalacesTodoDoneUpsertOne{
		create: ptdc,
	}
}

type (
	// PalacesTodoDoneUpsertOne is the builder for "upsert"-ing
	//  one PalacesTodoDone node.
	PalacesTodoDoneUpsertOne struct {
		create *PalacesTodoDoneCreate
	}

	// PalacesTodoDoneUpsert is the "OnConflict" setter.
	PalacesTodoDoneUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PalacesTodoDoneUpsert) SetUpdatedAt(v int64) *PalacesTodoDoneUpsert {
	u.Set(palacestododone.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PalacesTodoDoneUpsert) UpdateUpdatedAt() *PalacesTodoDoneUpsert {
	u.SetExcluded(palacestododone.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PalacesTodoDoneUpsert) AddUpdatedAt(v int64) *PalacesTodoDoneUpsert {
	u.Add(palacestododone.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PalacesTodoDoneUpsert) SetUpdatedBy(v int64) *PalacesTodoDoneUpsert {
	u.Set(palacestododone.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PalacesTodoDoneUpsert) UpdateUpdatedBy() *PalacesTodoDoneUpsert {
	u.SetExcluded(palacestododone.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PalacesTodoDoneUpsert) AddUpdatedBy(v int64) *PalacesTodoDoneUpsert {
	u.Add(palacestododone.FieldUpdatedBy, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PalacesTodoDoneUpsert) SetDeletedAt(v int64) *PalacesTodoDoneUpsert {
	u.Set(palacestododone.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PalacesTodoDoneUpsert) UpdateDeletedAt() *PalacesTodoDoneUpsert {
	u.SetExcluded(palacestododone.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PalacesTodoDoneUpsert) AddDeletedAt(v int64) *PalacesTodoDoneUpsert {
	u.Add(palacestododone.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *PalacesTodoDoneUpsert) SetDeletedBy(v int64) *PalacesTodoDoneUpsert {
	u.Set(palacestododone.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *PalacesTodoDoneUpsert) UpdateDeletedBy() *PalacesTodoDoneUpsert {
	u.SetExcluded(palacestododone.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *PalacesTodoDoneUpsert) AddDeletedBy(v int64) *PalacesTodoDoneUpsert {
	u.Add(palacestododone.FieldDeletedBy, v)
	return u
}

// SetTodoID sets the "todo_id" field.
func (u *PalacesTodoDoneUpsert) SetTodoID(v int) *PalacesTodoDoneUpsert {
	u.Set(palacestododone.FieldTodoID, v)
	return u
}

// UpdateTodoID sets the "todo_id" field to the value that was provided on create.
func (u *PalacesTodoDoneUpsert) UpdateTodoID() *PalacesTodoDoneUpsert {
	u.SetExcluded(palacestododone.FieldTodoID)
	return u
}

// ClearTodoID clears the value of the "todo_id" field.
func (u *PalacesTodoDoneUpsert) ClearTodoID() *PalacesTodoDoneUpsert {
	u.SetNull(palacestododone.FieldTodoID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PalacesTodoDone.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(palacestododone.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PalacesTodoDoneUpsertOne) UpdateNewValues() *PalacesTodoDoneUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(palacestododone.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(palacestododone.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(palacestododone.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PalacesTodoDone.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PalacesTodoDoneUpsertOne) Ignore() *PalacesTodoDoneUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PalacesTodoDoneUpsertOne) DoNothing() *PalacesTodoDoneUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PalacesTodoDoneCreate.OnConflict
// documentation for more info.
func (u *PalacesTodoDoneUpsertOne) Update(set func(*PalacesTodoDoneUpsert)) *PalacesTodoDoneUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PalacesTodoDoneUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PalacesTodoDoneUpsertOne) SetUpdatedAt(v int64) *PalacesTodoDoneUpsertOne {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PalacesTodoDoneUpsertOne) AddUpdatedAt(v int64) *PalacesTodoDoneUpsertOne {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PalacesTodoDoneUpsertOne) UpdateUpdatedAt() *PalacesTodoDoneUpsertOne {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PalacesTodoDoneUpsertOne) SetUpdatedBy(v int64) *PalacesTodoDoneUpsertOne {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PalacesTodoDoneUpsertOne) AddUpdatedBy(v int64) *PalacesTodoDoneUpsertOne {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PalacesTodoDoneUpsertOne) UpdateUpdatedBy() *PalacesTodoDoneUpsertOne {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PalacesTodoDoneUpsertOne) SetDeletedAt(v int64) *PalacesTodoDoneUpsertOne {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PalacesTodoDoneUpsertOne) AddDeletedAt(v int64) *PalacesTodoDoneUpsertOne {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PalacesTodoDoneUpsertOne) UpdateDeletedAt() *PalacesTodoDoneUpsertOne {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *PalacesTodoDoneUpsertOne) SetDeletedBy(v int64) *PalacesTodoDoneUpsertOne {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *PalacesTodoDoneUpsertOne) AddDeletedBy(v int64) *PalacesTodoDoneUpsertOne {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *PalacesTodoDoneUpsertOne) UpdateDeletedBy() *PalacesTodoDoneUpsertOne {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetTodoID sets the "todo_id" field.
func (u *PalacesTodoDoneUpsertOne) SetTodoID(v int) *PalacesTodoDoneUpsertOne {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.SetTodoID(v)
	})
}

// UpdateTodoID sets the "todo_id" field to the value that was provided on create.
func (u *PalacesTodoDoneUpsertOne) UpdateTodoID() *PalacesTodoDoneUpsertOne {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.UpdateTodoID()
	})
}

// ClearTodoID clears the value of the "todo_id" field.
func (u *PalacesTodoDoneUpsertOne) ClearTodoID() *PalacesTodoDoneUpsertOne {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.ClearTodoID()
	})
}

// Exec executes the query.
func (u *PalacesTodoDoneUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PalacesTodoDoneCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PalacesTodoDoneUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PalacesTodoDoneUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PalacesTodoDoneUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PalacesTodoDoneCreateBulk is the builder for creating many PalacesTodoDone entities in bulk.
type PalacesTodoDoneCreateBulk struct {
	config
	err      error
	builders []*PalacesTodoDoneCreate
	conflict []sql.ConflictOption
}

// Save creates the PalacesTodoDone entities in the database.
func (ptdcb *PalacesTodoDoneCreateBulk) Save(ctx context.Context) ([]*PalacesTodoDone, error) {
	if ptdcb.err != nil {
		return nil, ptdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptdcb.builders))
	nodes := make([]*PalacesTodoDone, len(ptdcb.builders))
	mutators := make([]Mutator, len(ptdcb.builders))
	for i := range ptdcb.builders {
		func(i int, root context.Context) {
			builder := ptdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PalacesTodoDoneMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ptdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptdcb *PalacesTodoDoneCreateBulk) SaveX(ctx context.Context) []*PalacesTodoDone {
	v, err := ptdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptdcb *PalacesTodoDoneCreateBulk) Exec(ctx context.Context) error {
	_, err := ptdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptdcb *PalacesTodoDoneCreateBulk) ExecX(ctx context.Context) {
	if err := ptdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PalacesTodoDone.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PalacesTodoDoneUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ptdcb *PalacesTodoDoneCreateBulk) OnConflict(opts ...sql.ConflictOption) *PalacesTodoDoneUpsertBulk {
	ptdcb.conflict = opts
	return &PalacesTodoDoneUpsertBulk{
		create: ptdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PalacesTodoDone.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptdcb *PalacesTodoDoneCreateBulk) OnConflictColumns(columns ...string) *PalacesTodoDoneUpsertBulk {
	ptdcb.conflict = append(ptdcb.conflict, sql.ConflictColumns(columns...))
	return &PalacesTodoDoneUpsertBulk{
		create: ptdcb,
	}
}

// PalacesTodoDoneUpsertBulk is the builder for "upsert"-ing
// a bulk of PalacesTodoDone nodes.
type PalacesTodoDoneUpsertBulk struct {
	create *PalacesTodoDoneCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PalacesTodoDone.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(palacestododone.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PalacesTodoDoneUpsertBulk) UpdateNewValues() *PalacesTodoDoneUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(palacestododone.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(palacestododone.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(palacestododone.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PalacesTodoDone.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PalacesTodoDoneUpsertBulk) Ignore() *PalacesTodoDoneUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PalacesTodoDoneUpsertBulk) DoNothing() *PalacesTodoDoneUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PalacesTodoDoneCreateBulk.OnConflict
// documentation for more info.
func (u *PalacesTodoDoneUpsertBulk) Update(set func(*PalacesTodoDoneUpsert)) *PalacesTodoDoneUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PalacesTodoDoneUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PalacesTodoDoneUpsertBulk) SetUpdatedAt(v int64) *PalacesTodoDoneUpsertBulk {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PalacesTodoDoneUpsertBulk) AddUpdatedAt(v int64) *PalacesTodoDoneUpsertBulk {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PalacesTodoDoneUpsertBulk) UpdateUpdatedAt() *PalacesTodoDoneUpsertBulk {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PalacesTodoDoneUpsertBulk) SetUpdatedBy(v int64) *PalacesTodoDoneUpsertBulk {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PalacesTodoDoneUpsertBulk) AddUpdatedBy(v int64) *PalacesTodoDoneUpsertBulk {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PalacesTodoDoneUpsertBulk) UpdateUpdatedBy() *PalacesTodoDoneUpsertBulk {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PalacesTodoDoneUpsertBulk) SetDeletedAt(v int64) *PalacesTodoDoneUpsertBulk {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PalacesTodoDoneUpsertBulk) AddDeletedAt(v int64) *PalacesTodoDoneUpsertBulk {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PalacesTodoDoneUpsertBulk) UpdateDeletedAt() *PalacesTodoDoneUpsertBulk {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *PalacesTodoDoneUpsertBulk) SetDeletedBy(v int64) *PalacesTodoDoneUpsertBulk {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *PalacesTodoDoneUpsertBulk) AddDeletedBy(v int64) *PalacesTodoDoneUpsertBulk {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *PalacesTodoDoneUpsertBulk) UpdateDeletedBy() *PalacesTodoDoneUpsertBulk {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetTodoID sets the "todo_id" field.
func (u *PalacesTodoDoneUpsertBulk) SetTodoID(v int) *PalacesTodoDoneUpsertBulk {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.SetTodoID(v)
	})
}

// UpdateTodoID sets the "todo_id" field to the value that was provided on create.
func (u *PalacesTodoDoneUpsertBulk) UpdateTodoID() *PalacesTodoDoneUpsertBulk {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.UpdateTodoID()
	})
}

// ClearTodoID clears the value of the "todo_id" field.
func (u *PalacesTodoDoneUpsertBulk) ClearTodoID() *PalacesTodoDoneUpsertBulk {
	return u.Update(func(s *PalacesTodoDoneUpsert) {
		s.ClearTodoID()
	})
}

// Exec executes the query.
func (u *PalacesTodoDoneUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PalacesTodoDoneCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PalacesTodoDoneCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PalacesTodoDoneUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
