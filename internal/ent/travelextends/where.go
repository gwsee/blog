// Code generated by ent, DO NOT EDIT.

package travelextends

import (
	"blog/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldDeletedBy, v))
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldAccountID, v))
}

// TravelID applies equality check predicate on the "travel_id" field. It's identical to TravelIDEQ.
func TravelID(v int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldTravelID, v))
}

// IsThumb applies equality check predicate on the "is_thumb" field. It's identical to IsThumbEQ.
func IsThumb(v bool) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldIsThumb, v))
}

// IsCollect applies equality check predicate on the "is_collect" field. It's identical to IsCollectEQ.
func IsCollect(v bool) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldIsCollect, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLTE(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v int64) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLTE(FieldDeletedBy, v))
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldAccountID, v))
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNEQ(FieldAccountID, v))
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldIn(FieldAccountID, vs...))
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNotIn(FieldAccountID, vs...))
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGT(FieldAccountID, v))
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldGTE(FieldAccountID, v))
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLT(FieldAccountID, v))
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldLTE(FieldAccountID, v))
}

// TravelIDEQ applies the EQ predicate on the "travel_id" field.
func TravelIDEQ(v int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldTravelID, v))
}

// TravelIDNEQ applies the NEQ predicate on the "travel_id" field.
func TravelIDNEQ(v int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNEQ(FieldTravelID, v))
}

// TravelIDIn applies the In predicate on the "travel_id" field.
func TravelIDIn(vs ...int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldIn(FieldTravelID, vs...))
}

// TravelIDNotIn applies the NotIn predicate on the "travel_id" field.
func TravelIDNotIn(vs ...int) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNotIn(FieldTravelID, vs...))
}

// TravelIDIsNil applies the IsNil predicate on the "travel_id" field.
func TravelIDIsNil() predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldIsNull(FieldTravelID))
}

// TravelIDNotNil applies the NotNil predicate on the "travel_id" field.
func TravelIDNotNil() predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNotNull(FieldTravelID))
}

// IsThumbEQ applies the EQ predicate on the "is_thumb" field.
func IsThumbEQ(v bool) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldIsThumb, v))
}

// IsThumbNEQ applies the NEQ predicate on the "is_thumb" field.
func IsThumbNEQ(v bool) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNEQ(FieldIsThumb, v))
}

// IsCollectEQ applies the EQ predicate on the "is_collect" field.
func IsCollectEQ(v bool) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldEQ(FieldIsCollect, v))
}

// IsCollectNEQ applies the NEQ predicate on the "is_collect" field.
func IsCollectNEQ(v bool) predicate.TravelExtends {
	return predicate.TravelExtends(sql.FieldNEQ(FieldIsCollect, v))
}

// HasExtends applies the HasEdge predicate on the "extends" edge.
func HasExtends() predicate.TravelExtends {
	return predicate.TravelExtends(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExtendsTable, ExtendsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExtendsWith applies the HasEdge predicate on the "extends" edge with a given conditions (other predicates).
func HasExtendsWith(preds ...predicate.Travels) predicate.TravelExtends {
	return predicate.TravelExtends(func(s *sql.Selector) {
		step := newExtendsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TravelExtends) predicate.TravelExtends {
	return predicate.TravelExtends(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TravelExtends) predicate.TravelExtends {
	return predicate.TravelExtends(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TravelExtends) predicate.TravelExtends {
	return predicate.TravelExtends(sql.NotPredicates(p))
}
