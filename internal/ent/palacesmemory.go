// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/palacesmemory"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 记忆宫殿
type PalacesMemory struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 创建人
	CreatedBy int64 `json:"created_by,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 更新人
	UpdatedBy int64 `json:"updated_by,omitempty"`
	// 软删除时间
	DeletedAt int64 `json:"deleted_at,omitempty"`
	// 删除人
	DeletedBy int64 `json:"deleted_by,omitempty"`
	// Status holds the value of the "status" field.
	Status       int8 `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PalacesMemory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case palacesmemory.FieldID, palacesmemory.FieldCreatedAt, palacesmemory.FieldCreatedBy, palacesmemory.FieldUpdatedAt, palacesmemory.FieldUpdatedBy, palacesmemory.FieldDeletedAt, palacesmemory.FieldDeletedBy, palacesmemory.FieldStatus:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PalacesMemory fields.
func (pm *PalacesMemory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case palacesmemory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pm.ID = int(value.Int64)
		case palacesmemory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pm.CreatedAt = value.Int64
			}
		case palacesmemory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pm.CreatedBy = value.Int64
			}
		case palacesmemory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pm.UpdatedAt = value.Int64
			}
		case palacesmemory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pm.UpdatedBy = value.Int64
			}
		case palacesmemory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pm.DeletedAt = value.Int64
			}
		case palacesmemory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				pm.DeletedBy = value.Int64
			}
		case palacesmemory.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pm.Status = int8(value.Int64)
			}
		default:
			pm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PalacesMemory.
// This includes values selected through modifiers, order, etc.
func (pm *PalacesMemory) Value(name string) (ent.Value, error) {
	return pm.selectValues.Get(name)
}

// Update returns a builder for updating this PalacesMemory.
// Note that you need to call PalacesMemory.Unwrap() before calling this method if this PalacesMemory
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *PalacesMemory) Update() *PalacesMemoryUpdateOne {
	return NewPalacesMemoryClient(pm.config).UpdateOne(pm)
}

// Unwrap unwraps the PalacesMemory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *PalacesMemory) Unwrap() *PalacesMemory {
	_tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("ent: PalacesMemory is not a transactional entity")
	}
	pm.config.driver = _tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *PalacesMemory) String() string {
	var builder strings.Builder
	builder.WriteString("PalacesMemory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", pm.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", pm.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", pm.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", pm.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", pm.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(fmt.Sprintf("%v", pm.DeletedBy))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pm.Status))
	builder.WriteByte(')')
	return builder.String()
}

// PalacesMemories is a parsable slice of PalacesMemory.
type PalacesMemories []*PalacesMemory
