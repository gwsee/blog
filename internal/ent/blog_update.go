// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/blog"
	"blog/internal/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// BlogUpdate is the builder for updating Blog entities.
type BlogUpdate struct {
	config
	hooks    []Hook
	mutation *BlogMutation
}

// Where appends a list predicates to the BlogUpdate builder.
func (bu *BlogUpdate) Where(ps ...predicate.Blog) *BlogUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BlogUpdate) SetUpdatedAt(i int64) *BlogUpdate {
	bu.mutation.ResetUpdatedAt()
	bu.mutation.SetUpdatedAt(i)
	return bu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (bu *BlogUpdate) AddUpdatedAt(i int64) *BlogUpdate {
	bu.mutation.AddUpdatedAt(i)
	return bu
}

// SetUpdatedBy sets the "updated_by" field.
func (bu *BlogUpdate) SetUpdatedBy(s string) *BlogUpdate {
	bu.mutation.SetUpdatedBy(s)
	return bu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (bu *BlogUpdate) SetNillableUpdatedBy(s *string) *BlogUpdate {
	if s != nil {
		bu.SetUpdatedBy(*s)
	}
	return bu
}

// SetIsDeleted sets the "is_deleted" field.
func (bu *BlogUpdate) SetIsDeleted(u uint8) *BlogUpdate {
	bu.mutation.ResetIsDeleted()
	bu.mutation.SetIsDeleted(u)
	return bu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (bu *BlogUpdate) SetNillableIsDeleted(u *uint8) *BlogUpdate {
	if u != nil {
		bu.SetIsDeleted(*u)
	}
	return bu
}

// AddIsDeleted adds u to the "is_deleted" field.
func (bu *BlogUpdate) AddIsDeleted(u int8) *BlogUpdate {
	bu.mutation.AddIsDeleted(u)
	return bu
}

// SetDeletedAt sets the "deleted_at" field.
func (bu *BlogUpdate) SetDeletedAt(i int64) *BlogUpdate {
	bu.mutation.ResetDeletedAt()
	bu.mutation.SetDeletedAt(i)
	return bu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bu *BlogUpdate) SetNillableDeletedAt(i *int64) *BlogUpdate {
	if i != nil {
		bu.SetDeletedAt(*i)
	}
	return bu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (bu *BlogUpdate) AddDeletedAt(i int64) *BlogUpdate {
	bu.mutation.AddDeletedAt(i)
	return bu
}

// SetDeletedBy sets the "deleted_by" field.
func (bu *BlogUpdate) SetDeletedBy(s string) *BlogUpdate {
	bu.mutation.SetDeletedBy(s)
	return bu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (bu *BlogUpdate) SetNillableDeletedBy(s *string) *BlogUpdate {
	if s != nil {
		bu.SetDeletedBy(*s)
	}
	return bu
}

// SetAccountID sets the "account_id" field.
func (bu *BlogUpdate) SetAccountID(i int) *BlogUpdate {
	bu.mutation.ResetAccountID()
	bu.mutation.SetAccountID(i)
	return bu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (bu *BlogUpdate) SetNillableAccountID(i *int) *BlogUpdate {
	if i != nil {
		bu.SetAccountID(*i)
	}
	return bu
}

// AddAccountID adds i to the "account_id" field.
func (bu *BlogUpdate) AddAccountID(i int) *BlogUpdate {
	bu.mutation.AddAccountID(i)
	return bu
}

// SetTitle sets the "title" field.
func (bu *BlogUpdate) SetTitle(s string) *BlogUpdate {
	bu.mutation.SetTitle(s)
	return bu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bu *BlogUpdate) SetNillableTitle(s *string) *BlogUpdate {
	if s != nil {
		bu.SetTitle(*s)
	}
	return bu
}

// SetDescription sets the "description" field.
func (bu *BlogUpdate) SetDescription(s string) *BlogUpdate {
	bu.mutation.SetDescription(s)
	return bu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bu *BlogUpdate) SetNillableDescription(s *string) *BlogUpdate {
	if s != nil {
		bu.SetDescription(*s)
	}
	return bu
}

// SetIsHidden sets the "is_hidden" field.
func (bu *BlogUpdate) SetIsHidden(i int8) *BlogUpdate {
	bu.mutation.ResetIsHidden()
	bu.mutation.SetIsHidden(i)
	return bu
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (bu *BlogUpdate) SetNillableIsHidden(i *int8) *BlogUpdate {
	if i != nil {
		bu.SetIsHidden(*i)
	}
	return bu
}

// AddIsHidden adds i to the "is_hidden" field.
func (bu *BlogUpdate) AddIsHidden(i int8) *BlogUpdate {
	bu.mutation.AddIsHidden(i)
	return bu
}

// SetTags sets the "tags" field.
func (bu *BlogUpdate) SetTags(s []string) *BlogUpdate {
	bu.mutation.SetTags(s)
	return bu
}

// AppendTags appends s to the "tags" field.
func (bu *BlogUpdate) AppendTags(s []string) *BlogUpdate {
	bu.mutation.AppendTags(s)
	return bu
}

// SetCover sets the "cover" field.
func (bu *BlogUpdate) SetCover(s string) *BlogUpdate {
	bu.mutation.SetCover(s)
	return bu
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (bu *BlogUpdate) SetNillableCover(s *string) *BlogUpdate {
	if s != nil {
		bu.SetCover(*s)
	}
	return bu
}

// SetContent sets the "content" field.
func (bu *BlogUpdate) SetContent(s string) *BlogUpdate {
	bu.mutation.SetContent(s)
	return bu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (bu *BlogUpdate) SetNillableContent(s *string) *BlogUpdate {
	if s != nil {
		bu.SetContent(*s)
	}
	return bu
}

// Mutation returns the BlogMutation object of the builder.
func (bu *BlogUpdate) Mutation() *BlogMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BlogUpdate) Save(ctx context.Context) (int, error) {
	if err := bu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlogUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlogUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlogUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BlogUpdate) defaults() error {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		if blog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized blog.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := blog.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bu *BlogUpdate) check() error {
	if v, ok := bu.mutation.Content(); ok {
		if err := blog.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Blog.content": %w`, err)}
		}
	}
	return nil
}

func (bu *BlogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blog.Table, blog.Columns, sqlgraph.NewFieldSpec(blog.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(blog.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(blog.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.UpdatedBy(); ok {
		_spec.SetField(blog.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := bu.mutation.IsDeleted(); ok {
		_spec.SetField(blog.FieldIsDeleted, field.TypeUint8, value)
	}
	if value, ok := bu.mutation.AddedIsDeleted(); ok {
		_spec.AddField(blog.FieldIsDeleted, field.TypeUint8, value)
	}
	if value, ok := bu.mutation.DeletedAt(); ok {
		_spec.SetField(blog.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(blog.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.DeletedBy(); ok {
		_spec.SetField(blog.FieldDeletedBy, field.TypeString, value)
	}
	if value, ok := bu.mutation.AccountID(); ok {
		_spec.SetField(blog.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedAccountID(); ok {
		_spec.AddField(blog.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := bu.mutation.Title(); ok {
		_spec.SetField(blog.FieldTitle, field.TypeString, value)
	}
	if value, ok := bu.mutation.Description(); ok {
		_spec.SetField(blog.FieldDescription, field.TypeString, value)
	}
	if value, ok := bu.mutation.IsHidden(); ok {
		_spec.SetField(blog.FieldIsHidden, field.TypeInt8, value)
	}
	if value, ok := bu.mutation.AddedIsHidden(); ok {
		_spec.AddField(blog.FieldIsHidden, field.TypeInt8, value)
	}
	if value, ok := bu.mutation.Tags(); ok {
		_spec.SetField(blog.FieldTags, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blog.FieldTags, value)
		})
	}
	if value, ok := bu.mutation.Cover(); ok {
		_spec.SetField(blog.FieldCover, field.TypeString, value)
	}
	if value, ok := bu.mutation.Content(); ok {
		_spec.SetField(blog.FieldContent, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BlogUpdateOne is the builder for updating a single Blog entity.
type BlogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlogMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BlogUpdateOne) SetUpdatedAt(i int64) *BlogUpdateOne {
	buo.mutation.ResetUpdatedAt()
	buo.mutation.SetUpdatedAt(i)
	return buo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (buo *BlogUpdateOne) AddUpdatedAt(i int64) *BlogUpdateOne {
	buo.mutation.AddUpdatedAt(i)
	return buo
}

// SetUpdatedBy sets the "updated_by" field.
func (buo *BlogUpdateOne) SetUpdatedBy(s string) *BlogUpdateOne {
	buo.mutation.SetUpdatedBy(s)
	return buo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableUpdatedBy(s *string) *BlogUpdateOne {
	if s != nil {
		buo.SetUpdatedBy(*s)
	}
	return buo
}

// SetIsDeleted sets the "is_deleted" field.
func (buo *BlogUpdateOne) SetIsDeleted(u uint8) *BlogUpdateOne {
	buo.mutation.ResetIsDeleted()
	buo.mutation.SetIsDeleted(u)
	return buo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableIsDeleted(u *uint8) *BlogUpdateOne {
	if u != nil {
		buo.SetIsDeleted(*u)
	}
	return buo
}

// AddIsDeleted adds u to the "is_deleted" field.
func (buo *BlogUpdateOne) AddIsDeleted(u int8) *BlogUpdateOne {
	buo.mutation.AddIsDeleted(u)
	return buo
}

// SetDeletedAt sets the "deleted_at" field.
func (buo *BlogUpdateOne) SetDeletedAt(i int64) *BlogUpdateOne {
	buo.mutation.ResetDeletedAt()
	buo.mutation.SetDeletedAt(i)
	return buo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableDeletedAt(i *int64) *BlogUpdateOne {
	if i != nil {
		buo.SetDeletedAt(*i)
	}
	return buo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (buo *BlogUpdateOne) AddDeletedAt(i int64) *BlogUpdateOne {
	buo.mutation.AddDeletedAt(i)
	return buo
}

// SetDeletedBy sets the "deleted_by" field.
func (buo *BlogUpdateOne) SetDeletedBy(s string) *BlogUpdateOne {
	buo.mutation.SetDeletedBy(s)
	return buo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableDeletedBy(s *string) *BlogUpdateOne {
	if s != nil {
		buo.SetDeletedBy(*s)
	}
	return buo
}

// SetAccountID sets the "account_id" field.
func (buo *BlogUpdateOne) SetAccountID(i int) *BlogUpdateOne {
	buo.mutation.ResetAccountID()
	buo.mutation.SetAccountID(i)
	return buo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableAccountID(i *int) *BlogUpdateOne {
	if i != nil {
		buo.SetAccountID(*i)
	}
	return buo
}

// AddAccountID adds i to the "account_id" field.
func (buo *BlogUpdateOne) AddAccountID(i int) *BlogUpdateOne {
	buo.mutation.AddAccountID(i)
	return buo
}

// SetTitle sets the "title" field.
func (buo *BlogUpdateOne) SetTitle(s string) *BlogUpdateOne {
	buo.mutation.SetTitle(s)
	return buo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableTitle(s *string) *BlogUpdateOne {
	if s != nil {
		buo.SetTitle(*s)
	}
	return buo
}

// SetDescription sets the "description" field.
func (buo *BlogUpdateOne) SetDescription(s string) *BlogUpdateOne {
	buo.mutation.SetDescription(s)
	return buo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableDescription(s *string) *BlogUpdateOne {
	if s != nil {
		buo.SetDescription(*s)
	}
	return buo
}

// SetIsHidden sets the "is_hidden" field.
func (buo *BlogUpdateOne) SetIsHidden(i int8) *BlogUpdateOne {
	buo.mutation.ResetIsHidden()
	buo.mutation.SetIsHidden(i)
	return buo
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableIsHidden(i *int8) *BlogUpdateOne {
	if i != nil {
		buo.SetIsHidden(*i)
	}
	return buo
}

// AddIsHidden adds i to the "is_hidden" field.
func (buo *BlogUpdateOne) AddIsHidden(i int8) *BlogUpdateOne {
	buo.mutation.AddIsHidden(i)
	return buo
}

// SetTags sets the "tags" field.
func (buo *BlogUpdateOne) SetTags(s []string) *BlogUpdateOne {
	buo.mutation.SetTags(s)
	return buo
}

// AppendTags appends s to the "tags" field.
func (buo *BlogUpdateOne) AppendTags(s []string) *BlogUpdateOne {
	buo.mutation.AppendTags(s)
	return buo
}

// SetCover sets the "cover" field.
func (buo *BlogUpdateOne) SetCover(s string) *BlogUpdateOne {
	buo.mutation.SetCover(s)
	return buo
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableCover(s *string) *BlogUpdateOne {
	if s != nil {
		buo.SetCover(*s)
	}
	return buo
}

// SetContent sets the "content" field.
func (buo *BlogUpdateOne) SetContent(s string) *BlogUpdateOne {
	buo.mutation.SetContent(s)
	return buo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableContent(s *string) *BlogUpdateOne {
	if s != nil {
		buo.SetContent(*s)
	}
	return buo
}

// Mutation returns the BlogMutation object of the builder.
func (buo *BlogUpdateOne) Mutation() *BlogMutation {
	return buo.mutation
}

// Where appends a list predicates to the BlogUpdate builder.
func (buo *BlogUpdateOne) Where(ps ...predicate.Blog) *BlogUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BlogUpdateOne) Select(field string, fields ...string) *BlogUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Blog entity.
func (buo *BlogUpdateOne) Save(ctx context.Context) (*Blog, error) {
	if err := buo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlogUpdateOne) SaveX(ctx context.Context) *Blog {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BlogUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlogUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BlogUpdateOne) defaults() error {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		if blog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized blog.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := blog.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (buo *BlogUpdateOne) check() error {
	if v, ok := buo.mutation.Content(); ok {
		if err := blog.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Blog.content": %w`, err)}
		}
	}
	return nil
}

func (buo *BlogUpdateOne) sqlSave(ctx context.Context) (_node *Blog, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blog.Table, blog.Columns, sqlgraph.NewFieldSpec(blog.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Blog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blog.FieldID)
		for _, f := range fields {
			if !blog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(blog.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(blog.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.UpdatedBy(); ok {
		_spec.SetField(blog.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := buo.mutation.IsDeleted(); ok {
		_spec.SetField(blog.FieldIsDeleted, field.TypeUint8, value)
	}
	if value, ok := buo.mutation.AddedIsDeleted(); ok {
		_spec.AddField(blog.FieldIsDeleted, field.TypeUint8, value)
	}
	if value, ok := buo.mutation.DeletedAt(); ok {
		_spec.SetField(blog.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(blog.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.DeletedBy(); ok {
		_spec.SetField(blog.FieldDeletedBy, field.TypeString, value)
	}
	if value, ok := buo.mutation.AccountID(); ok {
		_spec.SetField(blog.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedAccountID(); ok {
		_spec.AddField(blog.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := buo.mutation.Title(); ok {
		_spec.SetField(blog.FieldTitle, field.TypeString, value)
	}
	if value, ok := buo.mutation.Description(); ok {
		_spec.SetField(blog.FieldDescription, field.TypeString, value)
	}
	if value, ok := buo.mutation.IsHidden(); ok {
		_spec.SetField(blog.FieldIsHidden, field.TypeInt8, value)
	}
	if value, ok := buo.mutation.AddedIsHidden(); ok {
		_spec.AddField(blog.FieldIsHidden, field.TypeInt8, value)
	}
	if value, ok := buo.mutation.Tags(); ok {
		_spec.SetField(blog.FieldTags, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blog.FieldTags, value)
		})
	}
	if value, ok := buo.mutation.Cover(); ok {
		_spec.SetField(blog.FieldCover, field.TypeString, value)
	}
	if value, ok := buo.mutation.Content(); ok {
		_spec.SetField(blog.FieldContent, field.TypeString, value)
	}
	_node = &Blog{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
