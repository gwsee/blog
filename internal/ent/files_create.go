// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/files"
	"blog/internal/ent/filesextend"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FilesCreate is the builder for creating a Files entity.
type FilesCreate struct {
	config
	mutation *FilesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fc *FilesCreate) SetCreatedAt(i int64) *FilesCreate {
	fc.mutation.SetCreatedAt(i)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FilesCreate) SetNillableCreatedAt(i *int64) *FilesCreate {
	if i != nil {
		fc.SetCreatedAt(*i)
	}
	return fc
}

// SetCreatedBy sets the "created_by" field.
func (fc *FilesCreate) SetCreatedBy(i int64) *FilesCreate {
	fc.mutation.SetCreatedBy(i)
	return fc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fc *FilesCreate) SetNillableCreatedBy(i *int64) *FilesCreate {
	if i != nil {
		fc.SetCreatedBy(*i)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FilesCreate) SetUpdatedAt(i int64) *FilesCreate {
	fc.mutation.SetUpdatedAt(i)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FilesCreate) SetNillableUpdatedAt(i *int64) *FilesCreate {
	if i != nil {
		fc.SetUpdatedAt(*i)
	}
	return fc
}

// SetUpdatedBy sets the "updated_by" field.
func (fc *FilesCreate) SetUpdatedBy(i int64) *FilesCreate {
	fc.mutation.SetUpdatedBy(i)
	return fc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fc *FilesCreate) SetNillableUpdatedBy(i *int64) *FilesCreate {
	if i != nil {
		fc.SetUpdatedBy(*i)
	}
	return fc
}

// SetDeletedAt sets the "deleted_at" field.
func (fc *FilesCreate) SetDeletedAt(i int64) *FilesCreate {
	fc.mutation.SetDeletedAt(i)
	return fc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fc *FilesCreate) SetNillableDeletedAt(i *int64) *FilesCreate {
	if i != nil {
		fc.SetDeletedAt(*i)
	}
	return fc
}

// SetDeletedBy sets the "deleted_by" field.
func (fc *FilesCreate) SetDeletedBy(i int64) *FilesCreate {
	fc.mutation.SetDeletedBy(i)
	return fc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fc *FilesCreate) SetNillableDeletedBy(i *int64) *FilesCreate {
	if i != nil {
		fc.SetDeletedBy(*i)
	}
	return fc
}

// SetType sets the "type" field.
func (fc *FilesCreate) SetType(s string) *FilesCreate {
	fc.mutation.SetType(s)
	return fc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fc *FilesCreate) SetNillableType(s *string) *FilesCreate {
	if s != nil {
		fc.SetType(*s)
	}
	return fc
}

// SetSize sets the "size" field.
func (fc *FilesCreate) SetSize(i int64) *FilesCreate {
	fc.mutation.SetSize(i)
	return fc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fc *FilesCreate) SetNillableSize(i *int64) *FilesCreate {
	if i != nil {
		fc.SetSize(*i)
	}
	return fc
}

// SetName sets the "name" field.
func (fc *FilesCreate) SetName(s string) *FilesCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fc *FilesCreate) SetNillableName(s *string) *FilesCreate {
	if s != nil {
		fc.SetName(*s)
	}
	return fc
}

// SetPath sets the "path" field.
func (fc *FilesCreate) SetPath(s string) *FilesCreate {
	fc.mutation.SetPath(s)
	return fc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (fc *FilesCreate) SetNillablePath(s *string) *FilesCreate {
	if s != nil {
		fc.SetPath(*s)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FilesCreate) SetID(s string) *FilesCreate {
	fc.mutation.SetID(s)
	return fc
}

// AddExtendIDs adds the "extends" edge to the FilesExtend entity by IDs.
func (fc *FilesCreate) AddExtendIDs(ids ...int) *FilesCreate {
	fc.mutation.AddExtendIDs(ids...)
	return fc
}

// AddExtends adds the "extends" edges to the FilesExtend entity.
func (fc *FilesCreate) AddExtends(f ...*FilesExtend) *FilesCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fc.AddExtendIDs(ids...)
}

// Mutation returns the FilesMutation object of the builder.
func (fc *FilesCreate) Mutation() *FilesMutation {
	return fc.mutation
}

// Save creates the Files in the database.
func (fc *FilesCreate) Save(ctx context.Context) (*Files, error) {
	if err := fc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FilesCreate) SaveX(ctx context.Context) *Files {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FilesCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FilesCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FilesCreate) defaults() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := files.DefaultCreatedAt
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.CreatedBy(); !ok {
		v := files.DefaultCreatedBy
		fc.mutation.SetCreatedBy(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := files.DefaultUpdatedAt
		fc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedBy(); !ok {
		v := files.DefaultUpdatedBy
		fc.mutation.SetUpdatedBy(v)
	}
	if _, ok := fc.mutation.DeletedAt(); !ok {
		v := files.DefaultDeletedAt
		fc.mutation.SetDeletedAt(v)
	}
	if _, ok := fc.mutation.DeletedBy(); !ok {
		v := files.DefaultDeletedBy
		fc.mutation.SetDeletedBy(v)
	}
	if _, ok := fc.mutation.GetType(); !ok {
		v := files.DefaultType
		fc.mutation.SetType(v)
	}
	if _, ok := fc.mutation.Size(); !ok {
		v := files.DefaultSize
		fc.mutation.SetSize(v)
	}
	if _, ok := fc.mutation.Name(); !ok {
		v := files.DefaultName
		fc.mutation.SetName(v)
	}
	if _, ok := fc.mutation.Path(); !ok {
		v := files.DefaultPath
		fc.mutation.SetPath(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fc *FilesCreate) check() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Files.created_at"`)}
	}
	if _, ok := fc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Files.created_by"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Files.updated_at"`)}
	}
	if _, ok := fc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Files.updated_by"`)}
	}
	if _, ok := fc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Files.deleted_at"`)}
	}
	if _, ok := fc.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "Files.deleted_by"`)}
	}
	if _, ok := fc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Files.type"`)}
	}
	if _, ok := fc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Files.size"`)}
	}
	if _, ok := fc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Files.name"`)}
	}
	if _, ok := fc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Files.path"`)}
	}
	return nil
}

func (fc *FilesCreate) sqlSave(ctx context.Context) (*Files, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Files.ID type: %T", _spec.ID.Value)
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FilesCreate) createSpec() (*Files, *sqlgraph.CreateSpec) {
	var (
		_node = &Files{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(files.Table, sqlgraph.NewFieldSpec(files.FieldID, field.TypeString))
	)
	_spec.OnConflict = fc.conflict
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(files.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.CreatedBy(); ok {
		_spec.SetField(files.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(files.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.UpdatedBy(); ok {
		_spec.SetField(files.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := fc.mutation.DeletedAt(); ok {
		_spec.SetField(files.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := fc.mutation.DeletedBy(); ok {
		_spec.SetField(files.FieldDeletedBy, field.TypeInt64, value)
		_node.DeletedBy = value
	}
	if value, ok := fc.mutation.GetType(); ok {
		_spec.SetField(files.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := fc.mutation.Size(); ok {
		_spec.SetField(files.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.SetField(files.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fc.mutation.Path(); ok {
		_spec.SetField(files.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if nodes := fc.mutation.ExtendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   files.ExtendsTable,
			Columns: []string{files.ExtendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesextend.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Files.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FilesUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fc *FilesCreate) OnConflict(opts ...sql.ConflictOption) *FilesUpsertOne {
	fc.conflict = opts
	return &FilesUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Files.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FilesCreate) OnConflictColumns(columns ...string) *FilesUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FilesUpsertOne{
		create: fc,
	}
}

type (
	// FilesUpsertOne is the builder for "upsert"-ing
	//  one Files node.
	FilesUpsertOne struct {
		create *FilesCreate
	}

	// FilesUpsert is the "OnConflict" setter.
	FilesUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *FilesUpsert) SetUpdatedAt(v int64) *FilesUpsert {
	u.Set(files.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FilesUpsert) UpdateUpdatedAt() *FilesUpsert {
	u.SetExcluded(files.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FilesUpsert) AddUpdatedAt(v int64) *FilesUpsert {
	u.Add(files.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FilesUpsert) SetUpdatedBy(v int64) *FilesUpsert {
	u.Set(files.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FilesUpsert) UpdateUpdatedBy() *FilesUpsert {
	u.SetExcluded(files.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FilesUpsert) AddUpdatedBy(v int64) *FilesUpsert {
	u.Add(files.FieldUpdatedBy, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FilesUpsert) SetDeletedAt(v int64) *FilesUpsert {
	u.Set(files.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FilesUpsert) UpdateDeletedAt() *FilesUpsert {
	u.SetExcluded(files.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FilesUpsert) AddDeletedAt(v int64) *FilesUpsert {
	u.Add(files.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *FilesUpsert) SetDeletedBy(v int64) *FilesUpsert {
	u.Set(files.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *FilesUpsert) UpdateDeletedBy() *FilesUpsert {
	u.SetExcluded(files.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *FilesUpsert) AddDeletedBy(v int64) *FilesUpsert {
	u.Add(files.FieldDeletedBy, v)
	return u
}

// SetType sets the "type" field.
func (u *FilesUpsert) SetType(v string) *FilesUpsert {
	u.Set(files.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FilesUpsert) UpdateType() *FilesUpsert {
	u.SetExcluded(files.FieldType)
	return u
}

// SetSize sets the "size" field.
func (u *FilesUpsert) SetSize(v int64) *FilesUpsert {
	u.Set(files.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *FilesUpsert) UpdateSize() *FilesUpsert {
	u.SetExcluded(files.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *FilesUpsert) AddSize(v int64) *FilesUpsert {
	u.Add(files.FieldSize, v)
	return u
}

// SetName sets the "name" field.
func (u *FilesUpsert) SetName(v string) *FilesUpsert {
	u.Set(files.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FilesUpsert) UpdateName() *FilesUpsert {
	u.SetExcluded(files.FieldName)
	return u
}

// SetPath sets the "path" field.
func (u *FilesUpsert) SetPath(v string) *FilesUpsert {
	u.Set(files.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *FilesUpsert) UpdatePath() *FilesUpsert {
	u.SetExcluded(files.FieldPath)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Files.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(files.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FilesUpsertOne) UpdateNewValues() *FilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(files.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(files.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(files.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Files.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FilesUpsertOne) Ignore() *FilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FilesUpsertOne) DoNothing() *FilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FilesCreate.OnConflict
// documentation for more info.
func (u *FilesUpsertOne) Update(set func(*FilesUpsert)) *FilesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FilesUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FilesUpsertOne) SetUpdatedAt(v int64) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FilesUpsertOne) AddUpdatedAt(v int64) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FilesUpsertOne) UpdateUpdatedAt() *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FilesUpsertOne) SetUpdatedBy(v int64) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FilesUpsertOne) AddUpdatedBy(v int64) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FilesUpsertOne) UpdateUpdatedBy() *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FilesUpsertOne) SetDeletedAt(v int64) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FilesUpsertOne) AddDeletedAt(v int64) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FilesUpsertOne) UpdateDeletedAt() *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *FilesUpsertOne) SetDeletedBy(v int64) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *FilesUpsertOne) AddDeletedBy(v int64) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *FilesUpsertOne) UpdateDeletedBy() *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetType sets the "type" field.
func (u *FilesUpsertOne) SetType(v string) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FilesUpsertOne) UpdateType() *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateType()
	})
}

// SetSize sets the "size" field.
func (u *FilesUpsertOne) SetSize(v int64) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *FilesUpsertOne) AddSize(v int64) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *FilesUpsertOne) UpdateSize() *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateSize()
	})
}

// SetName sets the "name" field.
func (u *FilesUpsertOne) SetName(v string) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FilesUpsertOne) UpdateName() *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateName()
	})
}

// SetPath sets the "path" field.
func (u *FilesUpsertOne) SetPath(v string) *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *FilesUpsertOne) UpdatePath() *FilesUpsertOne {
	return u.Update(func(s *FilesUpsert) {
		s.UpdatePath()
	})
}

// Exec executes the query.
func (u *FilesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FilesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FilesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FilesUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FilesUpsertOne.ID is not supported by MySQL driver. Use FilesUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FilesUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FilesCreateBulk is the builder for creating many Files entities in bulk.
type FilesCreateBulk struct {
	config
	err      error
	builders []*FilesCreate
	conflict []sql.ConflictOption
}

// Save creates the Files entities in the database.
func (fcb *FilesCreateBulk) Save(ctx context.Context) ([]*Files, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Files, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FilesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FilesCreateBulk) SaveX(ctx context.Context) []*Files {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FilesCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FilesCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Files.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FilesUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fcb *FilesCreateBulk) OnConflict(opts ...sql.ConflictOption) *FilesUpsertBulk {
	fcb.conflict = opts
	return &FilesUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Files.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FilesCreateBulk) OnConflictColumns(columns ...string) *FilesUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FilesUpsertBulk{
		create: fcb,
	}
}

// FilesUpsertBulk is the builder for "upsert"-ing
// a bulk of Files nodes.
type FilesUpsertBulk struct {
	create *FilesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Files.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(files.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FilesUpsertBulk) UpdateNewValues() *FilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(files.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(files.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(files.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Files.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FilesUpsertBulk) Ignore() *FilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FilesUpsertBulk) DoNothing() *FilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FilesCreateBulk.OnConflict
// documentation for more info.
func (u *FilesUpsertBulk) Update(set func(*FilesUpsert)) *FilesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FilesUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FilesUpsertBulk) SetUpdatedAt(v int64) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FilesUpsertBulk) AddUpdatedAt(v int64) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FilesUpsertBulk) UpdateUpdatedAt() *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FilesUpsertBulk) SetUpdatedBy(v int64) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FilesUpsertBulk) AddUpdatedBy(v int64) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FilesUpsertBulk) UpdateUpdatedBy() *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FilesUpsertBulk) SetDeletedAt(v int64) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FilesUpsertBulk) AddDeletedAt(v int64) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FilesUpsertBulk) UpdateDeletedAt() *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *FilesUpsertBulk) SetDeletedBy(v int64) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *FilesUpsertBulk) AddDeletedBy(v int64) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *FilesUpsertBulk) UpdateDeletedBy() *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetType sets the "type" field.
func (u *FilesUpsertBulk) SetType(v string) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FilesUpsertBulk) UpdateType() *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateType()
	})
}

// SetSize sets the "size" field.
func (u *FilesUpsertBulk) SetSize(v int64) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *FilesUpsertBulk) AddSize(v int64) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *FilesUpsertBulk) UpdateSize() *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateSize()
	})
}

// SetName sets the "name" field.
func (u *FilesUpsertBulk) SetName(v string) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FilesUpsertBulk) UpdateName() *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.UpdateName()
	})
}

// SetPath sets the "path" field.
func (u *FilesUpsertBulk) SetPath(v string) *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *FilesUpsertBulk) UpdatePath() *FilesUpsertBulk {
	return u.Update(func(s *FilesUpsert) {
		s.UpdatePath()
	})
}

// Exec executes the query.
func (u *FilesUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FilesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FilesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FilesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
