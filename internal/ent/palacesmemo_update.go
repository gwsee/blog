// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/palacesmemo"
	"blog/internal/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PalacesMemoUpdate is the builder for updating PalacesMemo entities.
type PalacesMemoUpdate struct {
	config
	hooks    []Hook
	mutation *PalacesMemoMutation
}

// Where appends a list predicates to the PalacesMemoUpdate builder.
func (pmu *PalacesMemoUpdate) Where(ps ...predicate.PalacesMemo) *PalacesMemoUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetUpdatedAt sets the "updated_at" field.
func (pmu *PalacesMemoUpdate) SetUpdatedAt(i int64) *PalacesMemoUpdate {
	pmu.mutation.ResetUpdatedAt()
	pmu.mutation.SetUpdatedAt(i)
	return pmu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pmu *PalacesMemoUpdate) AddUpdatedAt(i int64) *PalacesMemoUpdate {
	pmu.mutation.AddUpdatedAt(i)
	return pmu
}

// SetUpdatedBy sets the "updated_by" field.
func (pmu *PalacesMemoUpdate) SetUpdatedBy(i int64) *PalacesMemoUpdate {
	pmu.mutation.ResetUpdatedBy()
	pmu.mutation.SetUpdatedBy(i)
	return pmu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pmu *PalacesMemoUpdate) SetNillableUpdatedBy(i *int64) *PalacesMemoUpdate {
	if i != nil {
		pmu.SetUpdatedBy(*i)
	}
	return pmu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (pmu *PalacesMemoUpdate) AddUpdatedBy(i int64) *PalacesMemoUpdate {
	pmu.mutation.AddUpdatedBy(i)
	return pmu
}

// SetDeletedAt sets the "deleted_at" field.
func (pmu *PalacesMemoUpdate) SetDeletedAt(i int64) *PalacesMemoUpdate {
	pmu.mutation.ResetDeletedAt()
	pmu.mutation.SetDeletedAt(i)
	return pmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmu *PalacesMemoUpdate) SetNillableDeletedAt(i *int64) *PalacesMemoUpdate {
	if i != nil {
		pmu.SetDeletedAt(*i)
	}
	return pmu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (pmu *PalacesMemoUpdate) AddDeletedAt(i int64) *PalacesMemoUpdate {
	pmu.mutation.AddDeletedAt(i)
	return pmu
}

// SetDeletedBy sets the "deleted_by" field.
func (pmu *PalacesMemoUpdate) SetDeletedBy(i int64) *PalacesMemoUpdate {
	pmu.mutation.ResetDeletedBy()
	pmu.mutation.SetDeletedBy(i)
	return pmu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pmu *PalacesMemoUpdate) SetNillableDeletedBy(i *int64) *PalacesMemoUpdate {
	if i != nil {
		pmu.SetDeletedBy(*i)
	}
	return pmu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (pmu *PalacesMemoUpdate) AddDeletedBy(i int64) *PalacesMemoUpdate {
	pmu.mutation.AddDeletedBy(i)
	return pmu
}

// SetAccountID sets the "account_id" field.
func (pmu *PalacesMemoUpdate) SetAccountID(i int) *PalacesMemoUpdate {
	pmu.mutation.ResetAccountID()
	pmu.mutation.SetAccountID(i)
	return pmu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (pmu *PalacesMemoUpdate) SetNillableAccountID(i *int) *PalacesMemoUpdate {
	if i != nil {
		pmu.SetAccountID(*i)
	}
	return pmu
}

// AddAccountID adds i to the "account_id" field.
func (pmu *PalacesMemoUpdate) AddAccountID(i int) *PalacesMemoUpdate {
	pmu.mutation.AddAccountID(i)
	return pmu
}

// SetName sets the "name" field.
func (pmu *PalacesMemoUpdate) SetName(s string) *PalacesMemoUpdate {
	pmu.mutation.SetName(s)
	return pmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pmu *PalacesMemoUpdate) SetNillableName(s *string) *PalacesMemoUpdate {
	if s != nil {
		pmu.SetName(*s)
	}
	return pmu
}

// SetContent sets the "content" field.
func (pmu *PalacesMemoUpdate) SetContent(s string) *PalacesMemoUpdate {
	pmu.mutation.SetContent(s)
	return pmu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pmu *PalacesMemoUpdate) SetNillableContent(s *string) *PalacesMemoUpdate {
	if s != nil {
		pmu.SetContent(*s)
	}
	return pmu
}

// SetStatus sets the "status" field.
func (pmu *PalacesMemoUpdate) SetStatus(i int8) *PalacesMemoUpdate {
	pmu.mutation.ResetStatus()
	pmu.mutation.SetStatus(i)
	return pmu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pmu *PalacesMemoUpdate) SetNillableStatus(i *int8) *PalacesMemoUpdate {
	if i != nil {
		pmu.SetStatus(*i)
	}
	return pmu
}

// AddStatus adds i to the "status" field.
func (pmu *PalacesMemoUpdate) AddStatus(i int8) *PalacesMemoUpdate {
	pmu.mutation.AddStatus(i)
	return pmu
}

// Mutation returns the PalacesMemoMutation object of the builder.
func (pmu *PalacesMemoUpdate) Mutation() *PalacesMemoMutation {
	return pmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *PalacesMemoUpdate) Save(ctx context.Context) (int, error) {
	if err := pmu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pmu.sqlSave, pmu.mutation, pmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *PalacesMemoUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *PalacesMemoUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *PalacesMemoUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmu *PalacesMemoUpdate) defaults() error {
	if _, ok := pmu.mutation.CreatedAt(); !ok {
		if palacesmemo.UpdateDefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized palacesmemo.UpdateDefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := palacesmemo.UpdateDefaultCreatedAt()
		pmu.mutation.SetCreatedAt(v)
	}
	if _, ok := pmu.mutation.UpdatedAt(); !ok {
		if palacesmemo.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized palacesmemo.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := palacesmemo.UpdateDefaultUpdatedAt()
		pmu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pmu *PalacesMemoUpdate) check() error {
	if v, ok := pmu.mutation.Content(); ok {
		if err := palacesmemo.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "PalacesMemo.content": %w`, err)}
		}
	}
	return nil
}

func (pmu *PalacesMemoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(palacesmemo.Table, palacesmemo.Columns, sqlgraph.NewFieldSpec(palacesmemo.FieldID, field.TypeInt))
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.CreatedAt(); ok {
		_spec.SetField(palacesmemo.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(palacesmemo.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.UpdatedAt(); ok {
		_spec.SetField(palacesmemo.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(palacesmemo.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.UpdatedBy(); ok {
		_spec.SetField(palacesmemo.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(palacesmemo.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.DeletedAt(); ok {
		_spec.SetField(palacesmemo.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(palacesmemo.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.DeletedBy(); ok {
		_spec.SetField(palacesmemo.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(palacesmemo.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.AccountID(); ok {
		_spec.SetField(palacesmemo.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := pmu.mutation.AddedAccountID(); ok {
		_spec.AddField(palacesmemo.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := pmu.mutation.Name(); ok {
		_spec.SetField(palacesmemo.FieldName, field.TypeString, value)
	}
	if value, ok := pmu.mutation.Content(); ok {
		_spec.SetField(palacesmemo.FieldContent, field.TypeString, value)
	}
	if value, ok := pmu.mutation.Status(); ok {
		_spec.SetField(palacesmemo.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := pmu.mutation.AddedStatus(); ok {
		_spec.AddField(palacesmemo.FieldStatus, field.TypeInt8, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{palacesmemo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmu.mutation.done = true
	return n, nil
}

// PalacesMemoUpdateOne is the builder for updating a single PalacesMemo entity.
type PalacesMemoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PalacesMemoMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pmuo *PalacesMemoUpdateOne) SetUpdatedAt(i int64) *PalacesMemoUpdateOne {
	pmuo.mutation.ResetUpdatedAt()
	pmuo.mutation.SetUpdatedAt(i)
	return pmuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pmuo *PalacesMemoUpdateOne) AddUpdatedAt(i int64) *PalacesMemoUpdateOne {
	pmuo.mutation.AddUpdatedAt(i)
	return pmuo
}

// SetUpdatedBy sets the "updated_by" field.
func (pmuo *PalacesMemoUpdateOne) SetUpdatedBy(i int64) *PalacesMemoUpdateOne {
	pmuo.mutation.ResetUpdatedBy()
	pmuo.mutation.SetUpdatedBy(i)
	return pmuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pmuo *PalacesMemoUpdateOne) SetNillableUpdatedBy(i *int64) *PalacesMemoUpdateOne {
	if i != nil {
		pmuo.SetUpdatedBy(*i)
	}
	return pmuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (pmuo *PalacesMemoUpdateOne) AddUpdatedBy(i int64) *PalacesMemoUpdateOne {
	pmuo.mutation.AddUpdatedBy(i)
	return pmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pmuo *PalacesMemoUpdateOne) SetDeletedAt(i int64) *PalacesMemoUpdateOne {
	pmuo.mutation.ResetDeletedAt()
	pmuo.mutation.SetDeletedAt(i)
	return pmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmuo *PalacesMemoUpdateOne) SetNillableDeletedAt(i *int64) *PalacesMemoUpdateOne {
	if i != nil {
		pmuo.SetDeletedAt(*i)
	}
	return pmuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (pmuo *PalacesMemoUpdateOne) AddDeletedAt(i int64) *PalacesMemoUpdateOne {
	pmuo.mutation.AddDeletedAt(i)
	return pmuo
}

// SetDeletedBy sets the "deleted_by" field.
func (pmuo *PalacesMemoUpdateOne) SetDeletedBy(i int64) *PalacesMemoUpdateOne {
	pmuo.mutation.ResetDeletedBy()
	pmuo.mutation.SetDeletedBy(i)
	return pmuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pmuo *PalacesMemoUpdateOne) SetNillableDeletedBy(i *int64) *PalacesMemoUpdateOne {
	if i != nil {
		pmuo.SetDeletedBy(*i)
	}
	return pmuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (pmuo *PalacesMemoUpdateOne) AddDeletedBy(i int64) *PalacesMemoUpdateOne {
	pmuo.mutation.AddDeletedBy(i)
	return pmuo
}

// SetAccountID sets the "account_id" field.
func (pmuo *PalacesMemoUpdateOne) SetAccountID(i int) *PalacesMemoUpdateOne {
	pmuo.mutation.ResetAccountID()
	pmuo.mutation.SetAccountID(i)
	return pmuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (pmuo *PalacesMemoUpdateOne) SetNillableAccountID(i *int) *PalacesMemoUpdateOne {
	if i != nil {
		pmuo.SetAccountID(*i)
	}
	return pmuo
}

// AddAccountID adds i to the "account_id" field.
func (pmuo *PalacesMemoUpdateOne) AddAccountID(i int) *PalacesMemoUpdateOne {
	pmuo.mutation.AddAccountID(i)
	return pmuo
}

// SetName sets the "name" field.
func (pmuo *PalacesMemoUpdateOne) SetName(s string) *PalacesMemoUpdateOne {
	pmuo.mutation.SetName(s)
	return pmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pmuo *PalacesMemoUpdateOne) SetNillableName(s *string) *PalacesMemoUpdateOne {
	if s != nil {
		pmuo.SetName(*s)
	}
	return pmuo
}

// SetContent sets the "content" field.
func (pmuo *PalacesMemoUpdateOne) SetContent(s string) *PalacesMemoUpdateOne {
	pmuo.mutation.SetContent(s)
	return pmuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pmuo *PalacesMemoUpdateOne) SetNillableContent(s *string) *PalacesMemoUpdateOne {
	if s != nil {
		pmuo.SetContent(*s)
	}
	return pmuo
}

// SetStatus sets the "status" field.
func (pmuo *PalacesMemoUpdateOne) SetStatus(i int8) *PalacesMemoUpdateOne {
	pmuo.mutation.ResetStatus()
	pmuo.mutation.SetStatus(i)
	return pmuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pmuo *PalacesMemoUpdateOne) SetNillableStatus(i *int8) *PalacesMemoUpdateOne {
	if i != nil {
		pmuo.SetStatus(*i)
	}
	return pmuo
}

// AddStatus adds i to the "status" field.
func (pmuo *PalacesMemoUpdateOne) AddStatus(i int8) *PalacesMemoUpdateOne {
	pmuo.mutation.AddStatus(i)
	return pmuo
}

// Mutation returns the PalacesMemoMutation object of the builder.
func (pmuo *PalacesMemoUpdateOne) Mutation() *PalacesMemoMutation {
	return pmuo.mutation
}

// Where appends a list predicates to the PalacesMemoUpdate builder.
func (pmuo *PalacesMemoUpdateOne) Where(ps ...predicate.PalacesMemo) *PalacesMemoUpdateOne {
	pmuo.mutation.Where(ps...)
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *PalacesMemoUpdateOne) Select(field string, fields ...string) *PalacesMemoUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated PalacesMemo entity.
func (pmuo *PalacesMemoUpdateOne) Save(ctx context.Context) (*PalacesMemo, error) {
	if err := pmuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pmuo.sqlSave, pmuo.mutation, pmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *PalacesMemoUpdateOne) SaveX(ctx context.Context) *PalacesMemo {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *PalacesMemoUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *PalacesMemoUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmuo *PalacesMemoUpdateOne) defaults() error {
	if _, ok := pmuo.mutation.CreatedAt(); !ok {
		if palacesmemo.UpdateDefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized palacesmemo.UpdateDefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := palacesmemo.UpdateDefaultCreatedAt()
		pmuo.mutation.SetCreatedAt(v)
	}
	if _, ok := pmuo.mutation.UpdatedAt(); !ok {
		if palacesmemo.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized palacesmemo.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := palacesmemo.UpdateDefaultUpdatedAt()
		pmuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pmuo *PalacesMemoUpdateOne) check() error {
	if v, ok := pmuo.mutation.Content(); ok {
		if err := palacesmemo.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "PalacesMemo.content": %w`, err)}
		}
	}
	return nil
}

func (pmuo *PalacesMemoUpdateOne) sqlSave(ctx context.Context) (_node *PalacesMemo, err error) {
	if err := pmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(palacesmemo.Table, palacesmemo.Columns, sqlgraph.NewFieldSpec(palacesmemo.FieldID, field.TypeInt))
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PalacesMemo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, palacesmemo.FieldID)
		for _, f := range fields {
			if !palacesmemo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != palacesmemo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.CreatedAt(); ok {
		_spec.SetField(palacesmemo.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(palacesmemo.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(palacesmemo.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(palacesmemo.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.UpdatedBy(); ok {
		_spec.SetField(palacesmemo.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(palacesmemo.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.DeletedAt(); ok {
		_spec.SetField(palacesmemo.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(palacesmemo.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.DeletedBy(); ok {
		_spec.SetField(palacesmemo.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(palacesmemo.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.AccountID(); ok {
		_spec.SetField(palacesmemo.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := pmuo.mutation.AddedAccountID(); ok {
		_spec.AddField(palacesmemo.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := pmuo.mutation.Name(); ok {
		_spec.SetField(palacesmemo.FieldName, field.TypeString, value)
	}
	if value, ok := pmuo.mutation.Content(); ok {
		_spec.SetField(palacesmemo.FieldContent, field.TypeString, value)
	}
	if value, ok := pmuo.mutation.Status(); ok {
		_spec.SetField(palacesmemo.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := pmuo.mutation.AddedStatus(); ok {
		_spec.AddField(palacesmemo.FieldStatus, field.TypeInt8, value)
	}
	_node = &PalacesMemo{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{palacesmemo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmuo.mutation.done = true
	return _node, nil
}
