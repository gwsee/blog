// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/palacesmemory"
	"blog/internal/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PalacesMemoryUpdate is the builder for updating PalacesMemory entities.
type PalacesMemoryUpdate struct {
	config
	hooks    []Hook
	mutation *PalacesMemoryMutation
}

// Where appends a list predicates to the PalacesMemoryUpdate builder.
func (pmu *PalacesMemoryUpdate) Where(ps ...predicate.PalacesMemory) *PalacesMemoryUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetUpdatedAt sets the "updated_at" field.
func (pmu *PalacesMemoryUpdate) SetUpdatedAt(i int64) *PalacesMemoryUpdate {
	pmu.mutation.ResetUpdatedAt()
	pmu.mutation.SetUpdatedAt(i)
	return pmu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pmu *PalacesMemoryUpdate) AddUpdatedAt(i int64) *PalacesMemoryUpdate {
	pmu.mutation.AddUpdatedAt(i)
	return pmu
}

// SetUpdatedBy sets the "updated_by" field.
func (pmu *PalacesMemoryUpdate) SetUpdatedBy(i int64) *PalacesMemoryUpdate {
	pmu.mutation.ResetUpdatedBy()
	pmu.mutation.SetUpdatedBy(i)
	return pmu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pmu *PalacesMemoryUpdate) SetNillableUpdatedBy(i *int64) *PalacesMemoryUpdate {
	if i != nil {
		pmu.SetUpdatedBy(*i)
	}
	return pmu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (pmu *PalacesMemoryUpdate) AddUpdatedBy(i int64) *PalacesMemoryUpdate {
	pmu.mutation.AddUpdatedBy(i)
	return pmu
}

// SetDeletedAt sets the "deleted_at" field.
func (pmu *PalacesMemoryUpdate) SetDeletedAt(i int64) *PalacesMemoryUpdate {
	pmu.mutation.ResetDeletedAt()
	pmu.mutation.SetDeletedAt(i)
	return pmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmu *PalacesMemoryUpdate) SetNillableDeletedAt(i *int64) *PalacesMemoryUpdate {
	if i != nil {
		pmu.SetDeletedAt(*i)
	}
	return pmu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (pmu *PalacesMemoryUpdate) AddDeletedAt(i int64) *PalacesMemoryUpdate {
	pmu.mutation.AddDeletedAt(i)
	return pmu
}

// SetDeletedBy sets the "deleted_by" field.
func (pmu *PalacesMemoryUpdate) SetDeletedBy(i int64) *PalacesMemoryUpdate {
	pmu.mutation.ResetDeletedBy()
	pmu.mutation.SetDeletedBy(i)
	return pmu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pmu *PalacesMemoryUpdate) SetNillableDeletedBy(i *int64) *PalacesMemoryUpdate {
	if i != nil {
		pmu.SetDeletedBy(*i)
	}
	return pmu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (pmu *PalacesMemoryUpdate) AddDeletedBy(i int64) *PalacesMemoryUpdate {
	pmu.mutation.AddDeletedBy(i)
	return pmu
}

// SetStatus sets the "status" field.
func (pmu *PalacesMemoryUpdate) SetStatus(i int8) *PalacesMemoryUpdate {
	pmu.mutation.ResetStatus()
	pmu.mutation.SetStatus(i)
	return pmu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pmu *PalacesMemoryUpdate) SetNillableStatus(i *int8) *PalacesMemoryUpdate {
	if i != nil {
		pmu.SetStatus(*i)
	}
	return pmu
}

// AddStatus adds i to the "status" field.
func (pmu *PalacesMemoryUpdate) AddStatus(i int8) *PalacesMemoryUpdate {
	pmu.mutation.AddStatus(i)
	return pmu
}

// Mutation returns the PalacesMemoryMutation object of the builder.
func (pmu *PalacesMemoryUpdate) Mutation() *PalacesMemoryMutation {
	return pmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *PalacesMemoryUpdate) Save(ctx context.Context) (int, error) {
	if err := pmu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pmu.sqlSave, pmu.mutation, pmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *PalacesMemoryUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *PalacesMemoryUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *PalacesMemoryUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmu *PalacesMemoryUpdate) defaults() error {
	if _, ok := pmu.mutation.CreatedAt(); !ok {
		if palacesmemory.UpdateDefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized palacesmemory.UpdateDefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := palacesmemory.UpdateDefaultCreatedAt()
		pmu.mutation.SetCreatedAt(v)
	}
	if _, ok := pmu.mutation.UpdatedAt(); !ok {
		if palacesmemory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized palacesmemory.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := palacesmemory.UpdateDefaultUpdatedAt()
		pmu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pmu *PalacesMemoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(palacesmemory.Table, palacesmemory.Columns, sqlgraph.NewFieldSpec(palacesmemory.FieldID, field.TypeInt))
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.CreatedAt(); ok {
		_spec.SetField(palacesmemory.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(palacesmemory.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.UpdatedAt(); ok {
		_spec.SetField(palacesmemory.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(palacesmemory.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.UpdatedBy(); ok {
		_spec.SetField(palacesmemory.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(palacesmemory.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.DeletedAt(); ok {
		_spec.SetField(palacesmemory.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(palacesmemory.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.DeletedBy(); ok {
		_spec.SetField(palacesmemory.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(palacesmemory.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := pmu.mutation.Status(); ok {
		_spec.SetField(palacesmemory.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := pmu.mutation.AddedStatus(); ok {
		_spec.AddField(palacesmemory.FieldStatus, field.TypeInt8, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{palacesmemory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmu.mutation.done = true
	return n, nil
}

// PalacesMemoryUpdateOne is the builder for updating a single PalacesMemory entity.
type PalacesMemoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PalacesMemoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pmuo *PalacesMemoryUpdateOne) SetUpdatedAt(i int64) *PalacesMemoryUpdateOne {
	pmuo.mutation.ResetUpdatedAt()
	pmuo.mutation.SetUpdatedAt(i)
	return pmuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pmuo *PalacesMemoryUpdateOne) AddUpdatedAt(i int64) *PalacesMemoryUpdateOne {
	pmuo.mutation.AddUpdatedAt(i)
	return pmuo
}

// SetUpdatedBy sets the "updated_by" field.
func (pmuo *PalacesMemoryUpdateOne) SetUpdatedBy(i int64) *PalacesMemoryUpdateOne {
	pmuo.mutation.ResetUpdatedBy()
	pmuo.mutation.SetUpdatedBy(i)
	return pmuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pmuo *PalacesMemoryUpdateOne) SetNillableUpdatedBy(i *int64) *PalacesMemoryUpdateOne {
	if i != nil {
		pmuo.SetUpdatedBy(*i)
	}
	return pmuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (pmuo *PalacesMemoryUpdateOne) AddUpdatedBy(i int64) *PalacesMemoryUpdateOne {
	pmuo.mutation.AddUpdatedBy(i)
	return pmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pmuo *PalacesMemoryUpdateOne) SetDeletedAt(i int64) *PalacesMemoryUpdateOne {
	pmuo.mutation.ResetDeletedAt()
	pmuo.mutation.SetDeletedAt(i)
	return pmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmuo *PalacesMemoryUpdateOne) SetNillableDeletedAt(i *int64) *PalacesMemoryUpdateOne {
	if i != nil {
		pmuo.SetDeletedAt(*i)
	}
	return pmuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (pmuo *PalacesMemoryUpdateOne) AddDeletedAt(i int64) *PalacesMemoryUpdateOne {
	pmuo.mutation.AddDeletedAt(i)
	return pmuo
}

// SetDeletedBy sets the "deleted_by" field.
func (pmuo *PalacesMemoryUpdateOne) SetDeletedBy(i int64) *PalacesMemoryUpdateOne {
	pmuo.mutation.ResetDeletedBy()
	pmuo.mutation.SetDeletedBy(i)
	return pmuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pmuo *PalacesMemoryUpdateOne) SetNillableDeletedBy(i *int64) *PalacesMemoryUpdateOne {
	if i != nil {
		pmuo.SetDeletedBy(*i)
	}
	return pmuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (pmuo *PalacesMemoryUpdateOne) AddDeletedBy(i int64) *PalacesMemoryUpdateOne {
	pmuo.mutation.AddDeletedBy(i)
	return pmuo
}

// SetStatus sets the "status" field.
func (pmuo *PalacesMemoryUpdateOne) SetStatus(i int8) *PalacesMemoryUpdateOne {
	pmuo.mutation.ResetStatus()
	pmuo.mutation.SetStatus(i)
	return pmuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pmuo *PalacesMemoryUpdateOne) SetNillableStatus(i *int8) *PalacesMemoryUpdateOne {
	if i != nil {
		pmuo.SetStatus(*i)
	}
	return pmuo
}

// AddStatus adds i to the "status" field.
func (pmuo *PalacesMemoryUpdateOne) AddStatus(i int8) *PalacesMemoryUpdateOne {
	pmuo.mutation.AddStatus(i)
	return pmuo
}

// Mutation returns the PalacesMemoryMutation object of the builder.
func (pmuo *PalacesMemoryUpdateOne) Mutation() *PalacesMemoryMutation {
	return pmuo.mutation
}

// Where appends a list predicates to the PalacesMemoryUpdate builder.
func (pmuo *PalacesMemoryUpdateOne) Where(ps ...predicate.PalacesMemory) *PalacesMemoryUpdateOne {
	pmuo.mutation.Where(ps...)
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *PalacesMemoryUpdateOne) Select(field string, fields ...string) *PalacesMemoryUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated PalacesMemory entity.
func (pmuo *PalacesMemoryUpdateOne) Save(ctx context.Context) (*PalacesMemory, error) {
	if err := pmuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pmuo.sqlSave, pmuo.mutation, pmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *PalacesMemoryUpdateOne) SaveX(ctx context.Context) *PalacesMemory {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *PalacesMemoryUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *PalacesMemoryUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmuo *PalacesMemoryUpdateOne) defaults() error {
	if _, ok := pmuo.mutation.CreatedAt(); !ok {
		if palacesmemory.UpdateDefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized palacesmemory.UpdateDefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := palacesmemory.UpdateDefaultCreatedAt()
		pmuo.mutation.SetCreatedAt(v)
	}
	if _, ok := pmuo.mutation.UpdatedAt(); !ok {
		if palacesmemory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized palacesmemory.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := palacesmemory.UpdateDefaultUpdatedAt()
		pmuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pmuo *PalacesMemoryUpdateOne) sqlSave(ctx context.Context) (_node *PalacesMemory, err error) {
	_spec := sqlgraph.NewUpdateSpec(palacesmemory.Table, palacesmemory.Columns, sqlgraph.NewFieldSpec(palacesmemory.FieldID, field.TypeInt))
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PalacesMemory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, palacesmemory.FieldID)
		for _, f := range fields {
			if !palacesmemory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != palacesmemory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.CreatedAt(); ok {
		_spec.SetField(palacesmemory.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(palacesmemory.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(palacesmemory.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(palacesmemory.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.UpdatedBy(); ok {
		_spec.SetField(palacesmemory.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(palacesmemory.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.DeletedAt(); ok {
		_spec.SetField(palacesmemory.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(palacesmemory.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.DeletedBy(); ok {
		_spec.SetField(palacesmemory.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(palacesmemory.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := pmuo.mutation.Status(); ok {
		_spec.SetField(palacesmemory.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := pmuo.mutation.AddedStatus(); ok {
		_spec.AddField(palacesmemory.FieldStatus, field.TypeInt8, value)
	}
	_node = &PalacesMemory{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{palacesmemory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmuo.mutation.done = true
	return _node, nil
}
