// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/filesextend"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 文件关系表
type FilesExtend struct {
	config `json:"-"`
	// ID of the ent.
	// 当前账户关联的文件的ID
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 创建人
	CreatedBy int64 `json:"created_by,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 更新人
	UpdatedBy int64 `json:"updated_by,omitempty"`
	// 软删除时间
	DeletedAt int64 `json:"deleted_at,omitempty"`
	// 删除人
	DeletedBy int64 `json:"deleted_by,omitempty"`
	// 文件的ID
	FileID string `json:"file_id,omitempty"`
	// 所属的用户
	UserID int `json:"user_id,omitempty"`
	// 文件名称
	Filename string `json:"filename,omitempty"`
	// 文件来源的表
	From string `json:"from,omitempty"`
	// 是否隐藏
	IsHidden     int8 `json:"is_hidden,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FilesExtend) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case filesextend.FieldID, filesextend.FieldCreatedAt, filesextend.FieldCreatedBy, filesextend.FieldUpdatedAt, filesextend.FieldUpdatedBy, filesextend.FieldDeletedAt, filesextend.FieldDeletedBy, filesextend.FieldUserID, filesextend.FieldIsHidden:
			values[i] = new(sql.NullInt64)
		case filesextend.FieldFileID, filesextend.FieldFilename, filesextend.FieldFrom:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FilesExtend fields.
func (fe *FilesExtend) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filesextend.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fe.ID = int(value.Int64)
		case filesextend.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fe.CreatedAt = value.Int64
			}
		case filesextend.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				fe.CreatedBy = value.Int64
			}
		case filesextend.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fe.UpdatedAt = value.Int64
			}
		case filesextend.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				fe.UpdatedBy = value.Int64
			}
		case filesextend.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fe.DeletedAt = value.Int64
			}
		case filesextend.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				fe.DeletedBy = value.Int64
			}
		case filesextend.FieldFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_id", values[i])
			} else if value.Valid {
				fe.FileID = value.String
			}
		case filesextend.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				fe.UserID = int(value.Int64)
			}
		case filesextend.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				fe.Filename = value.String
			}
		case filesextend.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				fe.From = value.String
			}
		case filesextend.FieldIsHidden:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_hidden", values[i])
			} else if value.Valid {
				fe.IsHidden = int8(value.Int64)
			}
		default:
			fe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FilesExtend.
// This includes values selected through modifiers, order, etc.
func (fe *FilesExtend) Value(name string) (ent.Value, error) {
	return fe.selectValues.Get(name)
}

// Update returns a builder for updating this FilesExtend.
// Note that you need to call FilesExtend.Unwrap() before calling this method if this FilesExtend
// was returned from a transaction, and the transaction was committed or rolled back.
func (fe *FilesExtend) Update() *FilesExtendUpdateOne {
	return NewFilesExtendClient(fe.config).UpdateOne(fe)
}

// Unwrap unwraps the FilesExtend entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fe *FilesExtend) Unwrap() *FilesExtend {
	_tx, ok := fe.config.driver.(*txDriver)
	if !ok {
		panic("ent: FilesExtend is not a transactional entity")
	}
	fe.config.driver = _tx.drv
	return fe
}

// String implements the fmt.Stringer.
func (fe *FilesExtend) String() string {
	var builder strings.Builder
	builder.WriteString("FilesExtend(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fe.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", fe.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", fe.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", fe.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", fe.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", fe.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(fmt.Sprintf("%v", fe.DeletedBy))
	builder.WriteString(", ")
	builder.WriteString("file_id=")
	builder.WriteString(fe.FileID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", fe.UserID))
	builder.WriteString(", ")
	builder.WriteString("filename=")
	builder.WriteString(fe.Filename)
	builder.WriteString(", ")
	builder.WriteString("from=")
	builder.WriteString(fe.From)
	builder.WriteString(", ")
	builder.WriteString("is_hidden=")
	builder.WriteString(fmt.Sprintf("%v", fe.IsHidden))
	builder.WriteByte(')')
	return builder.String()
}

// FilesExtends is a parsable slice of FilesExtend.
type FilesExtends []*FilesExtend
