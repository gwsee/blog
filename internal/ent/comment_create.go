// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/comment"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentCreate is the builder for creating a Comment entity.
type CommentCreate struct {
	config
	mutation *CommentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CommentCreate) SetCreatedAt(i int64) *CommentCreate {
	cc.mutation.SetCreatedAt(i)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CommentCreate) SetNillableCreatedAt(i *int64) *CommentCreate {
	if i != nil {
		cc.SetCreatedAt(*i)
	}
	return cc
}

// SetCreatedBy sets the "created_by" field.
func (cc *CommentCreate) SetCreatedBy(s string) *CommentCreate {
	cc.mutation.SetCreatedBy(s)
	return cc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cc *CommentCreate) SetNillableCreatedBy(s *string) *CommentCreate {
	if s != nil {
		cc.SetCreatedBy(*s)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CommentCreate) SetUpdatedAt(i int64) *CommentCreate {
	cc.mutation.SetUpdatedAt(i)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CommentCreate) SetNillableUpdatedAt(i *int64) *CommentCreate {
	if i != nil {
		cc.SetUpdatedAt(*i)
	}
	return cc
}

// SetUpdatedBy sets the "updated_by" field.
func (cc *CommentCreate) SetUpdatedBy(s string) *CommentCreate {
	cc.mutation.SetUpdatedBy(s)
	return cc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cc *CommentCreate) SetNillableUpdatedBy(s *string) *CommentCreate {
	if s != nil {
		cc.SetUpdatedBy(*s)
	}
	return cc
}

// SetIsDeleted sets the "is_deleted" field.
func (cc *CommentCreate) SetIsDeleted(u uint8) *CommentCreate {
	cc.mutation.SetIsDeleted(u)
	return cc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cc *CommentCreate) SetNillableIsDeleted(u *uint8) *CommentCreate {
	if u != nil {
		cc.SetIsDeleted(*u)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CommentCreate) SetDeletedAt(i int64) *CommentCreate {
	cc.mutation.SetDeletedAt(i)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CommentCreate) SetNillableDeletedAt(i *int64) *CommentCreate {
	if i != nil {
		cc.SetDeletedAt(*i)
	}
	return cc
}

// SetDeletedBy sets the "deleted_by" field.
func (cc *CommentCreate) SetDeletedBy(s string) *CommentCreate {
	cc.mutation.SetDeletedBy(s)
	return cc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cc *CommentCreate) SetNillableDeletedBy(s *string) *CommentCreate {
	if s != nil {
		cc.SetDeletedBy(*s)
	}
	return cc
}

// SetAccountID sets the "account_id" field.
func (cc *CommentCreate) SetAccountID(i int32) *CommentCreate {
	cc.mutation.SetAccountID(i)
	return cc
}

// SetKind sets the "kind" field.
func (cc *CommentCreate) SetKind(i int8) *CommentCreate {
	cc.mutation.SetKind(i)
	return cc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (cc *CommentCreate) SetNillableKind(i *int8) *CommentCreate {
	if i != nil {
		cc.SetKind(*i)
	}
	return cc
}

// SetKindID sets the "kind_id" field.
func (cc *CommentCreate) SetKindID(i int32) *CommentCreate {
	cc.mutation.SetKindID(i)
	return cc
}

// SetTopID sets the "top_id" field.
func (cc *CommentCreate) SetTopID(i int32) *CommentCreate {
	cc.mutation.SetTopID(i)
	return cc
}

// SetNillableTopID sets the "top_id" field if the given value is not nil.
func (cc *CommentCreate) SetNillableTopID(i *int32) *CommentCreate {
	if i != nil {
		cc.SetTopID(*i)
	}
	return cc
}

// SetParentID sets the "parent_id" field.
func (cc *CommentCreate) SetParentID(i int32) *CommentCreate {
	cc.mutation.SetParentID(i)
	return cc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cc *CommentCreate) SetNillableParentID(i *int32) *CommentCreate {
	if i != nil {
		cc.SetParentID(*i)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *CommentCreate) SetStatus(i int8) *CommentCreate {
	cc.mutation.SetStatus(i)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *CommentCreate) SetNillableStatus(i *int8) *CommentCreate {
	if i != nil {
		cc.SetStatus(*i)
	}
	return cc
}

// SetLevel sets the "level" field.
func (cc *CommentCreate) SetLevel(i int32) *CommentCreate {
	cc.mutation.SetLevel(i)
	return cc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (cc *CommentCreate) SetNillableLevel(i *int32) *CommentCreate {
	if i != nil {
		cc.SetLevel(*i)
	}
	return cc
}

// SetTotal sets the "total" field.
func (cc *CommentCreate) SetTotal(i int32) *CommentCreate {
	cc.mutation.SetTotal(i)
	return cc
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (cc *CommentCreate) SetNillableTotal(i *int32) *CommentCreate {
	if i != nil {
		cc.SetTotal(*i)
	}
	return cc
}

// SetContent sets the "content" field.
func (cc *CommentCreate) SetContent(s string) *CommentCreate {
	cc.mutation.SetContent(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CommentCreate) SetID(i int32) *CommentCreate {
	cc.mutation.SetID(i)
	return cc
}

// Mutation returns the CommentMutation object of the builder.
func (cc *CommentCreate) Mutation() *CommentMutation {
	return cc.mutation
}

// Save creates the Comment in the database.
func (cc *CommentCreate) Save(ctx context.Context) (*Comment, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommentCreate) SaveX(ctx context.Context) *Comment {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CommentCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CommentCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CommentCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := comment.DefaultCreatedAt
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.CreatedBy(); !ok {
		v := comment.DefaultCreatedBy
		cc.mutation.SetCreatedBy(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := comment.DefaultUpdatedAt
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedBy(); !ok {
		v := comment.DefaultUpdatedBy
		cc.mutation.SetUpdatedBy(v)
	}
	if _, ok := cc.mutation.IsDeleted(); !ok {
		v := comment.DefaultIsDeleted
		cc.mutation.SetIsDeleted(v)
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		v := comment.DefaultDeletedAt
		cc.mutation.SetDeletedAt(v)
	}
	if _, ok := cc.mutation.DeletedBy(); !ok {
		v := comment.DefaultDeletedBy
		cc.mutation.SetDeletedBy(v)
	}
	if _, ok := cc.mutation.Kind(); !ok {
		v := comment.DefaultKind
		cc.mutation.SetKind(v)
	}
	if _, ok := cc.mutation.TopID(); !ok {
		v := comment.DefaultTopID
		cc.mutation.SetTopID(v)
	}
	if _, ok := cc.mutation.ParentID(); !ok {
		v := comment.DefaultParentID
		cc.mutation.SetParentID(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := comment.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.Level(); !ok {
		v := comment.DefaultLevel
		cc.mutation.SetLevel(v)
	}
	if _, ok := cc.mutation.Total(); !ok {
		v := comment.DefaultTotal
		cc.mutation.SetTotal(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommentCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Comment.created_at"`)}
	}
	if _, ok := cc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Comment.created_by"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Comment.updated_at"`)}
	}
	if _, ok := cc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Comment.updated_by"`)}
	}
	if _, ok := cc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "Comment.is_deleted"`)}
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Comment.deleted_at"`)}
	}
	if _, ok := cc.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "Comment.deleted_by"`)}
	}
	if _, ok := cc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "Comment.account_id"`)}
	}
	if v, ok := cc.mutation.AccountID(); ok {
		if err := comment.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "Comment.account_id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "Comment.kind"`)}
	}
	if _, ok := cc.mutation.KindID(); !ok {
		return &ValidationError{Name: "kind_id", err: errors.New(`ent: missing required field "Comment.kind_id"`)}
	}
	if v, ok := cc.mutation.KindID(); ok {
		if err := comment.KindIDValidator(v); err != nil {
			return &ValidationError{Name: "kind_id", err: fmt.Errorf(`ent: validator failed for field "Comment.kind_id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.TopID(); !ok {
		return &ValidationError{Name: "top_id", err: errors.New(`ent: missing required field "Comment.top_id"`)}
	}
	if _, ok := cc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "Comment.parent_id"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Comment.status"`)}
	}
	if _, ok := cc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Comment.level"`)}
	}
	if _, ok := cc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "Comment.total"`)}
	}
	if _, ok := cc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Comment.content"`)}
	}
	if v, ok := cc.mutation.ID(); ok {
		if err := comment.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Comment.id": %w`, err)}
		}
	}
	return nil
}

func (cc *CommentCreate) sqlSave(ctx context.Context) (*Comment, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CommentCreate) createSpec() (*Comment, *sqlgraph.CreateSpec) {
	var (
		_node = &Comment{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(comment.Table, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt32))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(comment.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.CreatedBy(); ok {
		_spec.SetField(comment.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.UpdatedBy(); ok {
		_spec.SetField(comment.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cc.mutation.IsDeleted(); ok {
		_spec.SetField(comment.FieldIsDeleted, field.TypeUint8, value)
		_node.IsDeleted = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(comment.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.DeletedBy(); ok {
		_spec.SetField(comment.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := cc.mutation.AccountID(); ok {
		_spec.SetField(comment.FieldAccountID, field.TypeInt32, value)
		_node.AccountID = value
	}
	if value, ok := cc.mutation.Kind(); ok {
		_spec.SetField(comment.FieldKind, field.TypeInt8, value)
		_node.Kind = value
	}
	if value, ok := cc.mutation.KindID(); ok {
		_spec.SetField(comment.FieldKindID, field.TypeInt32, value)
		_node.KindID = value
	}
	if value, ok := cc.mutation.TopID(); ok {
		_spec.SetField(comment.FieldTopID, field.TypeInt32, value)
		_node.TopID = value
	}
	if value, ok := cc.mutation.ParentID(); ok {
		_spec.SetField(comment.FieldParentID, field.TypeInt32, value)
		_node.ParentID = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.Level(); ok {
		_spec.SetField(comment.FieldLevel, field.TypeInt32, value)
		_node.Level = value
	}
	if value, ok := cc.mutation.Total(); ok {
		_spec.SetField(comment.FieldTotal, field.TypeInt32, value)
		_node.Total = value
	}
	if value, ok := cc.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comment.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CommentCreate) OnConflict(opts ...sql.ConflictOption) *CommentUpsertOne {
	cc.conflict = opts
	return &CommentUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CommentCreate) OnConflictColumns(columns ...string) *CommentUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CommentUpsertOne{
		create: cc,
	}
}

type (
	// CommentUpsertOne is the builder for "upsert"-ing
	//  one Comment node.
	CommentUpsertOne struct {
		create *CommentCreate
	}

	// CommentUpsert is the "OnConflict" setter.
	CommentUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CommentUpsert) SetUpdatedAt(v int64) *CommentUpsert {
	u.Set(comment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommentUpsert) UpdateUpdatedAt() *CommentUpsert {
	u.SetExcluded(comment.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CommentUpsert) AddUpdatedAt(v int64) *CommentUpsert {
	u.Add(comment.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CommentUpsert) SetUpdatedBy(v string) *CommentUpsert {
	u.Set(comment.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CommentUpsert) UpdateUpdatedBy() *CommentUpsert {
	u.SetExcluded(comment.FieldUpdatedBy)
	return u
}

// SetIsDeleted sets the "is_deleted" field.
func (u *CommentUpsert) SetIsDeleted(v uint8) *CommentUpsert {
	u.Set(comment.FieldIsDeleted, v)
	return u
}

// UpdateIsDeleted sets the "is_deleted" field to the value that was provided on create.
func (u *CommentUpsert) UpdateIsDeleted() *CommentUpsert {
	u.SetExcluded(comment.FieldIsDeleted)
	return u
}

// AddIsDeleted adds v to the "is_deleted" field.
func (u *CommentUpsert) AddIsDeleted(v uint8) *CommentUpsert {
	u.Add(comment.FieldIsDeleted, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommentUpsert) SetDeletedAt(v int64) *CommentUpsert {
	u.Set(comment.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommentUpsert) UpdateDeletedAt() *CommentUpsert {
	u.SetExcluded(comment.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CommentUpsert) AddDeletedAt(v int64) *CommentUpsert {
	u.Add(comment.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *CommentUpsert) SetDeletedBy(v string) *CommentUpsert {
	u.Set(comment.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *CommentUpsert) UpdateDeletedBy() *CommentUpsert {
	u.SetExcluded(comment.FieldDeletedBy)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *CommentUpsert) SetAccountID(v int32) *CommentUpsert {
	u.Set(comment.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *CommentUpsert) UpdateAccountID() *CommentUpsert {
	u.SetExcluded(comment.FieldAccountID)
	return u
}

// AddAccountID adds v to the "account_id" field.
func (u *CommentUpsert) AddAccountID(v int32) *CommentUpsert {
	u.Add(comment.FieldAccountID, v)
	return u
}

// SetKind sets the "kind" field.
func (u *CommentUpsert) SetKind(v int8) *CommentUpsert {
	u.Set(comment.FieldKind, v)
	return u
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *CommentUpsert) UpdateKind() *CommentUpsert {
	u.SetExcluded(comment.FieldKind)
	return u
}

// AddKind adds v to the "kind" field.
func (u *CommentUpsert) AddKind(v int8) *CommentUpsert {
	u.Add(comment.FieldKind, v)
	return u
}

// SetKindID sets the "kind_id" field.
func (u *CommentUpsert) SetKindID(v int32) *CommentUpsert {
	u.Set(comment.FieldKindID, v)
	return u
}

// UpdateKindID sets the "kind_id" field to the value that was provided on create.
func (u *CommentUpsert) UpdateKindID() *CommentUpsert {
	u.SetExcluded(comment.FieldKindID)
	return u
}

// AddKindID adds v to the "kind_id" field.
func (u *CommentUpsert) AddKindID(v int32) *CommentUpsert {
	u.Add(comment.FieldKindID, v)
	return u
}

// SetTopID sets the "top_id" field.
func (u *CommentUpsert) SetTopID(v int32) *CommentUpsert {
	u.Set(comment.FieldTopID, v)
	return u
}

// UpdateTopID sets the "top_id" field to the value that was provided on create.
func (u *CommentUpsert) UpdateTopID() *CommentUpsert {
	u.SetExcluded(comment.FieldTopID)
	return u
}

// AddTopID adds v to the "top_id" field.
func (u *CommentUpsert) AddTopID(v int32) *CommentUpsert {
	u.Add(comment.FieldTopID, v)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *CommentUpsert) SetParentID(v int32) *CommentUpsert {
	u.Set(comment.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CommentUpsert) UpdateParentID() *CommentUpsert {
	u.SetExcluded(comment.FieldParentID)
	return u
}

// AddParentID adds v to the "parent_id" field.
func (u *CommentUpsert) AddParentID(v int32) *CommentUpsert {
	u.Add(comment.FieldParentID, v)
	return u
}

// SetStatus sets the "status" field.
func (u *CommentUpsert) SetStatus(v int8) *CommentUpsert {
	u.Set(comment.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CommentUpsert) UpdateStatus() *CommentUpsert {
	u.SetExcluded(comment.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *CommentUpsert) AddStatus(v int8) *CommentUpsert {
	u.Add(comment.FieldStatus, v)
	return u
}

// SetLevel sets the "level" field.
func (u *CommentUpsert) SetLevel(v int32) *CommentUpsert {
	u.Set(comment.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *CommentUpsert) UpdateLevel() *CommentUpsert {
	u.SetExcluded(comment.FieldLevel)
	return u
}

// AddLevel adds v to the "level" field.
func (u *CommentUpsert) AddLevel(v int32) *CommentUpsert {
	u.Add(comment.FieldLevel, v)
	return u
}

// SetTotal sets the "total" field.
func (u *CommentUpsert) SetTotal(v int32) *CommentUpsert {
	u.Set(comment.FieldTotal, v)
	return u
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *CommentUpsert) UpdateTotal() *CommentUpsert {
	u.SetExcluded(comment.FieldTotal)
	return u
}

// AddTotal adds v to the "total" field.
func (u *CommentUpsert) AddTotal(v int32) *CommentUpsert {
	u.Add(comment.FieldTotal, v)
	return u
}

// SetContent sets the "content" field.
func (u *CommentUpsert) SetContent(v string) *CommentUpsert {
	u.Set(comment.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentUpsert) UpdateContent() *CommentUpsert {
	u.SetExcluded(comment.FieldContent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(comment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CommentUpsertOne) UpdateNewValues() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(comment.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(comment.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(comment.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CommentUpsertOne) Ignore() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommentUpsertOne) DoNothing() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommentCreate.OnConflict
// documentation for more info.
func (u *CommentUpsertOne) Update(set func(*CommentUpsert)) *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommentUpsertOne) SetUpdatedAt(v int64) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CommentUpsertOne) AddUpdatedAt(v int64) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateUpdatedAt() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CommentUpsertOne) SetUpdatedBy(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateUpdatedBy() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetIsDeleted sets the "is_deleted" field.
func (u *CommentUpsertOne) SetIsDeleted(v uint8) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetIsDeleted(v)
	})
}

// AddIsDeleted adds v to the "is_deleted" field.
func (u *CommentUpsertOne) AddIsDeleted(v uint8) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddIsDeleted(v)
	})
}

// UpdateIsDeleted sets the "is_deleted" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateIsDeleted() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateIsDeleted()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommentUpsertOne) SetDeletedAt(v int64) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CommentUpsertOne) AddDeletedAt(v int64) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateDeletedAt() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *CommentUpsertOne) SetDeletedBy(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateDeletedBy() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetAccountID sets the "account_id" field.
func (u *CommentUpsertOne) SetAccountID(v int32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *CommentUpsertOne) AddAccountID(v int32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateAccountID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAccountID()
	})
}

// SetKind sets the "kind" field.
func (u *CommentUpsertOne) SetKind(v int8) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetKind(v)
	})
}

// AddKind adds v to the "kind" field.
func (u *CommentUpsertOne) AddKind(v int8) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateKind() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateKind()
	})
}

// SetKindID sets the "kind_id" field.
func (u *CommentUpsertOne) SetKindID(v int32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetKindID(v)
	})
}

// AddKindID adds v to the "kind_id" field.
func (u *CommentUpsertOne) AddKindID(v int32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddKindID(v)
	})
}

// UpdateKindID sets the "kind_id" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateKindID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateKindID()
	})
}

// SetTopID sets the "top_id" field.
func (u *CommentUpsertOne) SetTopID(v int32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetTopID(v)
	})
}

// AddTopID adds v to the "top_id" field.
func (u *CommentUpsertOne) AddTopID(v int32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddTopID(v)
	})
}

// UpdateTopID sets the "top_id" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateTopID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateTopID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CommentUpsertOne) SetParentID(v int32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *CommentUpsertOne) AddParentID(v int32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateParentID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateParentID()
	})
}

// SetStatus sets the "status" field.
func (u *CommentUpsertOne) SetStatus(v int8) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CommentUpsertOne) AddStatus(v int8) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateStatus() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateStatus()
	})
}

// SetLevel sets the "level" field.
func (u *CommentUpsertOne) SetLevel(v int32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *CommentUpsertOne) AddLevel(v int32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateLevel() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateLevel()
	})
}

// SetTotal sets the "total" field.
func (u *CommentUpsertOne) SetTotal(v int32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetTotal(v)
	})
}

// AddTotal adds v to the "total" field.
func (u *CommentUpsertOne) AddTotal(v int32) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateTotal() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateTotal()
	})
}

// SetContent sets the "content" field.
func (u *CommentUpsertOne) SetContent(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateContent() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *CommentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CommentUpsertOne) ID(ctx context.Context) (id int32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CommentUpsertOne) IDX(ctx context.Context) int32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CommentCreateBulk is the builder for creating many Comment entities in bulk.
type CommentCreateBulk struct {
	config
	err      error
	builders []*CommentCreate
	conflict []sql.ConflictOption
}

// Save creates the Comment entities in the database.
func (ccb *CommentCreateBulk) Save(ctx context.Context) ([]*Comment, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Comment, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommentCreateBulk) SaveX(ctx context.Context) []*Comment {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CommentCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CommentCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CommentCreateBulk) OnConflict(opts ...sql.ConflictOption) *CommentUpsertBulk {
	ccb.conflict = opts
	return &CommentUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CommentCreateBulk) OnConflictColumns(columns ...string) *CommentUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CommentUpsertBulk{
		create: ccb,
	}
}

// CommentUpsertBulk is the builder for "upsert"-ing
// a bulk of Comment nodes.
type CommentUpsertBulk struct {
	create *CommentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(comment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CommentUpsertBulk) UpdateNewValues() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(comment.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(comment.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(comment.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CommentUpsertBulk) Ignore() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommentUpsertBulk) DoNothing() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommentCreateBulk.OnConflict
// documentation for more info.
func (u *CommentUpsertBulk) Update(set func(*CommentUpsert)) *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommentUpsertBulk) SetUpdatedAt(v int64) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CommentUpsertBulk) AddUpdatedAt(v int64) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateUpdatedAt() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CommentUpsertBulk) SetUpdatedBy(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateUpdatedBy() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetIsDeleted sets the "is_deleted" field.
func (u *CommentUpsertBulk) SetIsDeleted(v uint8) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetIsDeleted(v)
	})
}

// AddIsDeleted adds v to the "is_deleted" field.
func (u *CommentUpsertBulk) AddIsDeleted(v uint8) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddIsDeleted(v)
	})
}

// UpdateIsDeleted sets the "is_deleted" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateIsDeleted() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateIsDeleted()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommentUpsertBulk) SetDeletedAt(v int64) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CommentUpsertBulk) AddDeletedAt(v int64) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateDeletedAt() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *CommentUpsertBulk) SetDeletedBy(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateDeletedBy() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetAccountID sets the "account_id" field.
func (u *CommentUpsertBulk) SetAccountID(v int32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *CommentUpsertBulk) AddAccountID(v int32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateAccountID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAccountID()
	})
}

// SetKind sets the "kind" field.
func (u *CommentUpsertBulk) SetKind(v int8) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetKind(v)
	})
}

// AddKind adds v to the "kind" field.
func (u *CommentUpsertBulk) AddKind(v int8) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateKind() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateKind()
	})
}

// SetKindID sets the "kind_id" field.
func (u *CommentUpsertBulk) SetKindID(v int32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetKindID(v)
	})
}

// AddKindID adds v to the "kind_id" field.
func (u *CommentUpsertBulk) AddKindID(v int32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddKindID(v)
	})
}

// UpdateKindID sets the "kind_id" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateKindID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateKindID()
	})
}

// SetTopID sets the "top_id" field.
func (u *CommentUpsertBulk) SetTopID(v int32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetTopID(v)
	})
}

// AddTopID adds v to the "top_id" field.
func (u *CommentUpsertBulk) AddTopID(v int32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddTopID(v)
	})
}

// UpdateTopID sets the "top_id" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateTopID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateTopID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CommentUpsertBulk) SetParentID(v int32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *CommentUpsertBulk) AddParentID(v int32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateParentID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateParentID()
	})
}

// SetStatus sets the "status" field.
func (u *CommentUpsertBulk) SetStatus(v int8) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CommentUpsertBulk) AddStatus(v int8) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateStatus() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateStatus()
	})
}

// SetLevel sets the "level" field.
func (u *CommentUpsertBulk) SetLevel(v int32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *CommentUpsertBulk) AddLevel(v int32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateLevel() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateLevel()
	})
}

// SetTotal sets the "total" field.
func (u *CommentUpsertBulk) SetTotal(v int32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetTotal(v)
	})
}

// AddTotal adds v to the "total" field.
func (u *CommentUpsertBulk) AddTotal(v int32) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateTotal() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateTotal()
	})
}

// SetContent sets the "content" field.
func (u *CommentUpsertBulk) SetContent(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateContent() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *CommentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CommentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
