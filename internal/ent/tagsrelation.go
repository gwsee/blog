// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/blogs"
	"blog/internal/ent/tags"
	"blog/internal/ent/tagsrelation"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 标签-关联表信息
type TagsRelation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 标签ID
	TagID int `json:"tag_id,omitempty"`
	// Relation holds the value of the "relation" field.
	Relation string `json:"relation,omitempty"`
	// RelationID holds the value of the "relation_id" field.
	RelationID int `json:"relation_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TagsRelationQuery when eager-loading is set.
	Edges        TagsRelationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TagsRelationEdges holds the relations/edges for other nodes in the graph.
type TagsRelationEdges struct {
	// Blog holds the value of the blog edge.
	Blog *Blogs `json:"blog,omitempty"`
	// Tag holds the value of the tag edge.
	Tag *Tags `json:"tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BlogOrErr returns the Blog value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TagsRelationEdges) BlogOrErr() (*Blogs, error) {
	if e.Blog != nil {
		return e.Blog, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: blogs.Label}
	}
	return nil, &NotLoadedError{edge: "blog"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TagsRelationEdges) TagOrErr() (*Tags, error) {
	if e.Tag != nil {
		return e.Tag, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: tags.Label}
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TagsRelation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tagsrelation.FieldID, tagsrelation.FieldTagID, tagsrelation.FieldRelationID:
			values[i] = new(sql.NullInt64)
		case tagsrelation.FieldRelation:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TagsRelation fields.
func (tr *TagsRelation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tagsrelation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tr.ID = int(value.Int64)
		case tagsrelation.FieldTagID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tag_id", values[i])
			} else if value.Valid {
				tr.TagID = int(value.Int64)
			}
		case tagsrelation.FieldRelation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relation", values[i])
			} else if value.Valid {
				tr.Relation = value.String
			}
		case tagsrelation.FieldRelationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field relation_id", values[i])
			} else if value.Valid {
				tr.RelationID = int(value.Int64)
			}
		default:
			tr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TagsRelation.
// This includes values selected through modifiers, order, etc.
func (tr *TagsRelation) Value(name string) (ent.Value, error) {
	return tr.selectValues.Get(name)
}

// QueryBlog queries the "blog" edge of the TagsRelation entity.
func (tr *TagsRelation) QueryBlog() *BlogsQuery {
	return NewTagsRelationClient(tr.config).QueryBlog(tr)
}

// QueryTag queries the "tag" edge of the TagsRelation entity.
func (tr *TagsRelation) QueryTag() *TagsQuery {
	return NewTagsRelationClient(tr.config).QueryTag(tr)
}

// Update returns a builder for updating this TagsRelation.
// Note that you need to call TagsRelation.Unwrap() before calling this method if this TagsRelation
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TagsRelation) Update() *TagsRelationUpdateOne {
	return NewTagsRelationClient(tr.config).UpdateOne(tr)
}

// Unwrap unwraps the TagsRelation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TagsRelation) Unwrap() *TagsRelation {
	_tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TagsRelation is not a transactional entity")
	}
	tr.config.driver = _tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TagsRelation) String() string {
	var builder strings.Builder
	builder.WriteString("TagsRelation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tr.ID))
	builder.WriteString("tag_id=")
	builder.WriteString(fmt.Sprintf("%v", tr.TagID))
	builder.WriteString(", ")
	builder.WriteString("relation=")
	builder.WriteString(tr.Relation)
	builder.WriteString(", ")
	builder.WriteString("relation_id=")
	builder.WriteString(fmt.Sprintf("%v", tr.RelationID))
	builder.WriteByte(')')
	return builder.String()
}

// TagsRelations is a parsable slice of TagsRelation.
type TagsRelations []*TagsRelation
