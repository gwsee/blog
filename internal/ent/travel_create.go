// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/travel"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TravelCreate is the builder for creating a Travel entity.
type TravelCreate struct {
	config
	mutation *TravelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TravelCreate) SetCreatedAt(i int64) *TravelCreate {
	tc.mutation.SetCreatedAt(i)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TravelCreate) SetNillableCreatedAt(i *int64) *TravelCreate {
	if i != nil {
		tc.SetCreatedAt(*i)
	}
	return tc
}

// SetCreatedBy sets the "created_by" field.
func (tc *TravelCreate) SetCreatedBy(i int64) *TravelCreate {
	tc.mutation.SetCreatedBy(i)
	return tc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tc *TravelCreate) SetNillableCreatedBy(i *int64) *TravelCreate {
	if i != nil {
		tc.SetCreatedBy(*i)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TravelCreate) SetUpdatedAt(i int64) *TravelCreate {
	tc.mutation.SetUpdatedAt(i)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TravelCreate) SetNillableUpdatedAt(i *int64) *TravelCreate {
	if i != nil {
		tc.SetUpdatedAt(*i)
	}
	return tc
}

// SetUpdatedBy sets the "updated_by" field.
func (tc *TravelCreate) SetUpdatedBy(i int64) *TravelCreate {
	tc.mutation.SetUpdatedBy(i)
	return tc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tc *TravelCreate) SetNillableUpdatedBy(i *int64) *TravelCreate {
	if i != nil {
		tc.SetUpdatedBy(*i)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TravelCreate) SetDeletedAt(i int64) *TravelCreate {
	tc.mutation.SetDeletedAt(i)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TravelCreate) SetNillableDeletedAt(i *int64) *TravelCreate {
	if i != nil {
		tc.SetDeletedAt(*i)
	}
	return tc
}

// SetDeletedBy sets the "deleted_by" field.
func (tc *TravelCreate) SetDeletedBy(i int64) *TravelCreate {
	tc.mutation.SetDeletedBy(i)
	return tc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tc *TravelCreate) SetNillableDeletedBy(i *int64) *TravelCreate {
	if i != nil {
		tc.SetDeletedBy(*i)
	}
	return tc
}

// SetTitle sets the "title" field.
func (tc *TravelCreate) SetTitle(s string) *TravelCreate {
	tc.mutation.SetTitle(s)
	return tc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tc *TravelCreate) SetNillableTitle(s *string) *TravelCreate {
	if s != nil {
		tc.SetTitle(*s)
	}
	return tc
}

// SetDescription sets the "description" field.
func (tc *TravelCreate) SetDescription(s string) *TravelCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetVideo sets the "video" field.
func (tc *TravelCreate) SetVideo(s string) *TravelCreate {
	tc.mutation.SetVideo(s)
	return tc
}

// SetPhotos sets the "photos" field.
func (tc *TravelCreate) SetPhotos(s []string) *TravelCreate {
	tc.mutation.SetPhotos(s)
	return tc
}

// SetBrowseNum sets the "browse_num" field.
func (tc *TravelCreate) SetBrowseNum(i int) *TravelCreate {
	tc.mutation.SetBrowseNum(i)
	return tc
}

// SetThumbNum sets the "thumb_num" field.
func (tc *TravelCreate) SetThumbNum(i int) *TravelCreate {
	tc.mutation.SetThumbNum(i)
	return tc
}

// SetCollectNum sets the "collect_num" field.
func (tc *TravelCreate) SetCollectNum(i int) *TravelCreate {
	tc.mutation.SetCollectNum(i)
	return tc
}

// SetID sets the "id" field.
func (tc *TravelCreate) SetID(i int) *TravelCreate {
	tc.mutation.SetID(i)
	return tc
}

// Mutation returns the TravelMutation object of the builder.
func (tc *TravelCreate) Mutation() *TravelMutation {
	return tc.mutation
}

// Save creates the Travel in the database.
func (tc *TravelCreate) Save(ctx context.Context) (*Travel, error) {
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TravelCreate) SaveX(ctx context.Context) *Travel {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TravelCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TravelCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TravelCreate) defaults() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := travel.DefaultCreatedAt
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.CreatedBy(); !ok {
		v := travel.DefaultCreatedBy
		tc.mutation.SetCreatedBy(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := travel.DefaultUpdatedAt
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedBy(); !ok {
		v := travel.DefaultUpdatedBy
		tc.mutation.SetUpdatedBy(v)
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		v := travel.DefaultDeletedAt
		tc.mutation.SetDeletedAt(v)
	}
	if _, ok := tc.mutation.DeletedBy(); !ok {
		v := travel.DefaultDeletedBy
		tc.mutation.SetDeletedBy(v)
	}
	if _, ok := tc.mutation.Title(); !ok {
		v := travel.DefaultTitle
		tc.mutation.SetTitle(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TravelCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Travel.created_at"`)}
	}
	if _, ok := tc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Travel.created_by"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Travel.updated_at"`)}
	}
	if _, ok := tc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Travel.updated_by"`)}
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Travel.deleted_at"`)}
	}
	if _, ok := tc.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "Travel.deleted_by"`)}
	}
	if _, ok := tc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Travel.title"`)}
	}
	if _, ok := tc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Travel.description"`)}
	}
	if v, ok := tc.mutation.Description(); ok {
		if err := travel.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Travel.description": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Video(); !ok {
		return &ValidationError{Name: "video", err: errors.New(`ent: missing required field "Travel.video"`)}
	}
	if v, ok := tc.mutation.Video(); ok {
		if err := travel.VideoValidator(v); err != nil {
			return &ValidationError{Name: "video", err: fmt.Errorf(`ent: validator failed for field "Travel.video": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Photos(); !ok {
		return &ValidationError{Name: "photos", err: errors.New(`ent: missing required field "Travel.photos"`)}
	}
	if _, ok := tc.mutation.BrowseNum(); !ok {
		return &ValidationError{Name: "browse_num", err: errors.New(`ent: missing required field "Travel.browse_num"`)}
	}
	if _, ok := tc.mutation.ThumbNum(); !ok {
		return &ValidationError{Name: "thumb_num", err: errors.New(`ent: missing required field "Travel.thumb_num"`)}
	}
	if _, ok := tc.mutation.CollectNum(); !ok {
		return &ValidationError{Name: "collect_num", err: errors.New(`ent: missing required field "Travel.collect_num"`)}
	}
	return nil
}

func (tc *TravelCreate) sqlSave(ctx context.Context) (*Travel, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TravelCreate) createSpec() (*Travel, *sqlgraph.CreateSpec) {
	var (
		_node = &Travel{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(travel.Table, sqlgraph.NewFieldSpec(travel.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(travel.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.CreatedBy(); ok {
		_spec.SetField(travel.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(travel.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.UpdatedBy(); ok {
		_spec.SetField(travel.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.SetField(travel.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.DeletedBy(); ok {
		_spec.SetField(travel.FieldDeletedBy, field.TypeInt64, value)
		_node.DeletedBy = value
	}
	if value, ok := tc.mutation.Title(); ok {
		_spec.SetField(travel.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(travel.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.Video(); ok {
		_spec.SetField(travel.FieldVideo, field.TypeString, value)
		_node.Video = value
	}
	if value, ok := tc.mutation.Photos(); ok {
		_spec.SetField(travel.FieldPhotos, field.TypeJSON, value)
		_node.Photos = value
	}
	if value, ok := tc.mutation.BrowseNum(); ok {
		_spec.SetField(travel.FieldBrowseNum, field.TypeInt, value)
		_node.BrowseNum = value
	}
	if value, ok := tc.mutation.ThumbNum(); ok {
		_spec.SetField(travel.FieldThumbNum, field.TypeInt, value)
		_node.ThumbNum = value
	}
	if value, ok := tc.mutation.CollectNum(); ok {
		_spec.SetField(travel.FieldCollectNum, field.TypeInt, value)
		_node.CollectNum = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Travel.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TravelUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TravelCreate) OnConflict(opts ...sql.ConflictOption) *TravelUpsertOne {
	tc.conflict = opts
	return &TravelUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Travel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TravelCreate) OnConflictColumns(columns ...string) *TravelUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TravelUpsertOne{
		create: tc,
	}
}

type (
	// TravelUpsertOne is the builder for "upsert"-ing
	//  one Travel node.
	TravelUpsertOne struct {
		create *TravelCreate
	}

	// TravelUpsert is the "OnConflict" setter.
	TravelUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TravelUpsert) SetUpdatedAt(v int64) *TravelUpsert {
	u.Set(travel.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TravelUpsert) UpdateUpdatedAt() *TravelUpsert {
	u.SetExcluded(travel.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TravelUpsert) AddUpdatedAt(v int64) *TravelUpsert {
	u.Add(travel.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TravelUpsert) SetUpdatedBy(v int64) *TravelUpsert {
	u.Set(travel.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TravelUpsert) UpdateUpdatedBy() *TravelUpsert {
	u.SetExcluded(travel.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TravelUpsert) AddUpdatedBy(v int64) *TravelUpsert {
	u.Add(travel.FieldUpdatedBy, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TravelUpsert) SetDeletedAt(v int64) *TravelUpsert {
	u.Set(travel.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TravelUpsert) UpdateDeletedAt() *TravelUpsert {
	u.SetExcluded(travel.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TravelUpsert) AddDeletedAt(v int64) *TravelUpsert {
	u.Add(travel.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *TravelUpsert) SetDeletedBy(v int64) *TravelUpsert {
	u.Set(travel.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *TravelUpsert) UpdateDeletedBy() *TravelUpsert {
	u.SetExcluded(travel.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *TravelUpsert) AddDeletedBy(v int64) *TravelUpsert {
	u.Add(travel.FieldDeletedBy, v)
	return u
}

// SetTitle sets the "title" field.
func (u *TravelUpsert) SetTitle(v string) *TravelUpsert {
	u.Set(travel.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TravelUpsert) UpdateTitle() *TravelUpsert {
	u.SetExcluded(travel.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *TravelUpsert) SetDescription(v string) *TravelUpsert {
	u.Set(travel.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TravelUpsert) UpdateDescription() *TravelUpsert {
	u.SetExcluded(travel.FieldDescription)
	return u
}

// SetVideo sets the "video" field.
func (u *TravelUpsert) SetVideo(v string) *TravelUpsert {
	u.Set(travel.FieldVideo, v)
	return u
}

// UpdateVideo sets the "video" field to the value that was provided on create.
func (u *TravelUpsert) UpdateVideo() *TravelUpsert {
	u.SetExcluded(travel.FieldVideo)
	return u
}

// SetPhotos sets the "photos" field.
func (u *TravelUpsert) SetPhotos(v []string) *TravelUpsert {
	u.Set(travel.FieldPhotos, v)
	return u
}

// UpdatePhotos sets the "photos" field to the value that was provided on create.
func (u *TravelUpsert) UpdatePhotos() *TravelUpsert {
	u.SetExcluded(travel.FieldPhotos)
	return u
}

// SetBrowseNum sets the "browse_num" field.
func (u *TravelUpsert) SetBrowseNum(v int) *TravelUpsert {
	u.Set(travel.FieldBrowseNum, v)
	return u
}

// UpdateBrowseNum sets the "browse_num" field to the value that was provided on create.
func (u *TravelUpsert) UpdateBrowseNum() *TravelUpsert {
	u.SetExcluded(travel.FieldBrowseNum)
	return u
}

// AddBrowseNum adds v to the "browse_num" field.
func (u *TravelUpsert) AddBrowseNum(v int) *TravelUpsert {
	u.Add(travel.FieldBrowseNum, v)
	return u
}

// SetThumbNum sets the "thumb_num" field.
func (u *TravelUpsert) SetThumbNum(v int) *TravelUpsert {
	u.Set(travel.FieldThumbNum, v)
	return u
}

// UpdateThumbNum sets the "thumb_num" field to the value that was provided on create.
func (u *TravelUpsert) UpdateThumbNum() *TravelUpsert {
	u.SetExcluded(travel.FieldThumbNum)
	return u
}

// AddThumbNum adds v to the "thumb_num" field.
func (u *TravelUpsert) AddThumbNum(v int) *TravelUpsert {
	u.Add(travel.FieldThumbNum, v)
	return u
}

// SetCollectNum sets the "collect_num" field.
func (u *TravelUpsert) SetCollectNum(v int) *TravelUpsert {
	u.Set(travel.FieldCollectNum, v)
	return u
}

// UpdateCollectNum sets the "collect_num" field to the value that was provided on create.
func (u *TravelUpsert) UpdateCollectNum() *TravelUpsert {
	u.SetExcluded(travel.FieldCollectNum)
	return u
}

// AddCollectNum adds v to the "collect_num" field.
func (u *TravelUpsert) AddCollectNum(v int) *TravelUpsert {
	u.Add(travel.FieldCollectNum, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Travel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(travel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TravelUpsertOne) UpdateNewValues() *TravelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(travel.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(travel.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(travel.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Travel.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TravelUpsertOne) Ignore() *TravelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TravelUpsertOne) DoNothing() *TravelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TravelCreate.OnConflict
// documentation for more info.
func (u *TravelUpsertOne) Update(set func(*TravelUpsert)) *TravelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TravelUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TravelUpsertOne) SetUpdatedAt(v int64) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TravelUpsertOne) AddUpdatedAt(v int64) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TravelUpsertOne) UpdateUpdatedAt() *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TravelUpsertOne) SetUpdatedBy(v int64) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TravelUpsertOne) AddUpdatedBy(v int64) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TravelUpsertOne) UpdateUpdatedBy() *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TravelUpsertOne) SetDeletedAt(v int64) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TravelUpsertOne) AddDeletedAt(v int64) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TravelUpsertOne) UpdateDeletedAt() *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *TravelUpsertOne) SetDeletedBy(v int64) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *TravelUpsertOne) AddDeletedBy(v int64) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *TravelUpsertOne) UpdateDeletedBy() *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetTitle sets the "title" field.
func (u *TravelUpsertOne) SetTitle(v string) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TravelUpsertOne) UpdateTitle() *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *TravelUpsertOne) SetDescription(v string) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TravelUpsertOne) UpdateDescription() *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateDescription()
	})
}

// SetVideo sets the "video" field.
func (u *TravelUpsertOne) SetVideo(v string) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.SetVideo(v)
	})
}

// UpdateVideo sets the "video" field to the value that was provided on create.
func (u *TravelUpsertOne) UpdateVideo() *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateVideo()
	})
}

// SetPhotos sets the "photos" field.
func (u *TravelUpsertOne) SetPhotos(v []string) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.SetPhotos(v)
	})
}

// UpdatePhotos sets the "photos" field to the value that was provided on create.
func (u *TravelUpsertOne) UpdatePhotos() *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.UpdatePhotos()
	})
}

// SetBrowseNum sets the "browse_num" field.
func (u *TravelUpsertOne) SetBrowseNum(v int) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.SetBrowseNum(v)
	})
}

// AddBrowseNum adds v to the "browse_num" field.
func (u *TravelUpsertOne) AddBrowseNum(v int) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.AddBrowseNum(v)
	})
}

// UpdateBrowseNum sets the "browse_num" field to the value that was provided on create.
func (u *TravelUpsertOne) UpdateBrowseNum() *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateBrowseNum()
	})
}

// SetThumbNum sets the "thumb_num" field.
func (u *TravelUpsertOne) SetThumbNum(v int) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.SetThumbNum(v)
	})
}

// AddThumbNum adds v to the "thumb_num" field.
func (u *TravelUpsertOne) AddThumbNum(v int) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.AddThumbNum(v)
	})
}

// UpdateThumbNum sets the "thumb_num" field to the value that was provided on create.
func (u *TravelUpsertOne) UpdateThumbNum() *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateThumbNum()
	})
}

// SetCollectNum sets the "collect_num" field.
func (u *TravelUpsertOne) SetCollectNum(v int) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.SetCollectNum(v)
	})
}

// AddCollectNum adds v to the "collect_num" field.
func (u *TravelUpsertOne) AddCollectNum(v int) *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.AddCollectNum(v)
	})
}

// UpdateCollectNum sets the "collect_num" field to the value that was provided on create.
func (u *TravelUpsertOne) UpdateCollectNum() *TravelUpsertOne {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateCollectNum()
	})
}

// Exec executes the query.
func (u *TravelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TravelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TravelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TravelUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TravelUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TravelCreateBulk is the builder for creating many Travel entities in bulk.
type TravelCreateBulk struct {
	config
	err      error
	builders []*TravelCreate
	conflict []sql.ConflictOption
}

// Save creates the Travel entities in the database.
func (tcb *TravelCreateBulk) Save(ctx context.Context) ([]*Travel, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Travel, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TravelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TravelCreateBulk) SaveX(ctx context.Context) []*Travel {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TravelCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TravelCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Travel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TravelUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TravelCreateBulk) OnConflict(opts ...sql.ConflictOption) *TravelUpsertBulk {
	tcb.conflict = opts
	return &TravelUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Travel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TravelCreateBulk) OnConflictColumns(columns ...string) *TravelUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TravelUpsertBulk{
		create: tcb,
	}
}

// TravelUpsertBulk is the builder for "upsert"-ing
// a bulk of Travel nodes.
type TravelUpsertBulk struct {
	create *TravelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Travel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(travel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TravelUpsertBulk) UpdateNewValues() *TravelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(travel.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(travel.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(travel.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Travel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TravelUpsertBulk) Ignore() *TravelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TravelUpsertBulk) DoNothing() *TravelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TravelCreateBulk.OnConflict
// documentation for more info.
func (u *TravelUpsertBulk) Update(set func(*TravelUpsert)) *TravelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TravelUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TravelUpsertBulk) SetUpdatedAt(v int64) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TravelUpsertBulk) AddUpdatedAt(v int64) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TravelUpsertBulk) UpdateUpdatedAt() *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TravelUpsertBulk) SetUpdatedBy(v int64) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TravelUpsertBulk) AddUpdatedBy(v int64) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TravelUpsertBulk) UpdateUpdatedBy() *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TravelUpsertBulk) SetDeletedAt(v int64) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TravelUpsertBulk) AddDeletedAt(v int64) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TravelUpsertBulk) UpdateDeletedAt() *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *TravelUpsertBulk) SetDeletedBy(v int64) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *TravelUpsertBulk) AddDeletedBy(v int64) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *TravelUpsertBulk) UpdateDeletedBy() *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetTitle sets the "title" field.
func (u *TravelUpsertBulk) SetTitle(v string) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TravelUpsertBulk) UpdateTitle() *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *TravelUpsertBulk) SetDescription(v string) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TravelUpsertBulk) UpdateDescription() *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateDescription()
	})
}

// SetVideo sets the "video" field.
func (u *TravelUpsertBulk) SetVideo(v string) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.SetVideo(v)
	})
}

// UpdateVideo sets the "video" field to the value that was provided on create.
func (u *TravelUpsertBulk) UpdateVideo() *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateVideo()
	})
}

// SetPhotos sets the "photos" field.
func (u *TravelUpsertBulk) SetPhotos(v []string) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.SetPhotos(v)
	})
}

// UpdatePhotos sets the "photos" field to the value that was provided on create.
func (u *TravelUpsertBulk) UpdatePhotos() *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.UpdatePhotos()
	})
}

// SetBrowseNum sets the "browse_num" field.
func (u *TravelUpsertBulk) SetBrowseNum(v int) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.SetBrowseNum(v)
	})
}

// AddBrowseNum adds v to the "browse_num" field.
func (u *TravelUpsertBulk) AddBrowseNum(v int) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.AddBrowseNum(v)
	})
}

// UpdateBrowseNum sets the "browse_num" field to the value that was provided on create.
func (u *TravelUpsertBulk) UpdateBrowseNum() *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateBrowseNum()
	})
}

// SetThumbNum sets the "thumb_num" field.
func (u *TravelUpsertBulk) SetThumbNum(v int) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.SetThumbNum(v)
	})
}

// AddThumbNum adds v to the "thumb_num" field.
func (u *TravelUpsertBulk) AddThumbNum(v int) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.AddThumbNum(v)
	})
}

// UpdateThumbNum sets the "thumb_num" field to the value that was provided on create.
func (u *TravelUpsertBulk) UpdateThumbNum() *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateThumbNum()
	})
}

// SetCollectNum sets the "collect_num" field.
func (u *TravelUpsertBulk) SetCollectNum(v int) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.SetCollectNum(v)
	})
}

// AddCollectNum adds v to the "collect_num" field.
func (u *TravelUpsertBulk) AddCollectNum(v int) *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.AddCollectNum(v)
	})
}

// UpdateCollectNum sets the "collect_num" field to the value that was provided on create.
func (u *TravelUpsertBulk) UpdateCollectNum() *TravelUpsertBulk {
	return u.Update(func(s *TravelUpsert) {
		s.UpdateCollectNum()
	})
}

// Exec executes the query.
func (u *TravelUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TravelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TravelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TravelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
