// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/accountexperience"
	"blog/internal/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// AccountExperienceUpdate is the builder for updating AccountExperience entities.
type AccountExperienceUpdate struct {
	config
	hooks    []Hook
	mutation *AccountExperienceMutation
}

// Where appends a list predicates to the AccountExperienceUpdate builder.
func (aeu *AccountExperienceUpdate) Where(ps ...predicate.AccountExperience) *AccountExperienceUpdate {
	aeu.mutation.Where(ps...)
	return aeu
}

// SetUpdatedAt sets the "updated_at" field.
func (aeu *AccountExperienceUpdate) SetUpdatedAt(i int64) *AccountExperienceUpdate {
	aeu.mutation.ResetUpdatedAt()
	aeu.mutation.SetUpdatedAt(i)
	return aeu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (aeu *AccountExperienceUpdate) AddUpdatedAt(i int64) *AccountExperienceUpdate {
	aeu.mutation.AddUpdatedAt(i)
	return aeu
}

// SetUpdatedBy sets the "updated_by" field.
func (aeu *AccountExperienceUpdate) SetUpdatedBy(i int64) *AccountExperienceUpdate {
	aeu.mutation.ResetUpdatedBy()
	aeu.mutation.SetUpdatedBy(i)
	return aeu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aeu *AccountExperienceUpdate) SetNillableUpdatedBy(i *int64) *AccountExperienceUpdate {
	if i != nil {
		aeu.SetUpdatedBy(*i)
	}
	return aeu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (aeu *AccountExperienceUpdate) AddUpdatedBy(i int64) *AccountExperienceUpdate {
	aeu.mutation.AddUpdatedBy(i)
	return aeu
}

// SetDeletedAt sets the "deleted_at" field.
func (aeu *AccountExperienceUpdate) SetDeletedAt(i int64) *AccountExperienceUpdate {
	aeu.mutation.ResetDeletedAt()
	aeu.mutation.SetDeletedAt(i)
	return aeu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aeu *AccountExperienceUpdate) SetNillableDeletedAt(i *int64) *AccountExperienceUpdate {
	if i != nil {
		aeu.SetDeletedAt(*i)
	}
	return aeu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (aeu *AccountExperienceUpdate) AddDeletedAt(i int64) *AccountExperienceUpdate {
	aeu.mutation.AddDeletedAt(i)
	return aeu
}

// SetDeletedBy sets the "deleted_by" field.
func (aeu *AccountExperienceUpdate) SetDeletedBy(i int64) *AccountExperienceUpdate {
	aeu.mutation.ResetDeletedBy()
	aeu.mutation.SetDeletedBy(i)
	return aeu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (aeu *AccountExperienceUpdate) SetNillableDeletedBy(i *int64) *AccountExperienceUpdate {
	if i != nil {
		aeu.SetDeletedBy(*i)
	}
	return aeu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (aeu *AccountExperienceUpdate) AddDeletedBy(i int64) *AccountExperienceUpdate {
	aeu.mutation.AddDeletedBy(i)
	return aeu
}

// SetUserID sets the "user_id" field.
func (aeu *AccountExperienceUpdate) SetUserID(i int) *AccountExperienceUpdate {
	aeu.mutation.ResetUserID()
	aeu.mutation.SetUserID(i)
	return aeu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aeu *AccountExperienceUpdate) SetNillableUserID(i *int) *AccountExperienceUpdate {
	if i != nil {
		aeu.SetUserID(*i)
	}
	return aeu
}

// AddUserID adds i to the "user_id" field.
func (aeu *AccountExperienceUpdate) AddUserID(i int) *AccountExperienceUpdate {
	aeu.mutation.AddUserID(i)
	return aeu
}

// SetCompany sets the "company" field.
func (aeu *AccountExperienceUpdate) SetCompany(s string) *AccountExperienceUpdate {
	aeu.mutation.SetCompany(s)
	return aeu
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (aeu *AccountExperienceUpdate) SetNillableCompany(s *string) *AccountExperienceUpdate {
	if s != nil {
		aeu.SetCompany(*s)
	}
	return aeu
}

// SetRole sets the "role" field.
func (aeu *AccountExperienceUpdate) SetRole(s string) *AccountExperienceUpdate {
	aeu.mutation.SetRole(s)
	return aeu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (aeu *AccountExperienceUpdate) SetNillableRole(s *string) *AccountExperienceUpdate {
	if s != nil {
		aeu.SetRole(*s)
	}
	return aeu
}

// SetLocation sets the "location" field.
func (aeu *AccountExperienceUpdate) SetLocation(s string) *AccountExperienceUpdate {
	aeu.mutation.SetLocation(s)
	return aeu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (aeu *AccountExperienceUpdate) SetNillableLocation(s *string) *AccountExperienceUpdate {
	if s != nil {
		aeu.SetLocation(*s)
	}
	return aeu
}

// SetStart sets the "start" field.
func (aeu *AccountExperienceUpdate) SetStart(i int64) *AccountExperienceUpdate {
	aeu.mutation.ResetStart()
	aeu.mutation.SetStart(i)
	return aeu
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (aeu *AccountExperienceUpdate) SetNillableStart(i *int64) *AccountExperienceUpdate {
	if i != nil {
		aeu.SetStart(*i)
	}
	return aeu
}

// AddStart adds i to the "start" field.
func (aeu *AccountExperienceUpdate) AddStart(i int64) *AccountExperienceUpdate {
	aeu.mutation.AddStart(i)
	return aeu
}

// SetEnd sets the "end" field.
func (aeu *AccountExperienceUpdate) SetEnd(i int64) *AccountExperienceUpdate {
	aeu.mutation.ResetEnd()
	aeu.mutation.SetEnd(i)
	return aeu
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (aeu *AccountExperienceUpdate) SetNillableEnd(i *int64) *AccountExperienceUpdate {
	if i != nil {
		aeu.SetEnd(*i)
	}
	return aeu
}

// AddEnd adds i to the "end" field.
func (aeu *AccountExperienceUpdate) AddEnd(i int64) *AccountExperienceUpdate {
	aeu.mutation.AddEnd(i)
	return aeu
}

// SetDescription sets the "description" field.
func (aeu *AccountExperienceUpdate) SetDescription(s string) *AccountExperienceUpdate {
	aeu.mutation.SetDescription(s)
	return aeu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aeu *AccountExperienceUpdate) SetNillableDescription(s *string) *AccountExperienceUpdate {
	if s != nil {
		aeu.SetDescription(*s)
	}
	return aeu
}

// SetResponsibilities sets the "responsibilities" field.
func (aeu *AccountExperienceUpdate) SetResponsibilities(s string) *AccountExperienceUpdate {
	aeu.mutation.SetResponsibilities(s)
	return aeu
}

// SetNillableResponsibilities sets the "responsibilities" field if the given value is not nil.
func (aeu *AccountExperienceUpdate) SetNillableResponsibilities(s *string) *AccountExperienceUpdate {
	if s != nil {
		aeu.SetResponsibilities(*s)
	}
	return aeu
}

// SetAchievements sets the "achievements" field.
func (aeu *AccountExperienceUpdate) SetAchievements(s string) *AccountExperienceUpdate {
	aeu.mutation.SetAchievements(s)
	return aeu
}

// SetNillableAchievements sets the "achievements" field if the given value is not nil.
func (aeu *AccountExperienceUpdate) SetNillableAchievements(s *string) *AccountExperienceUpdate {
	if s != nil {
		aeu.SetAchievements(*s)
	}
	return aeu
}

// SetSkills sets the "skills" field.
func (aeu *AccountExperienceUpdate) SetSkills(s []string) *AccountExperienceUpdate {
	aeu.mutation.SetSkills(s)
	return aeu
}

// AppendSkills appends s to the "skills" field.
func (aeu *AccountExperienceUpdate) AppendSkills(s []string) *AccountExperienceUpdate {
	aeu.mutation.AppendSkills(s)
	return aeu
}

// Mutation returns the AccountExperienceMutation object of the builder.
func (aeu *AccountExperienceUpdate) Mutation() *AccountExperienceMutation {
	return aeu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aeu *AccountExperienceUpdate) Save(ctx context.Context) (int, error) {
	if err := aeu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, aeu.sqlSave, aeu.mutation, aeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aeu *AccountExperienceUpdate) SaveX(ctx context.Context) int {
	affected, err := aeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aeu *AccountExperienceUpdate) Exec(ctx context.Context) error {
	_, err := aeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeu *AccountExperienceUpdate) ExecX(ctx context.Context) {
	if err := aeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aeu *AccountExperienceUpdate) defaults() error {
	if _, ok := aeu.mutation.UpdatedAt(); !ok {
		if accountexperience.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized accountexperience.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := accountexperience.UpdateDefaultUpdatedAt()
		aeu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (aeu *AccountExperienceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(accountexperience.Table, accountexperience.Columns, sqlgraph.NewFieldSpec(accountexperience.FieldID, field.TypeInt))
	if ps := aeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeu.mutation.UpdatedAt(); ok {
		_spec.SetField(accountexperience.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := aeu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(accountexperience.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := aeu.mutation.UpdatedBy(); ok {
		_spec.SetField(accountexperience.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := aeu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(accountexperience.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := aeu.mutation.DeletedAt(); ok {
		_spec.SetField(accountexperience.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := aeu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(accountexperience.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := aeu.mutation.DeletedBy(); ok {
		_spec.SetField(accountexperience.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := aeu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(accountexperience.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := aeu.mutation.UserID(); ok {
		_spec.SetField(accountexperience.FieldUserID, field.TypeInt, value)
	}
	if value, ok := aeu.mutation.AddedUserID(); ok {
		_spec.AddField(accountexperience.FieldUserID, field.TypeInt, value)
	}
	if value, ok := aeu.mutation.Company(); ok {
		_spec.SetField(accountexperience.FieldCompany, field.TypeString, value)
	}
	if value, ok := aeu.mutation.Role(); ok {
		_spec.SetField(accountexperience.FieldRole, field.TypeString, value)
	}
	if value, ok := aeu.mutation.Location(); ok {
		_spec.SetField(accountexperience.FieldLocation, field.TypeString, value)
	}
	if value, ok := aeu.mutation.Start(); ok {
		_spec.SetField(accountexperience.FieldStart, field.TypeInt64, value)
	}
	if value, ok := aeu.mutation.AddedStart(); ok {
		_spec.AddField(accountexperience.FieldStart, field.TypeInt64, value)
	}
	if value, ok := aeu.mutation.End(); ok {
		_spec.SetField(accountexperience.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := aeu.mutation.AddedEnd(); ok {
		_spec.AddField(accountexperience.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := aeu.mutation.Description(); ok {
		_spec.SetField(accountexperience.FieldDescription, field.TypeString, value)
	}
	if value, ok := aeu.mutation.Responsibilities(); ok {
		_spec.SetField(accountexperience.FieldResponsibilities, field.TypeString, value)
	}
	if value, ok := aeu.mutation.Achievements(); ok {
		_spec.SetField(accountexperience.FieldAchievements, field.TypeString, value)
	}
	if value, ok := aeu.mutation.Skills(); ok {
		_spec.SetField(accountexperience.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := aeu.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accountexperience.FieldSkills, value)
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountexperience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aeu.mutation.done = true
	return n, nil
}

// AccountExperienceUpdateOne is the builder for updating a single AccountExperience entity.
type AccountExperienceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountExperienceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (aeuo *AccountExperienceUpdateOne) SetUpdatedAt(i int64) *AccountExperienceUpdateOne {
	aeuo.mutation.ResetUpdatedAt()
	aeuo.mutation.SetUpdatedAt(i)
	return aeuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (aeuo *AccountExperienceUpdateOne) AddUpdatedAt(i int64) *AccountExperienceUpdateOne {
	aeuo.mutation.AddUpdatedAt(i)
	return aeuo
}

// SetUpdatedBy sets the "updated_by" field.
func (aeuo *AccountExperienceUpdateOne) SetUpdatedBy(i int64) *AccountExperienceUpdateOne {
	aeuo.mutation.ResetUpdatedBy()
	aeuo.mutation.SetUpdatedBy(i)
	return aeuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aeuo *AccountExperienceUpdateOne) SetNillableUpdatedBy(i *int64) *AccountExperienceUpdateOne {
	if i != nil {
		aeuo.SetUpdatedBy(*i)
	}
	return aeuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (aeuo *AccountExperienceUpdateOne) AddUpdatedBy(i int64) *AccountExperienceUpdateOne {
	aeuo.mutation.AddUpdatedBy(i)
	return aeuo
}

// SetDeletedAt sets the "deleted_at" field.
func (aeuo *AccountExperienceUpdateOne) SetDeletedAt(i int64) *AccountExperienceUpdateOne {
	aeuo.mutation.ResetDeletedAt()
	aeuo.mutation.SetDeletedAt(i)
	return aeuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aeuo *AccountExperienceUpdateOne) SetNillableDeletedAt(i *int64) *AccountExperienceUpdateOne {
	if i != nil {
		aeuo.SetDeletedAt(*i)
	}
	return aeuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (aeuo *AccountExperienceUpdateOne) AddDeletedAt(i int64) *AccountExperienceUpdateOne {
	aeuo.mutation.AddDeletedAt(i)
	return aeuo
}

// SetDeletedBy sets the "deleted_by" field.
func (aeuo *AccountExperienceUpdateOne) SetDeletedBy(i int64) *AccountExperienceUpdateOne {
	aeuo.mutation.ResetDeletedBy()
	aeuo.mutation.SetDeletedBy(i)
	return aeuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (aeuo *AccountExperienceUpdateOne) SetNillableDeletedBy(i *int64) *AccountExperienceUpdateOne {
	if i != nil {
		aeuo.SetDeletedBy(*i)
	}
	return aeuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (aeuo *AccountExperienceUpdateOne) AddDeletedBy(i int64) *AccountExperienceUpdateOne {
	aeuo.mutation.AddDeletedBy(i)
	return aeuo
}

// SetUserID sets the "user_id" field.
func (aeuo *AccountExperienceUpdateOne) SetUserID(i int) *AccountExperienceUpdateOne {
	aeuo.mutation.ResetUserID()
	aeuo.mutation.SetUserID(i)
	return aeuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aeuo *AccountExperienceUpdateOne) SetNillableUserID(i *int) *AccountExperienceUpdateOne {
	if i != nil {
		aeuo.SetUserID(*i)
	}
	return aeuo
}

// AddUserID adds i to the "user_id" field.
func (aeuo *AccountExperienceUpdateOne) AddUserID(i int) *AccountExperienceUpdateOne {
	aeuo.mutation.AddUserID(i)
	return aeuo
}

// SetCompany sets the "company" field.
func (aeuo *AccountExperienceUpdateOne) SetCompany(s string) *AccountExperienceUpdateOne {
	aeuo.mutation.SetCompany(s)
	return aeuo
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (aeuo *AccountExperienceUpdateOne) SetNillableCompany(s *string) *AccountExperienceUpdateOne {
	if s != nil {
		aeuo.SetCompany(*s)
	}
	return aeuo
}

// SetRole sets the "role" field.
func (aeuo *AccountExperienceUpdateOne) SetRole(s string) *AccountExperienceUpdateOne {
	aeuo.mutation.SetRole(s)
	return aeuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (aeuo *AccountExperienceUpdateOne) SetNillableRole(s *string) *AccountExperienceUpdateOne {
	if s != nil {
		aeuo.SetRole(*s)
	}
	return aeuo
}

// SetLocation sets the "location" field.
func (aeuo *AccountExperienceUpdateOne) SetLocation(s string) *AccountExperienceUpdateOne {
	aeuo.mutation.SetLocation(s)
	return aeuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (aeuo *AccountExperienceUpdateOne) SetNillableLocation(s *string) *AccountExperienceUpdateOne {
	if s != nil {
		aeuo.SetLocation(*s)
	}
	return aeuo
}

// SetStart sets the "start" field.
func (aeuo *AccountExperienceUpdateOne) SetStart(i int64) *AccountExperienceUpdateOne {
	aeuo.mutation.ResetStart()
	aeuo.mutation.SetStart(i)
	return aeuo
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (aeuo *AccountExperienceUpdateOne) SetNillableStart(i *int64) *AccountExperienceUpdateOne {
	if i != nil {
		aeuo.SetStart(*i)
	}
	return aeuo
}

// AddStart adds i to the "start" field.
func (aeuo *AccountExperienceUpdateOne) AddStart(i int64) *AccountExperienceUpdateOne {
	aeuo.mutation.AddStart(i)
	return aeuo
}

// SetEnd sets the "end" field.
func (aeuo *AccountExperienceUpdateOne) SetEnd(i int64) *AccountExperienceUpdateOne {
	aeuo.mutation.ResetEnd()
	aeuo.mutation.SetEnd(i)
	return aeuo
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (aeuo *AccountExperienceUpdateOne) SetNillableEnd(i *int64) *AccountExperienceUpdateOne {
	if i != nil {
		aeuo.SetEnd(*i)
	}
	return aeuo
}

// AddEnd adds i to the "end" field.
func (aeuo *AccountExperienceUpdateOne) AddEnd(i int64) *AccountExperienceUpdateOne {
	aeuo.mutation.AddEnd(i)
	return aeuo
}

// SetDescription sets the "description" field.
func (aeuo *AccountExperienceUpdateOne) SetDescription(s string) *AccountExperienceUpdateOne {
	aeuo.mutation.SetDescription(s)
	return aeuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aeuo *AccountExperienceUpdateOne) SetNillableDescription(s *string) *AccountExperienceUpdateOne {
	if s != nil {
		aeuo.SetDescription(*s)
	}
	return aeuo
}

// SetResponsibilities sets the "responsibilities" field.
func (aeuo *AccountExperienceUpdateOne) SetResponsibilities(s string) *AccountExperienceUpdateOne {
	aeuo.mutation.SetResponsibilities(s)
	return aeuo
}

// SetNillableResponsibilities sets the "responsibilities" field if the given value is not nil.
func (aeuo *AccountExperienceUpdateOne) SetNillableResponsibilities(s *string) *AccountExperienceUpdateOne {
	if s != nil {
		aeuo.SetResponsibilities(*s)
	}
	return aeuo
}

// SetAchievements sets the "achievements" field.
func (aeuo *AccountExperienceUpdateOne) SetAchievements(s string) *AccountExperienceUpdateOne {
	aeuo.mutation.SetAchievements(s)
	return aeuo
}

// SetNillableAchievements sets the "achievements" field if the given value is not nil.
func (aeuo *AccountExperienceUpdateOne) SetNillableAchievements(s *string) *AccountExperienceUpdateOne {
	if s != nil {
		aeuo.SetAchievements(*s)
	}
	return aeuo
}

// SetSkills sets the "skills" field.
func (aeuo *AccountExperienceUpdateOne) SetSkills(s []string) *AccountExperienceUpdateOne {
	aeuo.mutation.SetSkills(s)
	return aeuo
}

// AppendSkills appends s to the "skills" field.
func (aeuo *AccountExperienceUpdateOne) AppendSkills(s []string) *AccountExperienceUpdateOne {
	aeuo.mutation.AppendSkills(s)
	return aeuo
}

// Mutation returns the AccountExperienceMutation object of the builder.
func (aeuo *AccountExperienceUpdateOne) Mutation() *AccountExperienceMutation {
	return aeuo.mutation
}

// Where appends a list predicates to the AccountExperienceUpdate builder.
func (aeuo *AccountExperienceUpdateOne) Where(ps ...predicate.AccountExperience) *AccountExperienceUpdateOne {
	aeuo.mutation.Where(ps...)
	return aeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aeuo *AccountExperienceUpdateOne) Select(field string, fields ...string) *AccountExperienceUpdateOne {
	aeuo.fields = append([]string{field}, fields...)
	return aeuo
}

// Save executes the query and returns the updated AccountExperience entity.
func (aeuo *AccountExperienceUpdateOne) Save(ctx context.Context) (*AccountExperience, error) {
	if err := aeuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, aeuo.sqlSave, aeuo.mutation, aeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aeuo *AccountExperienceUpdateOne) SaveX(ctx context.Context) *AccountExperience {
	node, err := aeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aeuo *AccountExperienceUpdateOne) Exec(ctx context.Context) error {
	_, err := aeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeuo *AccountExperienceUpdateOne) ExecX(ctx context.Context) {
	if err := aeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aeuo *AccountExperienceUpdateOne) defaults() error {
	if _, ok := aeuo.mutation.UpdatedAt(); !ok {
		if accountexperience.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized accountexperience.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := accountexperience.UpdateDefaultUpdatedAt()
		aeuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (aeuo *AccountExperienceUpdateOne) sqlSave(ctx context.Context) (_node *AccountExperience, err error) {
	_spec := sqlgraph.NewUpdateSpec(accountexperience.Table, accountexperience.Columns, sqlgraph.NewFieldSpec(accountexperience.FieldID, field.TypeInt))
	id, ok := aeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccountExperience.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountexperience.FieldID)
		for _, f := range fields {
			if !accountexperience.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountexperience.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeuo.mutation.UpdatedAt(); ok {
		_spec.SetField(accountexperience.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := aeuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(accountexperience.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := aeuo.mutation.UpdatedBy(); ok {
		_spec.SetField(accountexperience.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := aeuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(accountexperience.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := aeuo.mutation.DeletedAt(); ok {
		_spec.SetField(accountexperience.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := aeuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(accountexperience.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := aeuo.mutation.DeletedBy(); ok {
		_spec.SetField(accountexperience.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := aeuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(accountexperience.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := aeuo.mutation.UserID(); ok {
		_spec.SetField(accountexperience.FieldUserID, field.TypeInt, value)
	}
	if value, ok := aeuo.mutation.AddedUserID(); ok {
		_spec.AddField(accountexperience.FieldUserID, field.TypeInt, value)
	}
	if value, ok := aeuo.mutation.Company(); ok {
		_spec.SetField(accountexperience.FieldCompany, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.Role(); ok {
		_spec.SetField(accountexperience.FieldRole, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.Location(); ok {
		_spec.SetField(accountexperience.FieldLocation, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.Start(); ok {
		_spec.SetField(accountexperience.FieldStart, field.TypeInt64, value)
	}
	if value, ok := aeuo.mutation.AddedStart(); ok {
		_spec.AddField(accountexperience.FieldStart, field.TypeInt64, value)
	}
	if value, ok := aeuo.mutation.End(); ok {
		_spec.SetField(accountexperience.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := aeuo.mutation.AddedEnd(); ok {
		_spec.AddField(accountexperience.FieldEnd, field.TypeInt64, value)
	}
	if value, ok := aeuo.mutation.Description(); ok {
		_spec.SetField(accountexperience.FieldDescription, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.Responsibilities(); ok {
		_spec.SetField(accountexperience.FieldResponsibilities, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.Achievements(); ok {
		_spec.SetField(accountexperience.FieldAchievements, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.Skills(); ok {
		_spec.SetField(accountexperience.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := aeuo.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accountexperience.FieldSkills, value)
		})
	}
	_node = &AccountExperience{config: aeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountexperience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aeuo.mutation.done = true
	return _node, nil
}
