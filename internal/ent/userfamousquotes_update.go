// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/predicate"
	"blog/internal/ent/userfamousquotes"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserFamousQuotesUpdate is the builder for updating UserFamousQuotes entities.
type UserFamousQuotesUpdate struct {
	config
	hooks    []Hook
	mutation *UserFamousQuotesMutation
}

// Where appends a list predicates to the UserFamousQuotesUpdate builder.
func (ufqu *UserFamousQuotesUpdate) Where(ps ...predicate.UserFamousQuotes) *UserFamousQuotesUpdate {
	ufqu.mutation.Where(ps...)
	return ufqu
}

// SetUpdatedAt sets the "updated_at" field.
func (ufqu *UserFamousQuotesUpdate) SetUpdatedAt(i int64) *UserFamousQuotesUpdate {
	ufqu.mutation.ResetUpdatedAt()
	ufqu.mutation.SetUpdatedAt(i)
	return ufqu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ufqu *UserFamousQuotesUpdate) AddUpdatedAt(i int64) *UserFamousQuotesUpdate {
	ufqu.mutation.AddUpdatedAt(i)
	return ufqu
}

// SetUpdatedBy sets the "updated_by" field.
func (ufqu *UserFamousQuotesUpdate) SetUpdatedBy(i int64) *UserFamousQuotesUpdate {
	ufqu.mutation.ResetUpdatedBy()
	ufqu.mutation.SetUpdatedBy(i)
	return ufqu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ufqu *UserFamousQuotesUpdate) SetNillableUpdatedBy(i *int64) *UserFamousQuotesUpdate {
	if i != nil {
		ufqu.SetUpdatedBy(*i)
	}
	return ufqu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ufqu *UserFamousQuotesUpdate) AddUpdatedBy(i int64) *UserFamousQuotesUpdate {
	ufqu.mutation.AddUpdatedBy(i)
	return ufqu
}

// SetDeletedAt sets the "deleted_at" field.
func (ufqu *UserFamousQuotesUpdate) SetDeletedAt(i int64) *UserFamousQuotesUpdate {
	ufqu.mutation.ResetDeletedAt()
	ufqu.mutation.SetDeletedAt(i)
	return ufqu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ufqu *UserFamousQuotesUpdate) SetNillableDeletedAt(i *int64) *UserFamousQuotesUpdate {
	if i != nil {
		ufqu.SetDeletedAt(*i)
	}
	return ufqu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (ufqu *UserFamousQuotesUpdate) AddDeletedAt(i int64) *UserFamousQuotesUpdate {
	ufqu.mutation.AddDeletedAt(i)
	return ufqu
}

// SetDeletedBy sets the "deleted_by" field.
func (ufqu *UserFamousQuotesUpdate) SetDeletedBy(i int64) *UserFamousQuotesUpdate {
	ufqu.mutation.ResetDeletedBy()
	ufqu.mutation.SetDeletedBy(i)
	return ufqu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ufqu *UserFamousQuotesUpdate) SetNillableDeletedBy(i *int64) *UserFamousQuotesUpdate {
	if i != nil {
		ufqu.SetDeletedBy(*i)
	}
	return ufqu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (ufqu *UserFamousQuotesUpdate) AddDeletedBy(i int64) *UserFamousQuotesUpdate {
	ufqu.mutation.AddDeletedBy(i)
	return ufqu
}

// SetText sets the "text" field.
func (ufqu *UserFamousQuotesUpdate) SetText(s string) *UserFamousQuotesUpdate {
	ufqu.mutation.SetText(s)
	return ufqu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (ufqu *UserFamousQuotesUpdate) SetNillableText(s *string) *UserFamousQuotesUpdate {
	if s != nil {
		ufqu.SetText(*s)
	}
	return ufqu
}

// Mutation returns the UserFamousQuotesMutation object of the builder.
func (ufqu *UserFamousQuotesUpdate) Mutation() *UserFamousQuotesMutation {
	return ufqu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufqu *UserFamousQuotesUpdate) Save(ctx context.Context) (int, error) {
	if err := ufqu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ufqu.sqlSave, ufqu.mutation, ufqu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufqu *UserFamousQuotesUpdate) SaveX(ctx context.Context) int {
	affected, err := ufqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufqu *UserFamousQuotesUpdate) Exec(ctx context.Context) error {
	_, err := ufqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufqu *UserFamousQuotesUpdate) ExecX(ctx context.Context) {
	if err := ufqu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufqu *UserFamousQuotesUpdate) defaults() error {
	if _, ok := ufqu.mutation.CreatedAt(); !ok {
		if userfamousquotes.UpdateDefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized userfamousquotes.UpdateDefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := userfamousquotes.UpdateDefaultCreatedAt()
		ufqu.mutation.SetCreatedAt(v)
	}
	if _, ok := ufqu.mutation.UpdatedAt(); !ok {
		if userfamousquotes.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized userfamousquotes.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := userfamousquotes.UpdateDefaultUpdatedAt()
		ufqu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ufqu *UserFamousQuotesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userfamousquotes.Table, userfamousquotes.Columns, sqlgraph.NewFieldSpec(userfamousquotes.FieldID, field.TypeInt))
	if ps := ufqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufqu.mutation.CreatedAt(); ok {
		_spec.SetField(userfamousquotes.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := ufqu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(userfamousquotes.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := ufqu.mutation.UpdatedAt(); ok {
		_spec.SetField(userfamousquotes.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ufqu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(userfamousquotes.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ufqu.mutation.UpdatedBy(); ok {
		_spec.SetField(userfamousquotes.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ufqu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(userfamousquotes.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ufqu.mutation.DeletedAt(); ok {
		_spec.SetField(userfamousquotes.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := ufqu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(userfamousquotes.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := ufqu.mutation.DeletedBy(); ok {
		_spec.SetField(userfamousquotes.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := ufqu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(userfamousquotes.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := ufqu.mutation.Text(); ok {
		_spec.SetField(userfamousquotes.FieldText, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfamousquotes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufqu.mutation.done = true
	return n, nil
}

// UserFamousQuotesUpdateOne is the builder for updating a single UserFamousQuotes entity.
type UserFamousQuotesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserFamousQuotesMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ufquo *UserFamousQuotesUpdateOne) SetUpdatedAt(i int64) *UserFamousQuotesUpdateOne {
	ufquo.mutation.ResetUpdatedAt()
	ufquo.mutation.SetUpdatedAt(i)
	return ufquo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ufquo *UserFamousQuotesUpdateOne) AddUpdatedAt(i int64) *UserFamousQuotesUpdateOne {
	ufquo.mutation.AddUpdatedAt(i)
	return ufquo
}

// SetUpdatedBy sets the "updated_by" field.
func (ufquo *UserFamousQuotesUpdateOne) SetUpdatedBy(i int64) *UserFamousQuotesUpdateOne {
	ufquo.mutation.ResetUpdatedBy()
	ufquo.mutation.SetUpdatedBy(i)
	return ufquo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ufquo *UserFamousQuotesUpdateOne) SetNillableUpdatedBy(i *int64) *UserFamousQuotesUpdateOne {
	if i != nil {
		ufquo.SetUpdatedBy(*i)
	}
	return ufquo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ufquo *UserFamousQuotesUpdateOne) AddUpdatedBy(i int64) *UserFamousQuotesUpdateOne {
	ufquo.mutation.AddUpdatedBy(i)
	return ufquo
}

// SetDeletedAt sets the "deleted_at" field.
func (ufquo *UserFamousQuotesUpdateOne) SetDeletedAt(i int64) *UserFamousQuotesUpdateOne {
	ufquo.mutation.ResetDeletedAt()
	ufquo.mutation.SetDeletedAt(i)
	return ufquo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ufquo *UserFamousQuotesUpdateOne) SetNillableDeletedAt(i *int64) *UserFamousQuotesUpdateOne {
	if i != nil {
		ufquo.SetDeletedAt(*i)
	}
	return ufquo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (ufquo *UserFamousQuotesUpdateOne) AddDeletedAt(i int64) *UserFamousQuotesUpdateOne {
	ufquo.mutation.AddDeletedAt(i)
	return ufquo
}

// SetDeletedBy sets the "deleted_by" field.
func (ufquo *UserFamousQuotesUpdateOne) SetDeletedBy(i int64) *UserFamousQuotesUpdateOne {
	ufquo.mutation.ResetDeletedBy()
	ufquo.mutation.SetDeletedBy(i)
	return ufquo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ufquo *UserFamousQuotesUpdateOne) SetNillableDeletedBy(i *int64) *UserFamousQuotesUpdateOne {
	if i != nil {
		ufquo.SetDeletedBy(*i)
	}
	return ufquo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (ufquo *UserFamousQuotesUpdateOne) AddDeletedBy(i int64) *UserFamousQuotesUpdateOne {
	ufquo.mutation.AddDeletedBy(i)
	return ufquo
}

// SetText sets the "text" field.
func (ufquo *UserFamousQuotesUpdateOne) SetText(s string) *UserFamousQuotesUpdateOne {
	ufquo.mutation.SetText(s)
	return ufquo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (ufquo *UserFamousQuotesUpdateOne) SetNillableText(s *string) *UserFamousQuotesUpdateOne {
	if s != nil {
		ufquo.SetText(*s)
	}
	return ufquo
}

// Mutation returns the UserFamousQuotesMutation object of the builder.
func (ufquo *UserFamousQuotesUpdateOne) Mutation() *UserFamousQuotesMutation {
	return ufquo.mutation
}

// Where appends a list predicates to the UserFamousQuotesUpdate builder.
func (ufquo *UserFamousQuotesUpdateOne) Where(ps ...predicate.UserFamousQuotes) *UserFamousQuotesUpdateOne {
	ufquo.mutation.Where(ps...)
	return ufquo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufquo *UserFamousQuotesUpdateOne) Select(field string, fields ...string) *UserFamousQuotesUpdateOne {
	ufquo.fields = append([]string{field}, fields...)
	return ufquo
}

// Save executes the query and returns the updated UserFamousQuotes entity.
func (ufquo *UserFamousQuotesUpdateOne) Save(ctx context.Context) (*UserFamousQuotes, error) {
	if err := ufquo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ufquo.sqlSave, ufquo.mutation, ufquo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufquo *UserFamousQuotesUpdateOne) SaveX(ctx context.Context) *UserFamousQuotes {
	node, err := ufquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufquo *UserFamousQuotesUpdateOne) Exec(ctx context.Context) error {
	_, err := ufquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufquo *UserFamousQuotesUpdateOne) ExecX(ctx context.Context) {
	if err := ufquo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufquo *UserFamousQuotesUpdateOne) defaults() error {
	if _, ok := ufquo.mutation.CreatedAt(); !ok {
		if userfamousquotes.UpdateDefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized userfamousquotes.UpdateDefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := userfamousquotes.UpdateDefaultCreatedAt()
		ufquo.mutation.SetCreatedAt(v)
	}
	if _, ok := ufquo.mutation.UpdatedAt(); !ok {
		if userfamousquotes.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized userfamousquotes.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := userfamousquotes.UpdateDefaultUpdatedAt()
		ufquo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ufquo *UserFamousQuotesUpdateOne) sqlSave(ctx context.Context) (_node *UserFamousQuotes, err error) {
	_spec := sqlgraph.NewUpdateSpec(userfamousquotes.Table, userfamousquotes.Columns, sqlgraph.NewFieldSpec(userfamousquotes.FieldID, field.TypeInt))
	id, ok := ufquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserFamousQuotes.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userfamousquotes.FieldID)
		for _, f := range fields {
			if !userfamousquotes.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userfamousquotes.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufquo.mutation.CreatedAt(); ok {
		_spec.SetField(userfamousquotes.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := ufquo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(userfamousquotes.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := ufquo.mutation.UpdatedAt(); ok {
		_spec.SetField(userfamousquotes.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ufquo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(userfamousquotes.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ufquo.mutation.UpdatedBy(); ok {
		_spec.SetField(userfamousquotes.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ufquo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(userfamousquotes.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ufquo.mutation.DeletedAt(); ok {
		_spec.SetField(userfamousquotes.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := ufquo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(userfamousquotes.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := ufquo.mutation.DeletedBy(); ok {
		_spec.SetField(userfamousquotes.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := ufquo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(userfamousquotes.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := ufquo.mutation.Text(); ok {
		_spec.SetField(userfamousquotes.FieldText, field.TypeString, value)
	}
	_node = &UserFamousQuotes{config: ufquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfamousquotes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufquo.mutation.done = true
	return _node, nil
}
