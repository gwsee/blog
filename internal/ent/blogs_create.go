// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/blogs"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlogsCreate is the builder for creating a Blogs entity.
type BlogsCreate struct {
	config
	mutation *BlogsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bc *BlogsCreate) SetCreatedAt(i int64) *BlogsCreate {
	bc.mutation.SetCreatedAt(i)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BlogsCreate) SetNillableCreatedAt(i *int64) *BlogsCreate {
	if i != nil {
		bc.SetCreatedAt(*i)
	}
	return bc
}

// SetCreatedBy sets the "created_by" field.
func (bc *BlogsCreate) SetCreatedBy(s string) *BlogsCreate {
	bc.mutation.SetCreatedBy(s)
	return bc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (bc *BlogsCreate) SetNillableCreatedBy(s *string) *BlogsCreate {
	if s != nil {
		bc.SetCreatedBy(*s)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BlogsCreate) SetUpdatedAt(i int64) *BlogsCreate {
	bc.mutation.SetUpdatedAt(i)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BlogsCreate) SetNillableUpdatedAt(i *int64) *BlogsCreate {
	if i != nil {
		bc.SetUpdatedAt(*i)
	}
	return bc
}

// SetUpdatedBy sets the "updated_by" field.
func (bc *BlogsCreate) SetUpdatedBy(s string) *BlogsCreate {
	bc.mutation.SetUpdatedBy(s)
	return bc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (bc *BlogsCreate) SetNillableUpdatedBy(s *string) *BlogsCreate {
	if s != nil {
		bc.SetUpdatedBy(*s)
	}
	return bc
}

// SetIsDeleted sets the "is_deleted" field.
func (bc *BlogsCreate) SetIsDeleted(u uint8) *BlogsCreate {
	bc.mutation.SetIsDeleted(u)
	return bc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (bc *BlogsCreate) SetNillableIsDeleted(u *uint8) *BlogsCreate {
	if u != nil {
		bc.SetIsDeleted(*u)
	}
	return bc
}

// SetDeletedAt sets the "deleted_at" field.
func (bc *BlogsCreate) SetDeletedAt(i int64) *BlogsCreate {
	bc.mutation.SetDeletedAt(i)
	return bc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bc *BlogsCreate) SetNillableDeletedAt(i *int64) *BlogsCreate {
	if i != nil {
		bc.SetDeletedAt(*i)
	}
	return bc
}

// SetDeletedBy sets the "deleted_by" field.
func (bc *BlogsCreate) SetDeletedBy(s string) *BlogsCreate {
	bc.mutation.SetDeletedBy(s)
	return bc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (bc *BlogsCreate) SetNillableDeletedBy(s *string) *BlogsCreate {
	if s != nil {
		bc.SetDeletedBy(*s)
	}
	return bc
}

// SetAccountID sets the "account_id" field.
func (bc *BlogsCreate) SetAccountID(i int) *BlogsCreate {
	bc.mutation.SetAccountID(i)
	return bc
}

// SetTitle sets the "title" field.
func (bc *BlogsCreate) SetTitle(s string) *BlogsCreate {
	bc.mutation.SetTitle(s)
	return bc
}

// SetDescription sets the "description" field.
func (bc *BlogsCreate) SetDescription(s string) *BlogsCreate {
	bc.mutation.SetDescription(s)
	return bc
}

// SetIsHidden sets the "is_hidden" field.
func (bc *BlogsCreate) SetIsHidden(i int8) *BlogsCreate {
	bc.mutation.SetIsHidden(i)
	return bc
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (bc *BlogsCreate) SetNillableIsHidden(i *int8) *BlogsCreate {
	if i != nil {
		bc.SetIsHidden(*i)
	}
	return bc
}

// SetTags sets the "tags" field.
func (bc *BlogsCreate) SetTags(s []string) *BlogsCreate {
	bc.mutation.SetTags(s)
	return bc
}

// SetCover sets the "cover" field.
func (bc *BlogsCreate) SetCover(s string) *BlogsCreate {
	bc.mutation.SetCover(s)
	return bc
}

// SetContent sets the "content" field.
func (bc *BlogsCreate) SetContent(s string) *BlogsCreate {
	bc.mutation.SetContent(s)
	return bc
}

// SetID sets the "id" field.
func (bc *BlogsCreate) SetID(i int) *BlogsCreate {
	bc.mutation.SetID(i)
	return bc
}

// Mutation returns the BlogsMutation object of the builder.
func (bc *BlogsCreate) Mutation() *BlogsMutation {
	return bc.mutation
}

// Save creates the Blogs in the database.
func (bc *BlogsCreate) Save(ctx context.Context) (*Blogs, error) {
	if err := bc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BlogsCreate) SaveX(ctx context.Context) *Blogs {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BlogsCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BlogsCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BlogsCreate) defaults() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := blogs.DefaultCreatedAt
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.CreatedBy(); !ok {
		v := blogs.DefaultCreatedBy
		bc.mutation.SetCreatedBy(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := blogs.DefaultUpdatedAt
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedBy(); !ok {
		v := blogs.DefaultUpdatedBy
		bc.mutation.SetUpdatedBy(v)
	}
	if _, ok := bc.mutation.IsDeleted(); !ok {
		v := blogs.DefaultIsDeleted
		bc.mutation.SetIsDeleted(v)
	}
	if _, ok := bc.mutation.DeletedAt(); !ok {
		v := blogs.DefaultDeletedAt
		bc.mutation.SetDeletedAt(v)
	}
	if _, ok := bc.mutation.DeletedBy(); !ok {
		v := blogs.DefaultDeletedBy
		bc.mutation.SetDeletedBy(v)
	}
	if _, ok := bc.mutation.IsHidden(); !ok {
		v := blogs.DefaultIsHidden
		bc.mutation.SetIsHidden(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bc *BlogsCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Blogs.created_at"`)}
	}
	if _, ok := bc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Blogs.created_by"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Blogs.updated_at"`)}
	}
	if _, ok := bc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Blogs.updated_by"`)}
	}
	if _, ok := bc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "Blogs.is_deleted"`)}
	}
	if _, ok := bc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Blogs.deleted_at"`)}
	}
	if _, ok := bc.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "Blogs.deleted_by"`)}
	}
	if _, ok := bc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "Blogs.account_id"`)}
	}
	if _, ok := bc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Blogs.title"`)}
	}
	if _, ok := bc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Blogs.description"`)}
	}
	if _, ok := bc.mutation.IsHidden(); !ok {
		return &ValidationError{Name: "is_hidden", err: errors.New(`ent: missing required field "Blogs.is_hidden"`)}
	}
	if _, ok := bc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Blogs.tags"`)}
	}
	if _, ok := bc.mutation.Cover(); !ok {
		return &ValidationError{Name: "cover", err: errors.New(`ent: missing required field "Blogs.cover"`)}
	}
	if _, ok := bc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Blogs.content"`)}
	}
	if v, ok := bc.mutation.Content(); ok {
		if err := blogs.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Blogs.content": %w`, err)}
		}
	}
	if v, ok := bc.mutation.ID(); ok {
		if err := blogs.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Blogs.id": %w`, err)}
		}
	}
	return nil
}

func (bc *BlogsCreate) sqlSave(ctx context.Context) (*Blogs, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BlogsCreate) createSpec() (*Blogs, *sqlgraph.CreateSpec) {
	var (
		_node = &Blogs{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(blogs.Table, sqlgraph.NewFieldSpec(blogs.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bc.conflict
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(blogs.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.CreatedBy(); ok {
		_spec.SetField(blogs.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(blogs.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.UpdatedBy(); ok {
		_spec.SetField(blogs.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := bc.mutation.IsDeleted(); ok {
		_spec.SetField(blogs.FieldIsDeleted, field.TypeUint8, value)
		_node.IsDeleted = value
	}
	if value, ok := bc.mutation.DeletedAt(); ok {
		_spec.SetField(blogs.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := bc.mutation.DeletedBy(); ok {
		_spec.SetField(blogs.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := bc.mutation.AccountID(); ok {
		_spec.SetField(blogs.FieldAccountID, field.TypeInt, value)
		_node.AccountID = value
	}
	if value, ok := bc.mutation.Title(); ok {
		_spec.SetField(blogs.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := bc.mutation.Description(); ok {
		_spec.SetField(blogs.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := bc.mutation.IsHidden(); ok {
		_spec.SetField(blogs.FieldIsHidden, field.TypeInt8, value)
		_node.IsHidden = value
	}
	if value, ok := bc.mutation.Tags(); ok {
		_spec.SetField(blogs.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := bc.mutation.Cover(); ok {
		_spec.SetField(blogs.FieldCover, field.TypeString, value)
		_node.Cover = value
	}
	if value, ok := bc.mutation.Content(); ok {
		_spec.SetField(blogs.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Blogs.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlogsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bc *BlogsCreate) OnConflict(opts ...sql.ConflictOption) *BlogsUpsertOne {
	bc.conflict = opts
	return &BlogsUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Blogs.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bc *BlogsCreate) OnConflictColumns(columns ...string) *BlogsUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BlogsUpsertOne{
		create: bc,
	}
}

type (
	// BlogsUpsertOne is the builder for "upsert"-ing
	//  one Blogs node.
	BlogsUpsertOne struct {
		create *BlogsCreate
	}

	// BlogsUpsert is the "OnConflict" setter.
	BlogsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BlogsUpsert) SetUpdatedAt(v int64) *BlogsUpsert {
	u.Set(blogs.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlogsUpsert) UpdateUpdatedAt() *BlogsUpsert {
	u.SetExcluded(blogs.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *BlogsUpsert) AddUpdatedAt(v int64) *BlogsUpsert {
	u.Add(blogs.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *BlogsUpsert) SetUpdatedBy(v string) *BlogsUpsert {
	u.Set(blogs.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *BlogsUpsert) UpdateUpdatedBy() *BlogsUpsert {
	u.SetExcluded(blogs.FieldUpdatedBy)
	return u
}

// SetIsDeleted sets the "is_deleted" field.
func (u *BlogsUpsert) SetIsDeleted(v uint8) *BlogsUpsert {
	u.Set(blogs.FieldIsDeleted, v)
	return u
}

// UpdateIsDeleted sets the "is_deleted" field to the value that was provided on create.
func (u *BlogsUpsert) UpdateIsDeleted() *BlogsUpsert {
	u.SetExcluded(blogs.FieldIsDeleted)
	return u
}

// AddIsDeleted adds v to the "is_deleted" field.
func (u *BlogsUpsert) AddIsDeleted(v uint8) *BlogsUpsert {
	u.Add(blogs.FieldIsDeleted, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BlogsUpsert) SetDeletedAt(v int64) *BlogsUpsert {
	u.Set(blogs.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BlogsUpsert) UpdateDeletedAt() *BlogsUpsert {
	u.SetExcluded(blogs.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *BlogsUpsert) AddDeletedAt(v int64) *BlogsUpsert {
	u.Add(blogs.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *BlogsUpsert) SetDeletedBy(v string) *BlogsUpsert {
	u.Set(blogs.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *BlogsUpsert) UpdateDeletedBy() *BlogsUpsert {
	u.SetExcluded(blogs.FieldDeletedBy)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *BlogsUpsert) SetAccountID(v int) *BlogsUpsert {
	u.Set(blogs.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *BlogsUpsert) UpdateAccountID() *BlogsUpsert {
	u.SetExcluded(blogs.FieldAccountID)
	return u
}

// AddAccountID adds v to the "account_id" field.
func (u *BlogsUpsert) AddAccountID(v int) *BlogsUpsert {
	u.Add(blogs.FieldAccountID, v)
	return u
}

// SetTitle sets the "title" field.
func (u *BlogsUpsert) SetTitle(v string) *BlogsUpsert {
	u.Set(blogs.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlogsUpsert) UpdateTitle() *BlogsUpsert {
	u.SetExcluded(blogs.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *BlogsUpsert) SetDescription(v string) *BlogsUpsert {
	u.Set(blogs.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlogsUpsert) UpdateDescription() *BlogsUpsert {
	u.SetExcluded(blogs.FieldDescription)
	return u
}

// SetIsHidden sets the "is_hidden" field.
func (u *BlogsUpsert) SetIsHidden(v int8) *BlogsUpsert {
	u.Set(blogs.FieldIsHidden, v)
	return u
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *BlogsUpsert) UpdateIsHidden() *BlogsUpsert {
	u.SetExcluded(blogs.FieldIsHidden)
	return u
}

// AddIsHidden adds v to the "is_hidden" field.
func (u *BlogsUpsert) AddIsHidden(v int8) *BlogsUpsert {
	u.Add(blogs.FieldIsHidden, v)
	return u
}

// SetTags sets the "tags" field.
func (u *BlogsUpsert) SetTags(v []string) *BlogsUpsert {
	u.Set(blogs.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *BlogsUpsert) UpdateTags() *BlogsUpsert {
	u.SetExcluded(blogs.FieldTags)
	return u
}

// SetCover sets the "cover" field.
func (u *BlogsUpsert) SetCover(v string) *BlogsUpsert {
	u.Set(blogs.FieldCover, v)
	return u
}

// UpdateCover sets the "cover" field to the value that was provided on create.
func (u *BlogsUpsert) UpdateCover() *BlogsUpsert {
	u.SetExcluded(blogs.FieldCover)
	return u
}

// SetContent sets the "content" field.
func (u *BlogsUpsert) SetContent(v string) *BlogsUpsert {
	u.Set(blogs.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *BlogsUpsert) UpdateContent() *BlogsUpsert {
	u.SetExcluded(blogs.FieldContent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Blogs.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blogs.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlogsUpsertOne) UpdateNewValues() *BlogsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(blogs.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blogs.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(blogs.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Blogs.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlogsUpsertOne) Ignore() *BlogsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlogsUpsertOne) DoNothing() *BlogsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlogsCreate.OnConflict
// documentation for more info.
func (u *BlogsUpsertOne) Update(set func(*BlogsUpsert)) *BlogsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlogsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlogsUpsertOne) SetUpdatedAt(v int64) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *BlogsUpsertOne) AddUpdatedAt(v int64) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlogsUpsertOne) UpdateUpdatedAt() *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *BlogsUpsertOne) SetUpdatedBy(v string) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *BlogsUpsertOne) UpdateUpdatedBy() *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetIsDeleted sets the "is_deleted" field.
func (u *BlogsUpsertOne) SetIsDeleted(v uint8) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.SetIsDeleted(v)
	})
}

// AddIsDeleted adds v to the "is_deleted" field.
func (u *BlogsUpsertOne) AddIsDeleted(v uint8) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.AddIsDeleted(v)
	})
}

// UpdateIsDeleted sets the "is_deleted" field to the value that was provided on create.
func (u *BlogsUpsertOne) UpdateIsDeleted() *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateIsDeleted()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BlogsUpsertOne) SetDeletedAt(v int64) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *BlogsUpsertOne) AddDeletedAt(v int64) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BlogsUpsertOne) UpdateDeletedAt() *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *BlogsUpsertOne) SetDeletedBy(v string) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.SetDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *BlogsUpsertOne) UpdateDeletedBy() *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetAccountID sets the "account_id" field.
func (u *BlogsUpsertOne) SetAccountID(v int) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *BlogsUpsertOne) AddAccountID(v int) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *BlogsUpsertOne) UpdateAccountID() *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateAccountID()
	})
}

// SetTitle sets the "title" field.
func (u *BlogsUpsertOne) SetTitle(v string) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlogsUpsertOne) UpdateTitle() *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlogsUpsertOne) SetDescription(v string) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlogsUpsertOne) UpdateDescription() *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateDescription()
	})
}

// SetIsHidden sets the "is_hidden" field.
func (u *BlogsUpsertOne) SetIsHidden(v int8) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.SetIsHidden(v)
	})
}

// AddIsHidden adds v to the "is_hidden" field.
func (u *BlogsUpsertOne) AddIsHidden(v int8) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.AddIsHidden(v)
	})
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *BlogsUpsertOne) UpdateIsHidden() *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateIsHidden()
	})
}

// SetTags sets the "tags" field.
func (u *BlogsUpsertOne) SetTags(v []string) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *BlogsUpsertOne) UpdateTags() *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateTags()
	})
}

// SetCover sets the "cover" field.
func (u *BlogsUpsertOne) SetCover(v string) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.SetCover(v)
	})
}

// UpdateCover sets the "cover" field to the value that was provided on create.
func (u *BlogsUpsertOne) UpdateCover() *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateCover()
	})
}

// SetContent sets the "content" field.
func (u *BlogsUpsertOne) SetContent(v string) *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *BlogsUpsertOne) UpdateContent() *BlogsUpsertOne {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *BlogsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlogsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlogsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlogsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlogsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlogsCreateBulk is the builder for creating many Blogs entities in bulk.
type BlogsCreateBulk struct {
	config
	err      error
	builders []*BlogsCreate
	conflict []sql.ConflictOption
}

// Save creates the Blogs entities in the database.
func (bcb *BlogsCreateBulk) Save(ctx context.Context) ([]*Blogs, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Blogs, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BlogsCreateBulk) SaveX(ctx context.Context) []*Blogs {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BlogsCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BlogsCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Blogs.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlogsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bcb *BlogsCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlogsUpsertBulk {
	bcb.conflict = opts
	return &BlogsUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Blogs.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcb *BlogsCreateBulk) OnConflictColumns(columns ...string) *BlogsUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BlogsUpsertBulk{
		create: bcb,
	}
}

// BlogsUpsertBulk is the builder for "upsert"-ing
// a bulk of Blogs nodes.
type BlogsUpsertBulk struct {
	create *BlogsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Blogs.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blogs.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlogsUpsertBulk) UpdateNewValues() *BlogsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(blogs.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blogs.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(blogs.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Blogs.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlogsUpsertBulk) Ignore() *BlogsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlogsUpsertBulk) DoNothing() *BlogsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlogsCreateBulk.OnConflict
// documentation for more info.
func (u *BlogsUpsertBulk) Update(set func(*BlogsUpsert)) *BlogsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlogsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlogsUpsertBulk) SetUpdatedAt(v int64) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *BlogsUpsertBulk) AddUpdatedAt(v int64) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlogsUpsertBulk) UpdateUpdatedAt() *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *BlogsUpsertBulk) SetUpdatedBy(v string) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *BlogsUpsertBulk) UpdateUpdatedBy() *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetIsDeleted sets the "is_deleted" field.
func (u *BlogsUpsertBulk) SetIsDeleted(v uint8) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.SetIsDeleted(v)
	})
}

// AddIsDeleted adds v to the "is_deleted" field.
func (u *BlogsUpsertBulk) AddIsDeleted(v uint8) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.AddIsDeleted(v)
	})
}

// UpdateIsDeleted sets the "is_deleted" field to the value that was provided on create.
func (u *BlogsUpsertBulk) UpdateIsDeleted() *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateIsDeleted()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BlogsUpsertBulk) SetDeletedAt(v int64) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *BlogsUpsertBulk) AddDeletedAt(v int64) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BlogsUpsertBulk) UpdateDeletedAt() *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *BlogsUpsertBulk) SetDeletedBy(v string) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.SetDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *BlogsUpsertBulk) UpdateDeletedBy() *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetAccountID sets the "account_id" field.
func (u *BlogsUpsertBulk) SetAccountID(v int) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *BlogsUpsertBulk) AddAccountID(v int) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *BlogsUpsertBulk) UpdateAccountID() *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateAccountID()
	})
}

// SetTitle sets the "title" field.
func (u *BlogsUpsertBulk) SetTitle(v string) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlogsUpsertBulk) UpdateTitle() *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlogsUpsertBulk) SetDescription(v string) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlogsUpsertBulk) UpdateDescription() *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateDescription()
	})
}

// SetIsHidden sets the "is_hidden" field.
func (u *BlogsUpsertBulk) SetIsHidden(v int8) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.SetIsHidden(v)
	})
}

// AddIsHidden adds v to the "is_hidden" field.
func (u *BlogsUpsertBulk) AddIsHidden(v int8) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.AddIsHidden(v)
	})
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *BlogsUpsertBulk) UpdateIsHidden() *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateIsHidden()
	})
}

// SetTags sets the "tags" field.
func (u *BlogsUpsertBulk) SetTags(v []string) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *BlogsUpsertBulk) UpdateTags() *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateTags()
	})
}

// SetCover sets the "cover" field.
func (u *BlogsUpsertBulk) SetCover(v string) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.SetCover(v)
	})
}

// UpdateCover sets the "cover" field to the value that was provided on create.
func (u *BlogsUpsertBulk) UpdateCover() *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateCover()
	})
}

// SetContent sets the "content" field.
func (u *BlogsUpsertBulk) SetContent(v string) *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *BlogsUpsertBulk) UpdateContent() *BlogsUpsertBulk {
	return u.Update(func(s *BlogsUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *BlogsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlogsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlogsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlogsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
