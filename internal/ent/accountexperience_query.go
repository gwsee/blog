// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/accountexperience"
	"blog/internal/ent/predicate"
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountExperienceQuery is the builder for querying AccountExperience entities.
type AccountExperienceQuery struct {
	config
	ctx        *QueryContext
	order      []accountexperience.OrderOption
	inters     []Interceptor
	predicates []predicate.AccountExperience
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AccountExperienceQuery builder.
func (aeq *AccountExperienceQuery) Where(ps ...predicate.AccountExperience) *AccountExperienceQuery {
	aeq.predicates = append(aeq.predicates, ps...)
	return aeq
}

// Limit the number of records to be returned by this query.
func (aeq *AccountExperienceQuery) Limit(limit int) *AccountExperienceQuery {
	aeq.ctx.Limit = &limit
	return aeq
}

// Offset to start from.
func (aeq *AccountExperienceQuery) Offset(offset int) *AccountExperienceQuery {
	aeq.ctx.Offset = &offset
	return aeq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aeq *AccountExperienceQuery) Unique(unique bool) *AccountExperienceQuery {
	aeq.ctx.Unique = &unique
	return aeq
}

// Order specifies how the records should be ordered.
func (aeq *AccountExperienceQuery) Order(o ...accountexperience.OrderOption) *AccountExperienceQuery {
	aeq.order = append(aeq.order, o...)
	return aeq
}

// First returns the first AccountExperience entity from the query.
// Returns a *NotFoundError when no AccountExperience was found.
func (aeq *AccountExperienceQuery) First(ctx context.Context) (*AccountExperience, error) {
	nodes, err := aeq.Limit(1).All(setContextOp(ctx, aeq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{accountexperience.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aeq *AccountExperienceQuery) FirstX(ctx context.Context) *AccountExperience {
	node, err := aeq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AccountExperience ID from the query.
// Returns a *NotFoundError when no AccountExperience ID was found.
func (aeq *AccountExperienceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aeq.Limit(1).IDs(setContextOp(ctx, aeq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{accountexperience.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aeq *AccountExperienceQuery) FirstIDX(ctx context.Context) int {
	id, err := aeq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AccountExperience entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AccountExperience entity is found.
// Returns a *NotFoundError when no AccountExperience entities are found.
func (aeq *AccountExperienceQuery) Only(ctx context.Context) (*AccountExperience, error) {
	nodes, err := aeq.Limit(2).All(setContextOp(ctx, aeq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{accountexperience.Label}
	default:
		return nil, &NotSingularError{accountexperience.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aeq *AccountExperienceQuery) OnlyX(ctx context.Context) *AccountExperience {
	node, err := aeq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AccountExperience ID in the query.
// Returns a *NotSingularError when more than one AccountExperience ID is found.
// Returns a *NotFoundError when no entities are found.
func (aeq *AccountExperienceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aeq.Limit(2).IDs(setContextOp(ctx, aeq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{accountexperience.Label}
	default:
		err = &NotSingularError{accountexperience.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aeq *AccountExperienceQuery) OnlyIDX(ctx context.Context) int {
	id, err := aeq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AccountExperiences.
func (aeq *AccountExperienceQuery) All(ctx context.Context) ([]*AccountExperience, error) {
	ctx = setContextOp(ctx, aeq.ctx, ent.OpQueryAll)
	if err := aeq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AccountExperience, *AccountExperienceQuery]()
	return withInterceptors[[]*AccountExperience](ctx, aeq, qr, aeq.inters)
}

// AllX is like All, but panics if an error occurs.
func (aeq *AccountExperienceQuery) AllX(ctx context.Context) []*AccountExperience {
	nodes, err := aeq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AccountExperience IDs.
func (aeq *AccountExperienceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if aeq.ctx.Unique == nil && aeq.path != nil {
		aeq.Unique(true)
	}
	ctx = setContextOp(ctx, aeq.ctx, ent.OpQueryIDs)
	if err = aeq.Select(accountexperience.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aeq *AccountExperienceQuery) IDsX(ctx context.Context) []int {
	ids, err := aeq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aeq *AccountExperienceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aeq.ctx, ent.OpQueryCount)
	if err := aeq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, aeq, querierCount[*AccountExperienceQuery](), aeq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (aeq *AccountExperienceQuery) CountX(ctx context.Context) int {
	count, err := aeq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aeq *AccountExperienceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, aeq.ctx, ent.OpQueryExist)
	switch _, err := aeq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (aeq *AccountExperienceQuery) ExistX(ctx context.Context) bool {
	exist, err := aeq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AccountExperienceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aeq *AccountExperienceQuery) Clone() *AccountExperienceQuery {
	if aeq == nil {
		return nil
	}
	return &AccountExperienceQuery{
		config:     aeq.config,
		ctx:        aeq.ctx.Clone(),
		order:      append([]accountexperience.OrderOption{}, aeq.order...),
		inters:     append([]Interceptor{}, aeq.inters...),
		predicates: append([]predicate.AccountExperience{}, aeq.predicates...),
		// clone intermediate query.
		sql:  aeq.sql.Clone(),
		path: aeq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt int64 `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AccountExperience.Query().
//		GroupBy(accountexperience.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aeq *AccountExperienceQuery) GroupBy(field string, fields ...string) *AccountExperienceGroupBy {
	aeq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AccountExperienceGroupBy{build: aeq}
	grbuild.flds = &aeq.ctx.Fields
	grbuild.label = accountexperience.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt int64 `json:"created_at,omitempty"`
//	}
//
//	client.AccountExperience.Query().
//		Select(accountexperience.FieldCreatedAt).
//		Scan(ctx, &v)
func (aeq *AccountExperienceQuery) Select(fields ...string) *AccountExperienceSelect {
	aeq.ctx.Fields = append(aeq.ctx.Fields, fields...)
	sbuild := &AccountExperienceSelect{AccountExperienceQuery: aeq}
	sbuild.label = accountexperience.Label
	sbuild.flds, sbuild.scan = &aeq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AccountExperienceSelect configured with the given aggregations.
func (aeq *AccountExperienceQuery) Aggregate(fns ...AggregateFunc) *AccountExperienceSelect {
	return aeq.Select().Aggregate(fns...)
}

func (aeq *AccountExperienceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range aeq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, aeq); err != nil {
				return err
			}
		}
	}
	for _, f := range aeq.ctx.Fields {
		if !accountexperience.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aeq.path != nil {
		prev, err := aeq.path(ctx)
		if err != nil {
			return err
		}
		aeq.sql = prev
	}
	return nil
}

func (aeq *AccountExperienceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AccountExperience, error) {
	var (
		nodes = []*AccountExperience{}
		_spec = aeq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AccountExperience).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AccountExperience{config: aeq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aeq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (aeq *AccountExperienceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aeq.querySpec()
	_spec.Node.Columns = aeq.ctx.Fields
	if len(aeq.ctx.Fields) > 0 {
		_spec.Unique = aeq.ctx.Unique != nil && *aeq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, aeq.driver, _spec)
}

func (aeq *AccountExperienceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(accountexperience.Table, accountexperience.Columns, sqlgraph.NewFieldSpec(accountexperience.FieldID, field.TypeInt))
	_spec.From = aeq.sql
	if unique := aeq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if aeq.path != nil {
		_spec.Unique = true
	}
	if fields := aeq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountexperience.FieldID)
		for i := range fields {
			if fields[i] != accountexperience.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aeq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aeq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aeq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aeq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aeq *AccountExperienceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aeq.driver.Dialect())
	t1 := builder.Table(accountexperience.Table)
	columns := aeq.ctx.Fields
	if len(columns) == 0 {
		columns = accountexperience.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aeq.sql != nil {
		selector = aeq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aeq.ctx.Unique != nil && *aeq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range aeq.predicates {
		p(selector)
	}
	for _, p := range aeq.order {
		p(selector)
	}
	if offset := aeq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aeq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AccountExperienceGroupBy is the group-by builder for AccountExperience entities.
type AccountExperienceGroupBy struct {
	selector
	build *AccountExperienceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (aegb *AccountExperienceGroupBy) Aggregate(fns ...AggregateFunc) *AccountExperienceGroupBy {
	aegb.fns = append(aegb.fns, fns...)
	return aegb
}

// Scan applies the selector query and scans the result into the given value.
func (aegb *AccountExperienceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, aegb.build.ctx, ent.OpQueryGroupBy)
	if err := aegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AccountExperienceQuery, *AccountExperienceGroupBy](ctx, aegb.build, aegb, aegb.build.inters, v)
}

func (aegb *AccountExperienceGroupBy) sqlScan(ctx context.Context, root *AccountExperienceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(aegb.fns))
	for _, fn := range aegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*aegb.flds)+len(aegb.fns))
		for _, f := range *aegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*aegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AccountExperienceSelect is the builder for selecting fields of AccountExperience entities.
type AccountExperienceSelect struct {
	*AccountExperienceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (aes *AccountExperienceSelect) Aggregate(fns ...AggregateFunc) *AccountExperienceSelect {
	aes.fns = append(aes.fns, fns...)
	return aes
}

// Scan applies the selector query and scans the result into the given value.
func (aes *AccountExperienceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, aes.ctx, ent.OpQuerySelect)
	if err := aes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AccountExperienceQuery, *AccountExperienceSelect](ctx, aes.AccountExperienceQuery, aes, aes.inters, v)
}

func (aes *AccountExperienceSelect) sqlScan(ctx context.Context, root *AccountExperienceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(aes.fns))
	for _, fn := range aes.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*aes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
