// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/account"
	"blog/internal/ent/travelextends"
	"blog/internal/ent/travels"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TravelsCreate is the builder for creating a Travels entity.
type TravelsCreate struct {
	config
	mutation *TravelsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TravelsCreate) SetCreatedAt(i int64) *TravelsCreate {
	tc.mutation.SetCreatedAt(i)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TravelsCreate) SetNillableCreatedAt(i *int64) *TravelsCreate {
	if i != nil {
		tc.SetCreatedAt(*i)
	}
	return tc
}

// SetCreatedBy sets the "created_by" field.
func (tc *TravelsCreate) SetCreatedBy(i int64) *TravelsCreate {
	tc.mutation.SetCreatedBy(i)
	return tc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tc *TravelsCreate) SetNillableCreatedBy(i *int64) *TravelsCreate {
	if i != nil {
		tc.SetCreatedBy(*i)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TravelsCreate) SetUpdatedAt(i int64) *TravelsCreate {
	tc.mutation.SetUpdatedAt(i)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TravelsCreate) SetNillableUpdatedAt(i *int64) *TravelsCreate {
	if i != nil {
		tc.SetUpdatedAt(*i)
	}
	return tc
}

// SetUpdatedBy sets the "updated_by" field.
func (tc *TravelsCreate) SetUpdatedBy(i int64) *TravelsCreate {
	tc.mutation.SetUpdatedBy(i)
	return tc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tc *TravelsCreate) SetNillableUpdatedBy(i *int64) *TravelsCreate {
	if i != nil {
		tc.SetUpdatedBy(*i)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TravelsCreate) SetDeletedAt(i int64) *TravelsCreate {
	tc.mutation.SetDeletedAt(i)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TravelsCreate) SetNillableDeletedAt(i *int64) *TravelsCreate {
	if i != nil {
		tc.SetDeletedAt(*i)
	}
	return tc
}

// SetDeletedBy sets the "deleted_by" field.
func (tc *TravelsCreate) SetDeletedBy(i int64) *TravelsCreate {
	tc.mutation.SetDeletedBy(i)
	return tc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tc *TravelsCreate) SetNillableDeletedBy(i *int64) *TravelsCreate {
	if i != nil {
		tc.SetDeletedBy(*i)
	}
	return tc
}

// SetTitle sets the "title" field.
func (tc *TravelsCreate) SetTitle(s string) *TravelsCreate {
	tc.mutation.SetTitle(s)
	return tc
}

// SetDescription sets the "description" field.
func (tc *TravelsCreate) SetDescription(s string) *TravelsCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetVideo sets the "video" field.
func (tc *TravelsCreate) SetVideo(s string) *TravelsCreate {
	tc.mutation.SetVideo(s)
	return tc
}

// SetNillableVideo sets the "video" field if the given value is not nil.
func (tc *TravelsCreate) SetNillableVideo(s *string) *TravelsCreate {
	if s != nil {
		tc.SetVideo(*s)
	}
	return tc
}

// SetIsHidden sets the "is_hidden" field.
func (tc *TravelsCreate) SetIsHidden(b bool) *TravelsCreate {
	tc.mutation.SetIsHidden(b)
	return tc
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (tc *TravelsCreate) SetNillableIsHidden(b *bool) *TravelsCreate {
	if b != nil {
		tc.SetIsHidden(*b)
	}
	return tc
}

// SetAccountID sets the "account_id" field.
func (tc *TravelsCreate) SetAccountID(i int) *TravelsCreate {
	tc.mutation.SetAccountID(i)
	return tc
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (tc *TravelsCreate) SetNillableAccountID(i *int) *TravelsCreate {
	if i != nil {
		tc.SetAccountID(*i)
	}
	return tc
}

// SetPhotos sets the "photos" field.
func (tc *TravelsCreate) SetPhotos(s []string) *TravelsCreate {
	tc.mutation.SetPhotos(s)
	return tc
}

// SetBrowseNum sets the "browse_num" field.
func (tc *TravelsCreate) SetBrowseNum(i int) *TravelsCreate {
	tc.mutation.SetBrowseNum(i)
	return tc
}

// SetNillableBrowseNum sets the "browse_num" field if the given value is not nil.
func (tc *TravelsCreate) SetNillableBrowseNum(i *int) *TravelsCreate {
	if i != nil {
		tc.SetBrowseNum(*i)
	}
	return tc
}

// SetThumbNum sets the "thumb_num" field.
func (tc *TravelsCreate) SetThumbNum(i int) *TravelsCreate {
	tc.mutation.SetThumbNum(i)
	return tc
}

// SetNillableThumbNum sets the "thumb_num" field if the given value is not nil.
func (tc *TravelsCreate) SetNillableThumbNum(i *int) *TravelsCreate {
	if i != nil {
		tc.SetThumbNum(*i)
	}
	return tc
}

// SetCollectNum sets the "collect_num" field.
func (tc *TravelsCreate) SetCollectNum(i int) *TravelsCreate {
	tc.mutation.SetCollectNum(i)
	return tc
}

// SetNillableCollectNum sets the "collect_num" field if the given value is not nil.
func (tc *TravelsCreate) SetNillableCollectNum(i *int) *TravelsCreate {
	if i != nil {
		tc.SetCollectNum(*i)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TravelsCreate) SetID(i int) *TravelsCreate {
	tc.mutation.SetID(i)
	return tc
}

// AddTravelExtendIDs adds the "travel_extends" edge to the TravelExtends entity by IDs.
func (tc *TravelsCreate) AddTravelExtendIDs(ids ...int) *TravelsCreate {
	tc.mutation.AddTravelExtendIDs(ids...)
	return tc
}

// AddTravelExtends adds the "travel_extends" edges to the TravelExtends entity.
func (tc *TravelsCreate) AddTravelExtends(t ...*TravelExtends) *TravelsCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTravelExtendIDs(ids...)
}

// SetTravelAccountID sets the "travel_account" edge to the Account entity by ID.
func (tc *TravelsCreate) SetTravelAccountID(id int) *TravelsCreate {
	tc.mutation.SetTravelAccountID(id)
	return tc
}

// SetNillableTravelAccountID sets the "travel_account" edge to the Account entity by ID if the given value is not nil.
func (tc *TravelsCreate) SetNillableTravelAccountID(id *int) *TravelsCreate {
	if id != nil {
		tc = tc.SetTravelAccountID(*id)
	}
	return tc
}

// SetTravelAccount sets the "travel_account" edge to the Account entity.
func (tc *TravelsCreate) SetTravelAccount(a *Account) *TravelsCreate {
	return tc.SetTravelAccountID(a.ID)
}

// Mutation returns the TravelsMutation object of the builder.
func (tc *TravelsCreate) Mutation() *TravelsMutation {
	return tc.mutation
}

// Save creates the Travels in the database.
func (tc *TravelsCreate) Save(ctx context.Context) (*Travels, error) {
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TravelsCreate) SaveX(ctx context.Context) *Travels {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TravelsCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TravelsCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TravelsCreate) defaults() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := travels.DefaultCreatedAt
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.CreatedBy(); !ok {
		v := travels.DefaultCreatedBy
		tc.mutation.SetCreatedBy(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := travels.DefaultUpdatedAt
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedBy(); !ok {
		v := travels.DefaultUpdatedBy
		tc.mutation.SetUpdatedBy(v)
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		v := travels.DefaultDeletedAt
		tc.mutation.SetDeletedAt(v)
	}
	if _, ok := tc.mutation.DeletedBy(); !ok {
		v := travels.DefaultDeletedBy
		tc.mutation.SetDeletedBy(v)
	}
	if _, ok := tc.mutation.Video(); !ok {
		v := travels.DefaultVideo
		tc.mutation.SetVideo(v)
	}
	if _, ok := tc.mutation.IsHidden(); !ok {
		v := travels.DefaultIsHidden
		tc.mutation.SetIsHidden(v)
	}
	if _, ok := tc.mutation.BrowseNum(); !ok {
		v := travels.DefaultBrowseNum
		tc.mutation.SetBrowseNum(v)
	}
	if _, ok := tc.mutation.ThumbNum(); !ok {
		v := travels.DefaultThumbNum
		tc.mutation.SetThumbNum(v)
	}
	if _, ok := tc.mutation.CollectNum(); !ok {
		v := travels.DefaultCollectNum
		tc.mutation.SetCollectNum(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TravelsCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Travels.created_at"`)}
	}
	if _, ok := tc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Travels.created_by"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Travels.updated_at"`)}
	}
	if _, ok := tc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Travels.updated_by"`)}
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Travels.deleted_at"`)}
	}
	if _, ok := tc.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "Travels.deleted_by"`)}
	}
	if _, ok := tc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Travels.title"`)}
	}
	if v, ok := tc.mutation.Title(); ok {
		if err := travels.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Travels.title": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Travels.description"`)}
	}
	if v, ok := tc.mutation.Description(); ok {
		if err := travels.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Travels.description": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Video(); !ok {
		return &ValidationError{Name: "video", err: errors.New(`ent: missing required field "Travels.video"`)}
	}
	if _, ok := tc.mutation.IsHidden(); !ok {
		return &ValidationError{Name: "is_hidden", err: errors.New(`ent: missing required field "Travels.is_hidden"`)}
	}
	if _, ok := tc.mutation.Photos(); !ok {
		return &ValidationError{Name: "photos", err: errors.New(`ent: missing required field "Travels.photos"`)}
	}
	if _, ok := tc.mutation.BrowseNum(); !ok {
		return &ValidationError{Name: "browse_num", err: errors.New(`ent: missing required field "Travels.browse_num"`)}
	}
	if _, ok := tc.mutation.ThumbNum(); !ok {
		return &ValidationError{Name: "thumb_num", err: errors.New(`ent: missing required field "Travels.thumb_num"`)}
	}
	if _, ok := tc.mutation.CollectNum(); !ok {
		return &ValidationError{Name: "collect_num", err: errors.New(`ent: missing required field "Travels.collect_num"`)}
	}
	return nil
}

func (tc *TravelsCreate) sqlSave(ctx context.Context) (*Travels, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TravelsCreate) createSpec() (*Travels, *sqlgraph.CreateSpec) {
	var (
		_node = &Travels{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(travels.Table, sqlgraph.NewFieldSpec(travels.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(travels.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.CreatedBy(); ok {
		_spec.SetField(travels.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(travels.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.UpdatedBy(); ok {
		_spec.SetField(travels.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.SetField(travels.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.DeletedBy(); ok {
		_spec.SetField(travels.FieldDeletedBy, field.TypeInt64, value)
		_node.DeletedBy = value
	}
	if value, ok := tc.mutation.Title(); ok {
		_spec.SetField(travels.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(travels.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.Video(); ok {
		_spec.SetField(travels.FieldVideo, field.TypeString, value)
		_node.Video = value
	}
	if value, ok := tc.mutation.IsHidden(); ok {
		_spec.SetField(travels.FieldIsHidden, field.TypeBool, value)
		_node.IsHidden = value
	}
	if value, ok := tc.mutation.Photos(); ok {
		_spec.SetField(travels.FieldPhotos, field.TypeJSON, value)
		_node.Photos = value
	}
	if value, ok := tc.mutation.BrowseNum(); ok {
		_spec.SetField(travels.FieldBrowseNum, field.TypeInt, value)
		_node.BrowseNum = value
	}
	if value, ok := tc.mutation.ThumbNum(); ok {
		_spec.SetField(travels.FieldThumbNum, field.TypeInt, value)
		_node.ThumbNum = value
	}
	if value, ok := tc.mutation.CollectNum(); ok {
		_spec.SetField(travels.FieldCollectNum, field.TypeInt, value)
		_node.CollectNum = value
	}
	if nodes := tc.mutation.TravelExtendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   travels.TravelExtendsTable,
			Columns: []string{travels.TravelExtendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travelextends.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TravelAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   travels.TravelAccountTable,
			Columns: []string{travels.TravelAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Travels.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TravelsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TravelsCreate) OnConflict(opts ...sql.ConflictOption) *TravelsUpsertOne {
	tc.conflict = opts
	return &TravelsUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Travels.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TravelsCreate) OnConflictColumns(columns ...string) *TravelsUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TravelsUpsertOne{
		create: tc,
	}
}

type (
	// TravelsUpsertOne is the builder for "upsert"-ing
	//  one Travels node.
	TravelsUpsertOne struct {
		create *TravelsCreate
	}

	// TravelsUpsert is the "OnConflict" setter.
	TravelsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TravelsUpsert) SetUpdatedAt(v int64) *TravelsUpsert {
	u.Set(travels.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TravelsUpsert) UpdateUpdatedAt() *TravelsUpsert {
	u.SetExcluded(travels.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TravelsUpsert) AddUpdatedAt(v int64) *TravelsUpsert {
	u.Add(travels.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TravelsUpsert) SetUpdatedBy(v int64) *TravelsUpsert {
	u.Set(travels.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TravelsUpsert) UpdateUpdatedBy() *TravelsUpsert {
	u.SetExcluded(travels.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TravelsUpsert) AddUpdatedBy(v int64) *TravelsUpsert {
	u.Add(travels.FieldUpdatedBy, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TravelsUpsert) SetDeletedAt(v int64) *TravelsUpsert {
	u.Set(travels.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TravelsUpsert) UpdateDeletedAt() *TravelsUpsert {
	u.SetExcluded(travels.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TravelsUpsert) AddDeletedAt(v int64) *TravelsUpsert {
	u.Add(travels.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *TravelsUpsert) SetDeletedBy(v int64) *TravelsUpsert {
	u.Set(travels.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *TravelsUpsert) UpdateDeletedBy() *TravelsUpsert {
	u.SetExcluded(travels.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *TravelsUpsert) AddDeletedBy(v int64) *TravelsUpsert {
	u.Add(travels.FieldDeletedBy, v)
	return u
}

// SetTitle sets the "title" field.
func (u *TravelsUpsert) SetTitle(v string) *TravelsUpsert {
	u.Set(travels.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TravelsUpsert) UpdateTitle() *TravelsUpsert {
	u.SetExcluded(travels.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *TravelsUpsert) SetDescription(v string) *TravelsUpsert {
	u.Set(travels.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TravelsUpsert) UpdateDescription() *TravelsUpsert {
	u.SetExcluded(travels.FieldDescription)
	return u
}

// SetVideo sets the "video" field.
func (u *TravelsUpsert) SetVideo(v string) *TravelsUpsert {
	u.Set(travels.FieldVideo, v)
	return u
}

// UpdateVideo sets the "video" field to the value that was provided on create.
func (u *TravelsUpsert) UpdateVideo() *TravelsUpsert {
	u.SetExcluded(travels.FieldVideo)
	return u
}

// SetIsHidden sets the "is_hidden" field.
func (u *TravelsUpsert) SetIsHidden(v bool) *TravelsUpsert {
	u.Set(travels.FieldIsHidden, v)
	return u
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *TravelsUpsert) UpdateIsHidden() *TravelsUpsert {
	u.SetExcluded(travels.FieldIsHidden)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *TravelsUpsert) SetAccountID(v int) *TravelsUpsert {
	u.Set(travels.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *TravelsUpsert) UpdateAccountID() *TravelsUpsert {
	u.SetExcluded(travels.FieldAccountID)
	return u
}

// ClearAccountID clears the value of the "account_id" field.
func (u *TravelsUpsert) ClearAccountID() *TravelsUpsert {
	u.SetNull(travels.FieldAccountID)
	return u
}

// SetPhotos sets the "photos" field.
func (u *TravelsUpsert) SetPhotos(v []string) *TravelsUpsert {
	u.Set(travels.FieldPhotos, v)
	return u
}

// UpdatePhotos sets the "photos" field to the value that was provided on create.
func (u *TravelsUpsert) UpdatePhotos() *TravelsUpsert {
	u.SetExcluded(travels.FieldPhotos)
	return u
}

// SetBrowseNum sets the "browse_num" field.
func (u *TravelsUpsert) SetBrowseNum(v int) *TravelsUpsert {
	u.Set(travels.FieldBrowseNum, v)
	return u
}

// UpdateBrowseNum sets the "browse_num" field to the value that was provided on create.
func (u *TravelsUpsert) UpdateBrowseNum() *TravelsUpsert {
	u.SetExcluded(travels.FieldBrowseNum)
	return u
}

// AddBrowseNum adds v to the "browse_num" field.
func (u *TravelsUpsert) AddBrowseNum(v int) *TravelsUpsert {
	u.Add(travels.FieldBrowseNum, v)
	return u
}

// SetThumbNum sets the "thumb_num" field.
func (u *TravelsUpsert) SetThumbNum(v int) *TravelsUpsert {
	u.Set(travels.FieldThumbNum, v)
	return u
}

// UpdateThumbNum sets the "thumb_num" field to the value that was provided on create.
func (u *TravelsUpsert) UpdateThumbNum() *TravelsUpsert {
	u.SetExcluded(travels.FieldThumbNum)
	return u
}

// AddThumbNum adds v to the "thumb_num" field.
func (u *TravelsUpsert) AddThumbNum(v int) *TravelsUpsert {
	u.Add(travels.FieldThumbNum, v)
	return u
}

// SetCollectNum sets the "collect_num" field.
func (u *TravelsUpsert) SetCollectNum(v int) *TravelsUpsert {
	u.Set(travels.FieldCollectNum, v)
	return u
}

// UpdateCollectNum sets the "collect_num" field to the value that was provided on create.
func (u *TravelsUpsert) UpdateCollectNum() *TravelsUpsert {
	u.SetExcluded(travels.FieldCollectNum)
	return u
}

// AddCollectNum adds v to the "collect_num" field.
func (u *TravelsUpsert) AddCollectNum(v int) *TravelsUpsert {
	u.Add(travels.FieldCollectNum, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Travels.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(travels.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TravelsUpsertOne) UpdateNewValues() *TravelsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(travels.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(travels.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(travels.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Travels.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TravelsUpsertOne) Ignore() *TravelsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TravelsUpsertOne) DoNothing() *TravelsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TravelsCreate.OnConflict
// documentation for more info.
func (u *TravelsUpsertOne) Update(set func(*TravelsUpsert)) *TravelsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TravelsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TravelsUpsertOne) SetUpdatedAt(v int64) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TravelsUpsertOne) AddUpdatedAt(v int64) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TravelsUpsertOne) UpdateUpdatedAt() *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TravelsUpsertOne) SetUpdatedBy(v int64) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TravelsUpsertOne) AddUpdatedBy(v int64) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TravelsUpsertOne) UpdateUpdatedBy() *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TravelsUpsertOne) SetDeletedAt(v int64) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TravelsUpsertOne) AddDeletedAt(v int64) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TravelsUpsertOne) UpdateDeletedAt() *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *TravelsUpsertOne) SetDeletedBy(v int64) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *TravelsUpsertOne) AddDeletedBy(v int64) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *TravelsUpsertOne) UpdateDeletedBy() *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetTitle sets the "title" field.
func (u *TravelsUpsertOne) SetTitle(v string) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TravelsUpsertOne) UpdateTitle() *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *TravelsUpsertOne) SetDescription(v string) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TravelsUpsertOne) UpdateDescription() *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateDescription()
	})
}

// SetVideo sets the "video" field.
func (u *TravelsUpsertOne) SetVideo(v string) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.SetVideo(v)
	})
}

// UpdateVideo sets the "video" field to the value that was provided on create.
func (u *TravelsUpsertOne) UpdateVideo() *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateVideo()
	})
}

// SetIsHidden sets the "is_hidden" field.
func (u *TravelsUpsertOne) SetIsHidden(v bool) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.SetIsHidden(v)
	})
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *TravelsUpsertOne) UpdateIsHidden() *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateIsHidden()
	})
}

// SetAccountID sets the "account_id" field.
func (u *TravelsUpsertOne) SetAccountID(v int) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *TravelsUpsertOne) UpdateAccountID() *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *TravelsUpsertOne) ClearAccountID() *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.ClearAccountID()
	})
}

// SetPhotos sets the "photos" field.
func (u *TravelsUpsertOne) SetPhotos(v []string) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.SetPhotos(v)
	})
}

// UpdatePhotos sets the "photos" field to the value that was provided on create.
func (u *TravelsUpsertOne) UpdatePhotos() *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdatePhotos()
	})
}

// SetBrowseNum sets the "browse_num" field.
func (u *TravelsUpsertOne) SetBrowseNum(v int) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.SetBrowseNum(v)
	})
}

// AddBrowseNum adds v to the "browse_num" field.
func (u *TravelsUpsertOne) AddBrowseNum(v int) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.AddBrowseNum(v)
	})
}

// UpdateBrowseNum sets the "browse_num" field to the value that was provided on create.
func (u *TravelsUpsertOne) UpdateBrowseNum() *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateBrowseNum()
	})
}

// SetThumbNum sets the "thumb_num" field.
func (u *TravelsUpsertOne) SetThumbNum(v int) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.SetThumbNum(v)
	})
}

// AddThumbNum adds v to the "thumb_num" field.
func (u *TravelsUpsertOne) AddThumbNum(v int) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.AddThumbNum(v)
	})
}

// UpdateThumbNum sets the "thumb_num" field to the value that was provided on create.
func (u *TravelsUpsertOne) UpdateThumbNum() *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateThumbNum()
	})
}

// SetCollectNum sets the "collect_num" field.
func (u *TravelsUpsertOne) SetCollectNum(v int) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.SetCollectNum(v)
	})
}

// AddCollectNum adds v to the "collect_num" field.
func (u *TravelsUpsertOne) AddCollectNum(v int) *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.AddCollectNum(v)
	})
}

// UpdateCollectNum sets the "collect_num" field to the value that was provided on create.
func (u *TravelsUpsertOne) UpdateCollectNum() *TravelsUpsertOne {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateCollectNum()
	})
}

// Exec executes the query.
func (u *TravelsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TravelsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TravelsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TravelsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TravelsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TravelsCreateBulk is the builder for creating many Travels entities in bulk.
type TravelsCreateBulk struct {
	config
	err      error
	builders []*TravelsCreate
	conflict []sql.ConflictOption
}

// Save creates the Travels entities in the database.
func (tcb *TravelsCreateBulk) Save(ctx context.Context) ([]*Travels, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Travels, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TravelsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TravelsCreateBulk) SaveX(ctx context.Context) []*Travels {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TravelsCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TravelsCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Travels.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TravelsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TravelsCreateBulk) OnConflict(opts ...sql.ConflictOption) *TravelsUpsertBulk {
	tcb.conflict = opts
	return &TravelsUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Travels.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TravelsCreateBulk) OnConflictColumns(columns ...string) *TravelsUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TravelsUpsertBulk{
		create: tcb,
	}
}

// TravelsUpsertBulk is the builder for "upsert"-ing
// a bulk of Travels nodes.
type TravelsUpsertBulk struct {
	create *TravelsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Travels.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(travels.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TravelsUpsertBulk) UpdateNewValues() *TravelsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(travels.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(travels.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(travels.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Travels.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TravelsUpsertBulk) Ignore() *TravelsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TravelsUpsertBulk) DoNothing() *TravelsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TravelsCreateBulk.OnConflict
// documentation for more info.
func (u *TravelsUpsertBulk) Update(set func(*TravelsUpsert)) *TravelsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TravelsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TravelsUpsertBulk) SetUpdatedAt(v int64) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TravelsUpsertBulk) AddUpdatedAt(v int64) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TravelsUpsertBulk) UpdateUpdatedAt() *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TravelsUpsertBulk) SetUpdatedBy(v int64) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TravelsUpsertBulk) AddUpdatedBy(v int64) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TravelsUpsertBulk) UpdateUpdatedBy() *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TravelsUpsertBulk) SetDeletedAt(v int64) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TravelsUpsertBulk) AddDeletedAt(v int64) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TravelsUpsertBulk) UpdateDeletedAt() *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *TravelsUpsertBulk) SetDeletedBy(v int64) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *TravelsUpsertBulk) AddDeletedBy(v int64) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *TravelsUpsertBulk) UpdateDeletedBy() *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetTitle sets the "title" field.
func (u *TravelsUpsertBulk) SetTitle(v string) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TravelsUpsertBulk) UpdateTitle() *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *TravelsUpsertBulk) SetDescription(v string) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TravelsUpsertBulk) UpdateDescription() *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateDescription()
	})
}

// SetVideo sets the "video" field.
func (u *TravelsUpsertBulk) SetVideo(v string) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.SetVideo(v)
	})
}

// UpdateVideo sets the "video" field to the value that was provided on create.
func (u *TravelsUpsertBulk) UpdateVideo() *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateVideo()
	})
}

// SetIsHidden sets the "is_hidden" field.
func (u *TravelsUpsertBulk) SetIsHidden(v bool) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.SetIsHidden(v)
	})
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *TravelsUpsertBulk) UpdateIsHidden() *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateIsHidden()
	})
}

// SetAccountID sets the "account_id" field.
func (u *TravelsUpsertBulk) SetAccountID(v int) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *TravelsUpsertBulk) UpdateAccountID() *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *TravelsUpsertBulk) ClearAccountID() *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.ClearAccountID()
	})
}

// SetPhotos sets the "photos" field.
func (u *TravelsUpsertBulk) SetPhotos(v []string) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.SetPhotos(v)
	})
}

// UpdatePhotos sets the "photos" field to the value that was provided on create.
func (u *TravelsUpsertBulk) UpdatePhotos() *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdatePhotos()
	})
}

// SetBrowseNum sets the "browse_num" field.
func (u *TravelsUpsertBulk) SetBrowseNum(v int) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.SetBrowseNum(v)
	})
}

// AddBrowseNum adds v to the "browse_num" field.
func (u *TravelsUpsertBulk) AddBrowseNum(v int) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.AddBrowseNum(v)
	})
}

// UpdateBrowseNum sets the "browse_num" field to the value that was provided on create.
func (u *TravelsUpsertBulk) UpdateBrowseNum() *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateBrowseNum()
	})
}

// SetThumbNum sets the "thumb_num" field.
func (u *TravelsUpsertBulk) SetThumbNum(v int) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.SetThumbNum(v)
	})
}

// AddThumbNum adds v to the "thumb_num" field.
func (u *TravelsUpsertBulk) AddThumbNum(v int) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.AddThumbNum(v)
	})
}

// UpdateThumbNum sets the "thumb_num" field to the value that was provided on create.
func (u *TravelsUpsertBulk) UpdateThumbNum() *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateThumbNum()
	})
}

// SetCollectNum sets the "collect_num" field.
func (u *TravelsUpsertBulk) SetCollectNum(v int) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.SetCollectNum(v)
	})
}

// AddCollectNum adds v to the "collect_num" field.
func (u *TravelsUpsertBulk) AddCollectNum(v int) *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.AddCollectNum(v)
	})
}

// UpdateCollectNum sets the "collect_num" field to the value that was provided on create.
func (u *TravelsUpsertBulk) UpdateCollectNum() *TravelsUpsertBulk {
	return u.Update(func(s *TravelsUpsert) {
		s.UpdateCollectNum()
	})
}

// Exec executes the query.
func (u *TravelsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TravelsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TravelsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TravelsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
