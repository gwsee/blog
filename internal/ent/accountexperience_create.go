// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/accountexperience"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountExperienceCreate is the builder for creating a AccountExperience entity.
type AccountExperienceCreate struct {
	config
	mutation *AccountExperienceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (aec *AccountExperienceCreate) SetCreatedAt(i int64) *AccountExperienceCreate {
	aec.mutation.SetCreatedAt(i)
	return aec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aec *AccountExperienceCreate) SetNillableCreatedAt(i *int64) *AccountExperienceCreate {
	if i != nil {
		aec.SetCreatedAt(*i)
	}
	return aec
}

// SetCreatedBy sets the "created_by" field.
func (aec *AccountExperienceCreate) SetCreatedBy(i int64) *AccountExperienceCreate {
	aec.mutation.SetCreatedBy(i)
	return aec
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (aec *AccountExperienceCreate) SetNillableCreatedBy(i *int64) *AccountExperienceCreate {
	if i != nil {
		aec.SetCreatedBy(*i)
	}
	return aec
}

// SetUpdatedAt sets the "updated_at" field.
func (aec *AccountExperienceCreate) SetUpdatedAt(i int64) *AccountExperienceCreate {
	aec.mutation.SetUpdatedAt(i)
	return aec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aec *AccountExperienceCreate) SetNillableUpdatedAt(i *int64) *AccountExperienceCreate {
	if i != nil {
		aec.SetUpdatedAt(*i)
	}
	return aec
}

// SetUpdatedBy sets the "updated_by" field.
func (aec *AccountExperienceCreate) SetUpdatedBy(i int64) *AccountExperienceCreate {
	aec.mutation.SetUpdatedBy(i)
	return aec
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aec *AccountExperienceCreate) SetNillableUpdatedBy(i *int64) *AccountExperienceCreate {
	if i != nil {
		aec.SetUpdatedBy(*i)
	}
	return aec
}

// SetDeletedAt sets the "deleted_at" field.
func (aec *AccountExperienceCreate) SetDeletedAt(i int64) *AccountExperienceCreate {
	aec.mutation.SetDeletedAt(i)
	return aec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aec *AccountExperienceCreate) SetNillableDeletedAt(i *int64) *AccountExperienceCreate {
	if i != nil {
		aec.SetDeletedAt(*i)
	}
	return aec
}

// SetDeletedBy sets the "deleted_by" field.
func (aec *AccountExperienceCreate) SetDeletedBy(i int64) *AccountExperienceCreate {
	aec.mutation.SetDeletedBy(i)
	return aec
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (aec *AccountExperienceCreate) SetNillableDeletedBy(i *int64) *AccountExperienceCreate {
	if i != nil {
		aec.SetDeletedBy(*i)
	}
	return aec
}

// SetUserID sets the "user_id" field.
func (aec *AccountExperienceCreate) SetUserID(i int) *AccountExperienceCreate {
	aec.mutation.SetUserID(i)
	return aec
}

// SetCompany sets the "company" field.
func (aec *AccountExperienceCreate) SetCompany(s string) *AccountExperienceCreate {
	aec.mutation.SetCompany(s)
	return aec
}

// SetRole sets the "role" field.
func (aec *AccountExperienceCreate) SetRole(s string) *AccountExperienceCreate {
	aec.mutation.SetRole(s)
	return aec
}

// SetLocation sets the "location" field.
func (aec *AccountExperienceCreate) SetLocation(s string) *AccountExperienceCreate {
	aec.mutation.SetLocation(s)
	return aec
}

// SetStart sets the "start" field.
func (aec *AccountExperienceCreate) SetStart(i int64) *AccountExperienceCreate {
	aec.mutation.SetStart(i)
	return aec
}

// SetEnd sets the "end" field.
func (aec *AccountExperienceCreate) SetEnd(i int64) *AccountExperienceCreate {
	aec.mutation.SetEnd(i)
	return aec
}

// SetDescription sets the "description" field.
func (aec *AccountExperienceCreate) SetDescription(s string) *AccountExperienceCreate {
	aec.mutation.SetDescription(s)
	return aec
}

// SetResponsibilities sets the "responsibilities" field.
func (aec *AccountExperienceCreate) SetResponsibilities(s string) *AccountExperienceCreate {
	aec.mutation.SetResponsibilities(s)
	return aec
}

// SetAchievements sets the "achievements" field.
func (aec *AccountExperienceCreate) SetAchievements(s string) *AccountExperienceCreate {
	aec.mutation.SetAchievements(s)
	return aec
}

// SetSkills sets the "skills" field.
func (aec *AccountExperienceCreate) SetSkills(s []string) *AccountExperienceCreate {
	aec.mutation.SetSkills(s)
	return aec
}

// SetID sets the "id" field.
func (aec *AccountExperienceCreate) SetID(i int) *AccountExperienceCreate {
	aec.mutation.SetID(i)
	return aec
}

// Mutation returns the AccountExperienceMutation object of the builder.
func (aec *AccountExperienceCreate) Mutation() *AccountExperienceMutation {
	return aec.mutation
}

// Save creates the AccountExperience in the database.
func (aec *AccountExperienceCreate) Save(ctx context.Context) (*AccountExperience, error) {
	if err := aec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, aec.sqlSave, aec.mutation, aec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aec *AccountExperienceCreate) SaveX(ctx context.Context) *AccountExperience {
	v, err := aec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aec *AccountExperienceCreate) Exec(ctx context.Context) error {
	_, err := aec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aec *AccountExperienceCreate) ExecX(ctx context.Context) {
	if err := aec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aec *AccountExperienceCreate) defaults() error {
	if _, ok := aec.mutation.CreatedAt(); !ok {
		v := accountexperience.DefaultCreatedAt
		aec.mutation.SetCreatedAt(v)
	}
	if _, ok := aec.mutation.CreatedBy(); !ok {
		v := accountexperience.DefaultCreatedBy
		aec.mutation.SetCreatedBy(v)
	}
	if _, ok := aec.mutation.UpdatedAt(); !ok {
		v := accountexperience.DefaultUpdatedAt
		aec.mutation.SetUpdatedAt(v)
	}
	if _, ok := aec.mutation.UpdatedBy(); !ok {
		v := accountexperience.DefaultUpdatedBy
		aec.mutation.SetUpdatedBy(v)
	}
	if _, ok := aec.mutation.DeletedAt(); !ok {
		v := accountexperience.DefaultDeletedAt
		aec.mutation.SetDeletedAt(v)
	}
	if _, ok := aec.mutation.DeletedBy(); !ok {
		v := accountexperience.DefaultDeletedBy
		aec.mutation.SetDeletedBy(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (aec *AccountExperienceCreate) check() error {
	if _, ok := aec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AccountExperience.created_at"`)}
	}
	if _, ok := aec.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "AccountExperience.created_by"`)}
	}
	if _, ok := aec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AccountExperience.updated_at"`)}
	}
	if _, ok := aec.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "AccountExperience.updated_by"`)}
	}
	if _, ok := aec.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "AccountExperience.deleted_at"`)}
	}
	if _, ok := aec.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "AccountExperience.deleted_by"`)}
	}
	if _, ok := aec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AccountExperience.user_id"`)}
	}
	if _, ok := aec.mutation.Company(); !ok {
		return &ValidationError{Name: "company", err: errors.New(`ent: missing required field "AccountExperience.company"`)}
	}
	if _, ok := aec.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "AccountExperience.role"`)}
	}
	if _, ok := aec.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "AccountExperience.location"`)}
	}
	if _, ok := aec.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "AccountExperience.start"`)}
	}
	if _, ok := aec.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "AccountExperience.end"`)}
	}
	if _, ok := aec.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "AccountExperience.description"`)}
	}
	if _, ok := aec.mutation.Responsibilities(); !ok {
		return &ValidationError{Name: "responsibilities", err: errors.New(`ent: missing required field "AccountExperience.responsibilities"`)}
	}
	if _, ok := aec.mutation.Achievements(); !ok {
		return &ValidationError{Name: "achievements", err: errors.New(`ent: missing required field "AccountExperience.achievements"`)}
	}
	if _, ok := aec.mutation.Skills(); !ok {
		return &ValidationError{Name: "skills", err: errors.New(`ent: missing required field "AccountExperience.skills"`)}
	}
	if v, ok := aec.mutation.ID(); ok {
		if err := accountexperience.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "AccountExperience.id": %w`, err)}
		}
	}
	return nil
}

func (aec *AccountExperienceCreate) sqlSave(ctx context.Context) (*AccountExperience, error) {
	if err := aec.check(); err != nil {
		return nil, err
	}
	_node, _spec := aec.createSpec()
	if err := sqlgraph.CreateNode(ctx, aec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	aec.mutation.id = &_node.ID
	aec.mutation.done = true
	return _node, nil
}

func (aec *AccountExperienceCreate) createSpec() (*AccountExperience, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountExperience{config: aec.config}
		_spec = sqlgraph.NewCreateSpec(accountexperience.Table, sqlgraph.NewFieldSpec(accountexperience.FieldID, field.TypeInt))
	)
	_spec.OnConflict = aec.conflict
	if id, ok := aec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aec.mutation.CreatedAt(); ok {
		_spec.SetField(accountexperience.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := aec.mutation.CreatedBy(); ok {
		_spec.SetField(accountexperience.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := aec.mutation.UpdatedAt(); ok {
		_spec.SetField(accountexperience.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := aec.mutation.UpdatedBy(); ok {
		_spec.SetField(accountexperience.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := aec.mutation.DeletedAt(); ok {
		_spec.SetField(accountexperience.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := aec.mutation.DeletedBy(); ok {
		_spec.SetField(accountexperience.FieldDeletedBy, field.TypeInt64, value)
		_node.DeletedBy = value
	}
	if value, ok := aec.mutation.UserID(); ok {
		_spec.SetField(accountexperience.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := aec.mutation.Company(); ok {
		_spec.SetField(accountexperience.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := aec.mutation.Role(); ok {
		_spec.SetField(accountexperience.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	if value, ok := aec.mutation.Location(); ok {
		_spec.SetField(accountexperience.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := aec.mutation.Start(); ok {
		_spec.SetField(accountexperience.FieldStart, field.TypeInt64, value)
		_node.Start = value
	}
	if value, ok := aec.mutation.End(); ok {
		_spec.SetField(accountexperience.FieldEnd, field.TypeInt64, value)
		_node.End = value
	}
	if value, ok := aec.mutation.Description(); ok {
		_spec.SetField(accountexperience.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := aec.mutation.Responsibilities(); ok {
		_spec.SetField(accountexperience.FieldResponsibilities, field.TypeString, value)
		_node.Responsibilities = value
	}
	if value, ok := aec.mutation.Achievements(); ok {
		_spec.SetField(accountexperience.FieldAchievements, field.TypeString, value)
		_node.Achievements = value
	}
	if value, ok := aec.mutation.Skills(); ok {
		_spec.SetField(accountexperience.FieldSkills, field.TypeJSON, value)
		_node.Skills = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccountExperience.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountExperienceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aec *AccountExperienceCreate) OnConflict(opts ...sql.ConflictOption) *AccountExperienceUpsertOne {
	aec.conflict = opts
	return &AccountExperienceUpsertOne{
		create: aec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccountExperience.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aec *AccountExperienceCreate) OnConflictColumns(columns ...string) *AccountExperienceUpsertOne {
	aec.conflict = append(aec.conflict, sql.ConflictColumns(columns...))
	return &AccountExperienceUpsertOne{
		create: aec,
	}
}

type (
	// AccountExperienceUpsertOne is the builder for "upsert"-ing
	//  one AccountExperience node.
	AccountExperienceUpsertOne struct {
		create *AccountExperienceCreate
	}

	// AccountExperienceUpsert is the "OnConflict" setter.
	AccountExperienceUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AccountExperienceUpsert) SetUpdatedAt(v int64) *AccountExperienceUpsert {
	u.Set(accountexperience.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AccountExperienceUpsert) UpdateUpdatedAt() *AccountExperienceUpsert {
	u.SetExcluded(accountexperience.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AccountExperienceUpsert) AddUpdatedAt(v int64) *AccountExperienceUpsert {
	u.Add(accountexperience.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *AccountExperienceUpsert) SetUpdatedBy(v int64) *AccountExperienceUpsert {
	u.Set(accountexperience.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *AccountExperienceUpsert) UpdateUpdatedBy() *AccountExperienceUpsert {
	u.SetExcluded(accountexperience.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *AccountExperienceUpsert) AddUpdatedBy(v int64) *AccountExperienceUpsert {
	u.Add(accountexperience.FieldUpdatedBy, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AccountExperienceUpsert) SetDeletedAt(v int64) *AccountExperienceUpsert {
	u.Set(accountexperience.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AccountExperienceUpsert) UpdateDeletedAt() *AccountExperienceUpsert {
	u.SetExcluded(accountexperience.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AccountExperienceUpsert) AddDeletedAt(v int64) *AccountExperienceUpsert {
	u.Add(accountexperience.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *AccountExperienceUpsert) SetDeletedBy(v int64) *AccountExperienceUpsert {
	u.Set(accountexperience.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *AccountExperienceUpsert) UpdateDeletedBy() *AccountExperienceUpsert {
	u.SetExcluded(accountexperience.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *AccountExperienceUpsert) AddDeletedBy(v int64) *AccountExperienceUpsert {
	u.Add(accountexperience.FieldDeletedBy, v)
	return u
}

// SetUserID sets the "user_id" field.
func (u *AccountExperienceUpsert) SetUserID(v int) *AccountExperienceUpsert {
	u.Set(accountexperience.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AccountExperienceUpsert) UpdateUserID() *AccountExperienceUpsert {
	u.SetExcluded(accountexperience.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *AccountExperienceUpsert) AddUserID(v int) *AccountExperienceUpsert {
	u.Add(accountexperience.FieldUserID, v)
	return u
}

// SetCompany sets the "company" field.
func (u *AccountExperienceUpsert) SetCompany(v string) *AccountExperienceUpsert {
	u.Set(accountexperience.FieldCompany, v)
	return u
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *AccountExperienceUpsert) UpdateCompany() *AccountExperienceUpsert {
	u.SetExcluded(accountexperience.FieldCompany)
	return u
}

// SetRole sets the "role" field.
func (u *AccountExperienceUpsert) SetRole(v string) *AccountExperienceUpsert {
	u.Set(accountexperience.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *AccountExperienceUpsert) UpdateRole() *AccountExperienceUpsert {
	u.SetExcluded(accountexperience.FieldRole)
	return u
}

// SetLocation sets the "location" field.
func (u *AccountExperienceUpsert) SetLocation(v string) *AccountExperienceUpsert {
	u.Set(accountexperience.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *AccountExperienceUpsert) UpdateLocation() *AccountExperienceUpsert {
	u.SetExcluded(accountexperience.FieldLocation)
	return u
}

// SetStart sets the "start" field.
func (u *AccountExperienceUpsert) SetStart(v int64) *AccountExperienceUpsert {
	u.Set(accountexperience.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *AccountExperienceUpsert) UpdateStart() *AccountExperienceUpsert {
	u.SetExcluded(accountexperience.FieldStart)
	return u
}

// AddStart adds v to the "start" field.
func (u *AccountExperienceUpsert) AddStart(v int64) *AccountExperienceUpsert {
	u.Add(accountexperience.FieldStart, v)
	return u
}

// SetEnd sets the "end" field.
func (u *AccountExperienceUpsert) SetEnd(v int64) *AccountExperienceUpsert {
	u.Set(accountexperience.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *AccountExperienceUpsert) UpdateEnd() *AccountExperienceUpsert {
	u.SetExcluded(accountexperience.FieldEnd)
	return u
}

// AddEnd adds v to the "end" field.
func (u *AccountExperienceUpsert) AddEnd(v int64) *AccountExperienceUpsert {
	u.Add(accountexperience.FieldEnd, v)
	return u
}

// SetDescription sets the "description" field.
func (u *AccountExperienceUpsert) SetDescription(v string) *AccountExperienceUpsert {
	u.Set(accountexperience.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AccountExperienceUpsert) UpdateDescription() *AccountExperienceUpsert {
	u.SetExcluded(accountexperience.FieldDescription)
	return u
}

// SetResponsibilities sets the "responsibilities" field.
func (u *AccountExperienceUpsert) SetResponsibilities(v string) *AccountExperienceUpsert {
	u.Set(accountexperience.FieldResponsibilities, v)
	return u
}

// UpdateResponsibilities sets the "responsibilities" field to the value that was provided on create.
func (u *AccountExperienceUpsert) UpdateResponsibilities() *AccountExperienceUpsert {
	u.SetExcluded(accountexperience.FieldResponsibilities)
	return u
}

// SetAchievements sets the "achievements" field.
func (u *AccountExperienceUpsert) SetAchievements(v string) *AccountExperienceUpsert {
	u.Set(accountexperience.FieldAchievements, v)
	return u
}

// UpdateAchievements sets the "achievements" field to the value that was provided on create.
func (u *AccountExperienceUpsert) UpdateAchievements() *AccountExperienceUpsert {
	u.SetExcluded(accountexperience.FieldAchievements)
	return u
}

// SetSkills sets the "skills" field.
func (u *AccountExperienceUpsert) SetSkills(v []string) *AccountExperienceUpsert {
	u.Set(accountexperience.FieldSkills, v)
	return u
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *AccountExperienceUpsert) UpdateSkills() *AccountExperienceUpsert {
	u.SetExcluded(accountexperience.FieldSkills)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AccountExperience.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(accountexperience.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AccountExperienceUpsertOne) UpdateNewValues() *AccountExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(accountexperience.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(accountexperience.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(accountexperience.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AccountExperience.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AccountExperienceUpsertOne) Ignore() *AccountExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountExperienceUpsertOne) DoNothing() *AccountExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountExperienceCreate.OnConflict
// documentation for more info.
func (u *AccountExperienceUpsertOne) Update(set func(*AccountExperienceUpsert)) *AccountExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountExperienceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AccountExperienceUpsertOne) SetUpdatedAt(v int64) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AccountExperienceUpsertOne) AddUpdatedAt(v int64) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AccountExperienceUpsertOne) UpdateUpdatedAt() *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *AccountExperienceUpsertOne) SetUpdatedBy(v int64) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *AccountExperienceUpsertOne) AddUpdatedBy(v int64) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *AccountExperienceUpsertOne) UpdateUpdatedBy() *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AccountExperienceUpsertOne) SetDeletedAt(v int64) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AccountExperienceUpsertOne) AddDeletedAt(v int64) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AccountExperienceUpsertOne) UpdateDeletedAt() *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *AccountExperienceUpsertOne) SetDeletedBy(v int64) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *AccountExperienceUpsertOne) AddDeletedBy(v int64) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *AccountExperienceUpsertOne) UpdateDeletedBy() *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetUserID sets the "user_id" field.
func (u *AccountExperienceUpsertOne) SetUserID(v int) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *AccountExperienceUpsertOne) AddUserID(v int) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AccountExperienceUpsertOne) UpdateUserID() *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateUserID()
	})
}

// SetCompany sets the "company" field.
func (u *AccountExperienceUpsertOne) SetCompany(v string) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *AccountExperienceUpsertOne) UpdateCompany() *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateCompany()
	})
}

// SetRole sets the "role" field.
func (u *AccountExperienceUpsertOne) SetRole(v string) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *AccountExperienceUpsertOne) UpdateRole() *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateRole()
	})
}

// SetLocation sets the "location" field.
func (u *AccountExperienceUpsertOne) SetLocation(v string) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *AccountExperienceUpsertOne) UpdateLocation() *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateLocation()
	})
}

// SetStart sets the "start" field.
func (u *AccountExperienceUpsertOne) SetStart(v int64) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *AccountExperienceUpsertOne) AddStart(v int64) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *AccountExperienceUpsertOne) UpdateStart() *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *AccountExperienceUpsertOne) SetEnd(v int64) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *AccountExperienceUpsertOne) AddEnd(v int64) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *AccountExperienceUpsertOne) UpdateEnd() *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateEnd()
	})
}

// SetDescription sets the "description" field.
func (u *AccountExperienceUpsertOne) SetDescription(v string) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AccountExperienceUpsertOne) UpdateDescription() *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateDescription()
	})
}

// SetResponsibilities sets the "responsibilities" field.
func (u *AccountExperienceUpsertOne) SetResponsibilities(v string) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetResponsibilities(v)
	})
}

// UpdateResponsibilities sets the "responsibilities" field to the value that was provided on create.
func (u *AccountExperienceUpsertOne) UpdateResponsibilities() *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateResponsibilities()
	})
}

// SetAchievements sets the "achievements" field.
func (u *AccountExperienceUpsertOne) SetAchievements(v string) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetAchievements(v)
	})
}

// UpdateAchievements sets the "achievements" field to the value that was provided on create.
func (u *AccountExperienceUpsertOne) UpdateAchievements() *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateAchievements()
	})
}

// SetSkills sets the "skills" field.
func (u *AccountExperienceUpsertOne) SetSkills(v []string) *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetSkills(v)
	})
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *AccountExperienceUpsertOne) UpdateSkills() *AccountExperienceUpsertOne {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateSkills()
	})
}

// Exec executes the query.
func (u *AccountExperienceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountExperienceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountExperienceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AccountExperienceUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AccountExperienceUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AccountExperienceCreateBulk is the builder for creating many AccountExperience entities in bulk.
type AccountExperienceCreateBulk struct {
	config
	err      error
	builders []*AccountExperienceCreate
	conflict []sql.ConflictOption
}

// Save creates the AccountExperience entities in the database.
func (aecb *AccountExperienceCreateBulk) Save(ctx context.Context) ([]*AccountExperience, error) {
	if aecb.err != nil {
		return nil, aecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aecb.builders))
	nodes := make([]*AccountExperience, len(aecb.builders))
	mutators := make([]Mutator, len(aecb.builders))
	for i := range aecb.builders {
		func(i int, root context.Context) {
			builder := aecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountExperienceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aecb *AccountExperienceCreateBulk) SaveX(ctx context.Context) []*AccountExperience {
	v, err := aecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aecb *AccountExperienceCreateBulk) Exec(ctx context.Context) error {
	_, err := aecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aecb *AccountExperienceCreateBulk) ExecX(ctx context.Context) {
	if err := aecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccountExperience.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountExperienceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aecb *AccountExperienceCreateBulk) OnConflict(opts ...sql.ConflictOption) *AccountExperienceUpsertBulk {
	aecb.conflict = opts
	return &AccountExperienceUpsertBulk{
		create: aecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccountExperience.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aecb *AccountExperienceCreateBulk) OnConflictColumns(columns ...string) *AccountExperienceUpsertBulk {
	aecb.conflict = append(aecb.conflict, sql.ConflictColumns(columns...))
	return &AccountExperienceUpsertBulk{
		create: aecb,
	}
}

// AccountExperienceUpsertBulk is the builder for "upsert"-ing
// a bulk of AccountExperience nodes.
type AccountExperienceUpsertBulk struct {
	create *AccountExperienceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AccountExperience.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(accountexperience.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AccountExperienceUpsertBulk) UpdateNewValues() *AccountExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(accountexperience.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(accountexperience.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(accountexperience.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AccountExperience.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AccountExperienceUpsertBulk) Ignore() *AccountExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountExperienceUpsertBulk) DoNothing() *AccountExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountExperienceCreateBulk.OnConflict
// documentation for more info.
func (u *AccountExperienceUpsertBulk) Update(set func(*AccountExperienceUpsert)) *AccountExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountExperienceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AccountExperienceUpsertBulk) SetUpdatedAt(v int64) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AccountExperienceUpsertBulk) AddUpdatedAt(v int64) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AccountExperienceUpsertBulk) UpdateUpdatedAt() *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *AccountExperienceUpsertBulk) SetUpdatedBy(v int64) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *AccountExperienceUpsertBulk) AddUpdatedBy(v int64) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *AccountExperienceUpsertBulk) UpdateUpdatedBy() *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AccountExperienceUpsertBulk) SetDeletedAt(v int64) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AccountExperienceUpsertBulk) AddDeletedAt(v int64) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AccountExperienceUpsertBulk) UpdateDeletedAt() *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *AccountExperienceUpsertBulk) SetDeletedBy(v int64) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *AccountExperienceUpsertBulk) AddDeletedBy(v int64) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *AccountExperienceUpsertBulk) UpdateDeletedBy() *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetUserID sets the "user_id" field.
func (u *AccountExperienceUpsertBulk) SetUserID(v int) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *AccountExperienceUpsertBulk) AddUserID(v int) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AccountExperienceUpsertBulk) UpdateUserID() *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateUserID()
	})
}

// SetCompany sets the "company" field.
func (u *AccountExperienceUpsertBulk) SetCompany(v string) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *AccountExperienceUpsertBulk) UpdateCompany() *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateCompany()
	})
}

// SetRole sets the "role" field.
func (u *AccountExperienceUpsertBulk) SetRole(v string) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *AccountExperienceUpsertBulk) UpdateRole() *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateRole()
	})
}

// SetLocation sets the "location" field.
func (u *AccountExperienceUpsertBulk) SetLocation(v string) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *AccountExperienceUpsertBulk) UpdateLocation() *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateLocation()
	})
}

// SetStart sets the "start" field.
func (u *AccountExperienceUpsertBulk) SetStart(v int64) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *AccountExperienceUpsertBulk) AddStart(v int64) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *AccountExperienceUpsertBulk) UpdateStart() *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *AccountExperienceUpsertBulk) SetEnd(v int64) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *AccountExperienceUpsertBulk) AddEnd(v int64) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *AccountExperienceUpsertBulk) UpdateEnd() *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateEnd()
	})
}

// SetDescription sets the "description" field.
func (u *AccountExperienceUpsertBulk) SetDescription(v string) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AccountExperienceUpsertBulk) UpdateDescription() *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateDescription()
	})
}

// SetResponsibilities sets the "responsibilities" field.
func (u *AccountExperienceUpsertBulk) SetResponsibilities(v string) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetResponsibilities(v)
	})
}

// UpdateResponsibilities sets the "responsibilities" field to the value that was provided on create.
func (u *AccountExperienceUpsertBulk) UpdateResponsibilities() *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateResponsibilities()
	})
}

// SetAchievements sets the "achievements" field.
func (u *AccountExperienceUpsertBulk) SetAchievements(v string) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetAchievements(v)
	})
}

// UpdateAchievements sets the "achievements" field to the value that was provided on create.
func (u *AccountExperienceUpsertBulk) UpdateAchievements() *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateAchievements()
	})
}

// SetSkills sets the "skills" field.
func (u *AccountExperienceUpsertBulk) SetSkills(v []string) *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.SetSkills(v)
	})
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *AccountExperienceUpsertBulk) UpdateSkills() *AccountExperienceUpsertBulk {
	return u.Update(func(s *AccountExperienceUpsert) {
		s.UpdateSkills()
	})
}

// Exec executes the query.
func (u *AccountExperienceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AccountExperienceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountExperienceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountExperienceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
