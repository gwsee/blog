// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/palacesmemory"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PalacesMemoryCreate is the builder for creating a PalacesMemory entity.
type PalacesMemoryCreate struct {
	config
	mutation *PalacesMemoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pmc *PalacesMemoryCreate) SetCreatedAt(i int64) *PalacesMemoryCreate {
	pmc.mutation.SetCreatedAt(i)
	return pmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmc *PalacesMemoryCreate) SetNillableCreatedAt(i *int64) *PalacesMemoryCreate {
	if i != nil {
		pmc.SetCreatedAt(*i)
	}
	return pmc
}

// SetCreatedBy sets the "created_by" field.
func (pmc *PalacesMemoryCreate) SetCreatedBy(i int64) *PalacesMemoryCreate {
	pmc.mutation.SetCreatedBy(i)
	return pmc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pmc *PalacesMemoryCreate) SetNillableCreatedBy(i *int64) *PalacesMemoryCreate {
	if i != nil {
		pmc.SetCreatedBy(*i)
	}
	return pmc
}

// SetUpdatedAt sets the "updated_at" field.
func (pmc *PalacesMemoryCreate) SetUpdatedAt(i int64) *PalacesMemoryCreate {
	pmc.mutation.SetUpdatedAt(i)
	return pmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pmc *PalacesMemoryCreate) SetNillableUpdatedAt(i *int64) *PalacesMemoryCreate {
	if i != nil {
		pmc.SetUpdatedAt(*i)
	}
	return pmc
}

// SetUpdatedBy sets the "updated_by" field.
func (pmc *PalacesMemoryCreate) SetUpdatedBy(i int64) *PalacesMemoryCreate {
	pmc.mutation.SetUpdatedBy(i)
	return pmc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pmc *PalacesMemoryCreate) SetNillableUpdatedBy(i *int64) *PalacesMemoryCreate {
	if i != nil {
		pmc.SetUpdatedBy(*i)
	}
	return pmc
}

// SetDeletedAt sets the "deleted_at" field.
func (pmc *PalacesMemoryCreate) SetDeletedAt(i int64) *PalacesMemoryCreate {
	pmc.mutation.SetDeletedAt(i)
	return pmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmc *PalacesMemoryCreate) SetNillableDeletedAt(i *int64) *PalacesMemoryCreate {
	if i != nil {
		pmc.SetDeletedAt(*i)
	}
	return pmc
}

// SetDeletedBy sets the "deleted_by" field.
func (pmc *PalacesMemoryCreate) SetDeletedBy(i int64) *PalacesMemoryCreate {
	pmc.mutation.SetDeletedBy(i)
	return pmc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pmc *PalacesMemoryCreate) SetNillableDeletedBy(i *int64) *PalacesMemoryCreate {
	if i != nil {
		pmc.SetDeletedBy(*i)
	}
	return pmc
}

// SetStatus sets the "status" field.
func (pmc *PalacesMemoryCreate) SetStatus(i int8) *PalacesMemoryCreate {
	pmc.mutation.SetStatus(i)
	return pmc
}

// SetID sets the "id" field.
func (pmc *PalacesMemoryCreate) SetID(i int) *PalacesMemoryCreate {
	pmc.mutation.SetID(i)
	return pmc
}

// Mutation returns the PalacesMemoryMutation object of the builder.
func (pmc *PalacesMemoryCreate) Mutation() *PalacesMemoryMutation {
	return pmc.mutation
}

// Save creates the PalacesMemory in the database.
func (pmc *PalacesMemoryCreate) Save(ctx context.Context) (*PalacesMemory, error) {
	if err := pmc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *PalacesMemoryCreate) SaveX(ctx context.Context) *PalacesMemory {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *PalacesMemoryCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *PalacesMemoryCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *PalacesMemoryCreate) defaults() error {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		v := palacesmemory.DefaultCreatedAt
		pmc.mutation.SetCreatedAt(v)
	}
	if _, ok := pmc.mutation.CreatedBy(); !ok {
		v := palacesmemory.DefaultCreatedBy
		pmc.mutation.SetCreatedBy(v)
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		v := palacesmemory.DefaultUpdatedAt
		pmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pmc.mutation.UpdatedBy(); !ok {
		v := palacesmemory.DefaultUpdatedBy
		pmc.mutation.SetUpdatedBy(v)
	}
	if _, ok := pmc.mutation.DeletedAt(); !ok {
		v := palacesmemory.DefaultDeletedAt
		pmc.mutation.SetDeletedAt(v)
	}
	if _, ok := pmc.mutation.DeletedBy(); !ok {
		v := palacesmemory.DefaultDeletedBy
		pmc.mutation.SetDeletedBy(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pmc *PalacesMemoryCreate) check() error {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PalacesMemory.created_at"`)}
	}
	if _, ok := pmc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "PalacesMemory.created_by"`)}
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PalacesMemory.updated_at"`)}
	}
	if _, ok := pmc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "PalacesMemory.updated_by"`)}
	}
	if _, ok := pmc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "PalacesMemory.deleted_at"`)}
	}
	if _, ok := pmc.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "PalacesMemory.deleted_by"`)}
	}
	if _, ok := pmc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PalacesMemory.status"`)}
	}
	if v, ok := pmc.mutation.ID(); ok {
		if err := palacesmemory.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PalacesMemory.id": %w`, err)}
		}
	}
	return nil
}

func (pmc *PalacesMemoryCreate) sqlSave(ctx context.Context) (*PalacesMemory, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *PalacesMemoryCreate) createSpec() (*PalacesMemory, *sqlgraph.CreateSpec) {
	var (
		_node = &PalacesMemory{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(palacesmemory.Table, sqlgraph.NewFieldSpec(palacesmemory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pmc.conflict
	if id, ok := pmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.SetField(palacesmemory.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := pmc.mutation.CreatedBy(); ok {
		_spec.SetField(palacesmemory.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := pmc.mutation.UpdatedAt(); ok {
		_spec.SetField(palacesmemory.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := pmc.mutation.UpdatedBy(); ok {
		_spec.SetField(palacesmemory.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := pmc.mutation.DeletedAt(); ok {
		_spec.SetField(palacesmemory.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := pmc.mutation.DeletedBy(); ok {
		_spec.SetField(palacesmemory.FieldDeletedBy, field.TypeInt64, value)
		_node.DeletedBy = value
	}
	if value, ok := pmc.mutation.Status(); ok {
		_spec.SetField(palacesmemory.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PalacesMemory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PalacesMemoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pmc *PalacesMemoryCreate) OnConflict(opts ...sql.ConflictOption) *PalacesMemoryUpsertOne {
	pmc.conflict = opts
	return &PalacesMemoryUpsertOne{
		create: pmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PalacesMemory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmc *PalacesMemoryCreate) OnConflictColumns(columns ...string) *PalacesMemoryUpsertOne {
	pmc.conflict = append(pmc.conflict, sql.ConflictColumns(columns...))
	return &PalacesMemoryUpsertOne{
		create: pmc,
	}
}

type (
	// PalacesMemoryUpsertOne is the builder for "upsert"-ing
	//  one PalacesMemory node.
	PalacesMemoryUpsertOne struct {
		create *PalacesMemoryCreate
	}

	// PalacesMemoryUpsert is the "OnConflict" setter.
	PalacesMemoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PalacesMemoryUpsert) SetUpdatedAt(v int64) *PalacesMemoryUpsert {
	u.Set(palacesmemory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PalacesMemoryUpsert) UpdateUpdatedAt() *PalacesMemoryUpsert {
	u.SetExcluded(palacesmemory.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PalacesMemoryUpsert) AddUpdatedAt(v int64) *PalacesMemoryUpsert {
	u.Add(palacesmemory.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PalacesMemoryUpsert) SetUpdatedBy(v int64) *PalacesMemoryUpsert {
	u.Set(palacesmemory.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PalacesMemoryUpsert) UpdateUpdatedBy() *PalacesMemoryUpsert {
	u.SetExcluded(palacesmemory.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PalacesMemoryUpsert) AddUpdatedBy(v int64) *PalacesMemoryUpsert {
	u.Add(palacesmemory.FieldUpdatedBy, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PalacesMemoryUpsert) SetDeletedAt(v int64) *PalacesMemoryUpsert {
	u.Set(palacesmemory.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PalacesMemoryUpsert) UpdateDeletedAt() *PalacesMemoryUpsert {
	u.SetExcluded(palacesmemory.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PalacesMemoryUpsert) AddDeletedAt(v int64) *PalacesMemoryUpsert {
	u.Add(palacesmemory.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *PalacesMemoryUpsert) SetDeletedBy(v int64) *PalacesMemoryUpsert {
	u.Set(palacesmemory.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *PalacesMemoryUpsert) UpdateDeletedBy() *PalacesMemoryUpsert {
	u.SetExcluded(palacesmemory.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *PalacesMemoryUpsert) AddDeletedBy(v int64) *PalacesMemoryUpsert {
	u.Add(palacesmemory.FieldDeletedBy, v)
	return u
}

// SetStatus sets the "status" field.
func (u *PalacesMemoryUpsert) SetStatus(v int8) *PalacesMemoryUpsert {
	u.Set(palacesmemory.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PalacesMemoryUpsert) UpdateStatus() *PalacesMemoryUpsert {
	u.SetExcluded(palacesmemory.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *PalacesMemoryUpsert) AddStatus(v int8) *PalacesMemoryUpsert {
	u.Add(palacesmemory.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PalacesMemory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(palacesmemory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PalacesMemoryUpsertOne) UpdateNewValues() *PalacesMemoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(palacesmemory.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(palacesmemory.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(palacesmemory.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PalacesMemory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PalacesMemoryUpsertOne) Ignore() *PalacesMemoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PalacesMemoryUpsertOne) DoNothing() *PalacesMemoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PalacesMemoryCreate.OnConflict
// documentation for more info.
func (u *PalacesMemoryUpsertOne) Update(set func(*PalacesMemoryUpsert)) *PalacesMemoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PalacesMemoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PalacesMemoryUpsertOne) SetUpdatedAt(v int64) *PalacesMemoryUpsertOne {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PalacesMemoryUpsertOne) AddUpdatedAt(v int64) *PalacesMemoryUpsertOne {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PalacesMemoryUpsertOne) UpdateUpdatedAt() *PalacesMemoryUpsertOne {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PalacesMemoryUpsertOne) SetUpdatedBy(v int64) *PalacesMemoryUpsertOne {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PalacesMemoryUpsertOne) AddUpdatedBy(v int64) *PalacesMemoryUpsertOne {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PalacesMemoryUpsertOne) UpdateUpdatedBy() *PalacesMemoryUpsertOne {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PalacesMemoryUpsertOne) SetDeletedAt(v int64) *PalacesMemoryUpsertOne {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PalacesMemoryUpsertOne) AddDeletedAt(v int64) *PalacesMemoryUpsertOne {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PalacesMemoryUpsertOne) UpdateDeletedAt() *PalacesMemoryUpsertOne {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *PalacesMemoryUpsertOne) SetDeletedBy(v int64) *PalacesMemoryUpsertOne {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *PalacesMemoryUpsertOne) AddDeletedBy(v int64) *PalacesMemoryUpsertOne {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *PalacesMemoryUpsertOne) UpdateDeletedBy() *PalacesMemoryUpsertOne {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetStatus sets the "status" field.
func (u *PalacesMemoryUpsertOne) SetStatus(v int8) *PalacesMemoryUpsertOne {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PalacesMemoryUpsertOne) AddStatus(v int8) *PalacesMemoryUpsertOne {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PalacesMemoryUpsertOne) UpdateStatus() *PalacesMemoryUpsertOne {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *PalacesMemoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PalacesMemoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PalacesMemoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PalacesMemoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PalacesMemoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PalacesMemoryCreateBulk is the builder for creating many PalacesMemory entities in bulk.
type PalacesMemoryCreateBulk struct {
	config
	err      error
	builders []*PalacesMemoryCreate
	conflict []sql.ConflictOption
}

// Save creates the PalacesMemory entities in the database.
func (pmcb *PalacesMemoryCreateBulk) Save(ctx context.Context) ([]*PalacesMemory, error) {
	if pmcb.err != nil {
		return nil, pmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*PalacesMemory, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PalacesMemoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *PalacesMemoryCreateBulk) SaveX(ctx context.Context) []*PalacesMemory {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *PalacesMemoryCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *PalacesMemoryCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PalacesMemory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PalacesMemoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pmcb *PalacesMemoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *PalacesMemoryUpsertBulk {
	pmcb.conflict = opts
	return &PalacesMemoryUpsertBulk{
		create: pmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PalacesMemory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmcb *PalacesMemoryCreateBulk) OnConflictColumns(columns ...string) *PalacesMemoryUpsertBulk {
	pmcb.conflict = append(pmcb.conflict, sql.ConflictColumns(columns...))
	return &PalacesMemoryUpsertBulk{
		create: pmcb,
	}
}

// PalacesMemoryUpsertBulk is the builder for "upsert"-ing
// a bulk of PalacesMemory nodes.
type PalacesMemoryUpsertBulk struct {
	create *PalacesMemoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PalacesMemory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(palacesmemory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PalacesMemoryUpsertBulk) UpdateNewValues() *PalacesMemoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(palacesmemory.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(palacesmemory.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(palacesmemory.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PalacesMemory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PalacesMemoryUpsertBulk) Ignore() *PalacesMemoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PalacesMemoryUpsertBulk) DoNothing() *PalacesMemoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PalacesMemoryCreateBulk.OnConflict
// documentation for more info.
func (u *PalacesMemoryUpsertBulk) Update(set func(*PalacesMemoryUpsert)) *PalacesMemoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PalacesMemoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PalacesMemoryUpsertBulk) SetUpdatedAt(v int64) *PalacesMemoryUpsertBulk {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PalacesMemoryUpsertBulk) AddUpdatedAt(v int64) *PalacesMemoryUpsertBulk {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PalacesMemoryUpsertBulk) UpdateUpdatedAt() *PalacesMemoryUpsertBulk {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PalacesMemoryUpsertBulk) SetUpdatedBy(v int64) *PalacesMemoryUpsertBulk {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *PalacesMemoryUpsertBulk) AddUpdatedBy(v int64) *PalacesMemoryUpsertBulk {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PalacesMemoryUpsertBulk) UpdateUpdatedBy() *PalacesMemoryUpsertBulk {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PalacesMemoryUpsertBulk) SetDeletedAt(v int64) *PalacesMemoryUpsertBulk {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PalacesMemoryUpsertBulk) AddDeletedAt(v int64) *PalacesMemoryUpsertBulk {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PalacesMemoryUpsertBulk) UpdateDeletedAt() *PalacesMemoryUpsertBulk {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *PalacesMemoryUpsertBulk) SetDeletedBy(v int64) *PalacesMemoryUpsertBulk {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *PalacesMemoryUpsertBulk) AddDeletedBy(v int64) *PalacesMemoryUpsertBulk {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *PalacesMemoryUpsertBulk) UpdateDeletedBy() *PalacesMemoryUpsertBulk {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetStatus sets the "status" field.
func (u *PalacesMemoryUpsertBulk) SetStatus(v int8) *PalacesMemoryUpsertBulk {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PalacesMemoryUpsertBulk) AddStatus(v int8) *PalacesMemoryUpsertBulk {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PalacesMemoryUpsertBulk) UpdateStatus() *PalacesMemoryUpsertBulk {
	return u.Update(func(s *PalacesMemoryUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *PalacesMemoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PalacesMemoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PalacesMemoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PalacesMemoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
