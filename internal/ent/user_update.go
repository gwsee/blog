// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/predicate"
	"blog/internal/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(i int64) *UserUpdate {
	uu.mutation.ResetUpdatedAt()
	uu.mutation.SetUpdatedAt(i)
	return uu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (uu *UserUpdate) AddUpdatedAt(i int64) *UserUpdate {
	uu.mutation.AddUpdatedAt(i)
	return uu
}

// SetUpdatedBy sets the "updated_by" field.
func (uu *UserUpdate) SetUpdatedBy(i int64) *UserUpdate {
	uu.mutation.ResetUpdatedBy()
	uu.mutation.SetUpdatedBy(i)
	return uu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedBy(i *int64) *UserUpdate {
	if i != nil {
		uu.SetUpdatedBy(*i)
	}
	return uu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (uu *UserUpdate) AddUpdatedBy(i int64) *UserUpdate {
	uu.mutation.AddUpdatedBy(i)
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(i int64) *UserUpdate {
	uu.mutation.ResetDeletedAt()
	uu.mutation.SetDeletedAt(i)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(i *int64) *UserUpdate {
	if i != nil {
		uu.SetDeletedAt(*i)
	}
	return uu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (uu *UserUpdate) AddDeletedAt(i int64) *UserUpdate {
	uu.mutation.AddDeletedAt(i)
	return uu
}

// SetDeletedBy sets the "deleted_by" field.
func (uu *UserUpdate) SetDeletedBy(i int64) *UserUpdate {
	uu.mutation.ResetDeletedBy()
	uu.mutation.SetDeletedBy(i)
	return uu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedBy(i *int64) *UserUpdate {
	if i != nil {
		uu.SetDeletedBy(*i)
	}
	return uu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (uu *UserUpdate) AddDeletedBy(i int64) *UserUpdate {
	uu.mutation.AddDeletedBy(i)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UserUpdate) SetAvatar(s string) *UserUpdate {
	uu.mutation.SetAvatar(s)
	return uu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatar(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatar(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetProfessional sets the "professional" field.
func (uu *UserUpdate) SetProfessional(s string) *UserUpdate {
	uu.mutation.SetProfessional(s)
	return uu
}

// SetNillableProfessional sets the "professional" field if the given value is not nil.
func (uu *UserUpdate) SetNillableProfessional(s *string) *UserUpdate {
	if s != nil {
		uu.SetProfessional(*s)
	}
	return uu
}

// SetAddress sets the "address" field.
func (uu *UserUpdate) SetAddress(s string) *UserUpdate {
	uu.mutation.SetAddress(s)
	return uu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAddress(s *string) *UserUpdate {
	if s != nil {
		uu.SetAddress(*s)
	}
	return uu
}

// SetSkills sets the "skills" field.
func (uu *UserUpdate) SetSkills(s []string) *UserUpdate {
	uu.mutation.SetSkills(s)
	return uu
}

// AppendSkills appends s to the "skills" field.
func (uu *UserUpdate) AppendSkills(s []string) *UserUpdate {
	uu.mutation.AppendSkills(s)
	return uu
}

// SetDescription sets the "description" field.
func (uu *UserUpdate) SetDescription(s string) *UserUpdate {
	uu.mutation.SetDescription(s)
	return uu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDescription(s *string) *UserUpdate {
	if s != nil {
		uu.SetDescription(*s)
	}
	return uu
}

// SetExperience sets the "experience" field.
func (uu *UserUpdate) SetExperience(i int) *UserUpdate {
	uu.mutation.ResetExperience()
	uu.mutation.SetExperience(i)
	return uu
}

// SetNillableExperience sets the "experience" field if the given value is not nil.
func (uu *UserUpdate) SetNillableExperience(i *int) *UserUpdate {
	if i != nil {
		uu.SetExperience(*i)
	}
	return uu
}

// AddExperience adds i to the "experience" field.
func (uu *UserUpdate) AddExperience(i int) *UserUpdate {
	uu.mutation.AddExperience(i)
	return uu
}

// SetProject sets the "project" field.
func (uu *UserUpdate) SetProject(i int) *UserUpdate {
	uu.mutation.ResetProject()
	uu.mutation.SetProject(i)
	return uu
}

// SetNillableProject sets the "project" field if the given value is not nil.
func (uu *UserUpdate) SetNillableProject(i *int) *UserUpdate {
	if i != nil {
		uu.SetProject(*i)
	}
	return uu
}

// AddProject adds i to the "project" field.
func (uu *UserUpdate) AddProject(i int) *UserUpdate {
	uu.mutation.AddProject(i)
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if err := uu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() error {
	if _, ok := uu.mutation.CreatedAt(); !ok {
		if user.UpdateDefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultCreatedAt()
		uu.mutation.SetCreatedAt(v)
	}
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		if user.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Description(); ok {
		if err := user.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "User.description": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(user.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(user.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.UpdatedBy(); ok {
		_spec.SetField(user.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(user.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(user.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.DeletedBy(); ok {
		_spec.SetField(user.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(user.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Professional(); ok {
		_spec.SetField(user.FieldProfessional, field.TypeString, value)
	}
	if value, ok := uu.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if value, ok := uu.mutation.Skills(); ok {
		_spec.SetField(user.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldSkills, value)
		})
	}
	if value, ok := uu.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if value, ok := uu.mutation.Experience(); ok {
		_spec.SetField(user.FieldExperience, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedExperience(); ok {
		_spec.AddField(user.FieldExperience, field.TypeInt, value)
	}
	if value, ok := uu.mutation.Project(); ok {
		_spec.SetField(user.FieldProject, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedProject(); ok {
		_spec.AddField(user.FieldProject, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(i int64) *UserUpdateOne {
	uuo.mutation.ResetUpdatedAt()
	uuo.mutation.SetUpdatedAt(i)
	return uuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (uuo *UserUpdateOne) AddUpdatedAt(i int64) *UserUpdateOne {
	uuo.mutation.AddUpdatedAt(i)
	return uuo
}

// SetUpdatedBy sets the "updated_by" field.
func (uuo *UserUpdateOne) SetUpdatedBy(i int64) *UserUpdateOne {
	uuo.mutation.ResetUpdatedBy()
	uuo.mutation.SetUpdatedBy(i)
	return uuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedBy(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetUpdatedBy(*i)
	}
	return uuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (uuo *UserUpdateOne) AddUpdatedBy(i int64) *UserUpdateOne {
	uuo.mutation.AddUpdatedBy(i)
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(i int64) *UserUpdateOne {
	uuo.mutation.ResetDeletedAt()
	uuo.mutation.SetDeletedAt(i)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetDeletedAt(*i)
	}
	return uuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (uuo *UserUpdateOne) AddDeletedAt(i int64) *UserUpdateOne {
	uuo.mutation.AddDeletedAt(i)
	return uuo
}

// SetDeletedBy sets the "deleted_by" field.
func (uuo *UserUpdateOne) SetDeletedBy(i int64) *UserUpdateOne {
	uuo.mutation.ResetDeletedBy()
	uuo.mutation.SetDeletedBy(i)
	return uuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedBy(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetDeletedBy(*i)
	}
	return uuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (uuo *UserUpdateOne) AddDeletedBy(i int64) *UserUpdateOne {
	uuo.mutation.AddDeletedBy(i)
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetAvatar sets the "avatar" field.
func (uuo *UserUpdateOne) SetAvatar(s string) *UserUpdateOne {
	uuo.mutation.SetAvatar(s)
	return uuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatar(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatar(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetProfessional sets the "professional" field.
func (uuo *UserUpdateOne) SetProfessional(s string) *UserUpdateOne {
	uuo.mutation.SetProfessional(s)
	return uuo
}

// SetNillableProfessional sets the "professional" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableProfessional(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetProfessional(*s)
	}
	return uuo
}

// SetAddress sets the "address" field.
func (uuo *UserUpdateOne) SetAddress(s string) *UserUpdateOne {
	uuo.mutation.SetAddress(s)
	return uuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAddress(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAddress(*s)
	}
	return uuo
}

// SetSkills sets the "skills" field.
func (uuo *UserUpdateOne) SetSkills(s []string) *UserUpdateOne {
	uuo.mutation.SetSkills(s)
	return uuo
}

// AppendSkills appends s to the "skills" field.
func (uuo *UserUpdateOne) AppendSkills(s []string) *UserUpdateOne {
	uuo.mutation.AppendSkills(s)
	return uuo
}

// SetDescription sets the "description" field.
func (uuo *UserUpdateOne) SetDescription(s string) *UserUpdateOne {
	uuo.mutation.SetDescription(s)
	return uuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDescription(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDescription(*s)
	}
	return uuo
}

// SetExperience sets the "experience" field.
func (uuo *UserUpdateOne) SetExperience(i int) *UserUpdateOne {
	uuo.mutation.ResetExperience()
	uuo.mutation.SetExperience(i)
	return uuo
}

// SetNillableExperience sets the "experience" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableExperience(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetExperience(*i)
	}
	return uuo
}

// AddExperience adds i to the "experience" field.
func (uuo *UserUpdateOne) AddExperience(i int) *UserUpdateOne {
	uuo.mutation.AddExperience(i)
	return uuo
}

// SetProject sets the "project" field.
func (uuo *UserUpdateOne) SetProject(i int) *UserUpdateOne {
	uuo.mutation.ResetProject()
	uuo.mutation.SetProject(i)
	return uuo
}

// SetNillableProject sets the "project" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableProject(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetProject(*i)
	}
	return uuo
}

// AddProject adds i to the "project" field.
func (uuo *UserUpdateOne) AddProject(i int) *UserUpdateOne {
	uuo.mutation.AddProject(i)
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if err := uuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() error {
	if _, ok := uuo.mutation.CreatedAt(); !ok {
		if user.UpdateDefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultCreatedAt()
		uuo.mutation.SetCreatedAt(v)
	}
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		if user.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Description(); ok {
		if err := user.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "User.description": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(user.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(user.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.UpdatedBy(); ok {
		_spec.SetField(user.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(user.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(user.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.DeletedBy(); ok {
		_spec.SetField(user.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(user.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Professional(); ok {
		_spec.SetField(user.FieldProfessional, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Skills(); ok {
		_spec.SetField(user.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldSkills, value)
		})
	}
	if value, ok := uuo.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Experience(); ok {
		_spec.SetField(user.FieldExperience, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedExperience(); ok {
		_spec.AddField(user.FieldExperience, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.Project(); ok {
		_spec.SetField(user.FieldProject, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedProject(); ok {
		_spec.AddField(user.FieldProject, field.TypeInt, value)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
