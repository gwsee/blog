// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/userfamousquotes"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserFamousQuotesCreate is the builder for creating a UserFamousQuotes entity.
type UserFamousQuotesCreate struct {
	config
	mutation *UserFamousQuotesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ufqc *UserFamousQuotesCreate) SetCreatedAt(i int64) *UserFamousQuotesCreate {
	ufqc.mutation.SetCreatedAt(i)
	return ufqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ufqc *UserFamousQuotesCreate) SetNillableCreatedAt(i *int64) *UserFamousQuotesCreate {
	if i != nil {
		ufqc.SetCreatedAt(*i)
	}
	return ufqc
}

// SetCreatedBy sets the "created_by" field.
func (ufqc *UserFamousQuotesCreate) SetCreatedBy(i int64) *UserFamousQuotesCreate {
	ufqc.mutation.SetCreatedBy(i)
	return ufqc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ufqc *UserFamousQuotesCreate) SetNillableCreatedBy(i *int64) *UserFamousQuotesCreate {
	if i != nil {
		ufqc.SetCreatedBy(*i)
	}
	return ufqc
}

// SetUpdatedAt sets the "updated_at" field.
func (ufqc *UserFamousQuotesCreate) SetUpdatedAt(i int64) *UserFamousQuotesCreate {
	ufqc.mutation.SetUpdatedAt(i)
	return ufqc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ufqc *UserFamousQuotesCreate) SetNillableUpdatedAt(i *int64) *UserFamousQuotesCreate {
	if i != nil {
		ufqc.SetUpdatedAt(*i)
	}
	return ufqc
}

// SetUpdatedBy sets the "updated_by" field.
func (ufqc *UserFamousQuotesCreate) SetUpdatedBy(i int64) *UserFamousQuotesCreate {
	ufqc.mutation.SetUpdatedBy(i)
	return ufqc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ufqc *UserFamousQuotesCreate) SetNillableUpdatedBy(i *int64) *UserFamousQuotesCreate {
	if i != nil {
		ufqc.SetUpdatedBy(*i)
	}
	return ufqc
}

// SetDeletedAt sets the "deleted_at" field.
func (ufqc *UserFamousQuotesCreate) SetDeletedAt(i int64) *UserFamousQuotesCreate {
	ufqc.mutation.SetDeletedAt(i)
	return ufqc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ufqc *UserFamousQuotesCreate) SetNillableDeletedAt(i *int64) *UserFamousQuotesCreate {
	if i != nil {
		ufqc.SetDeletedAt(*i)
	}
	return ufqc
}

// SetDeletedBy sets the "deleted_by" field.
func (ufqc *UserFamousQuotesCreate) SetDeletedBy(i int64) *UserFamousQuotesCreate {
	ufqc.mutation.SetDeletedBy(i)
	return ufqc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ufqc *UserFamousQuotesCreate) SetNillableDeletedBy(i *int64) *UserFamousQuotesCreate {
	if i != nil {
		ufqc.SetDeletedBy(*i)
	}
	return ufqc
}

// SetText sets the "text" field.
func (ufqc *UserFamousQuotesCreate) SetText(s string) *UserFamousQuotesCreate {
	ufqc.mutation.SetText(s)
	return ufqc
}

// SetID sets the "id" field.
func (ufqc *UserFamousQuotesCreate) SetID(i int) *UserFamousQuotesCreate {
	ufqc.mutation.SetID(i)
	return ufqc
}

// Mutation returns the UserFamousQuotesMutation object of the builder.
func (ufqc *UserFamousQuotesCreate) Mutation() *UserFamousQuotesMutation {
	return ufqc.mutation
}

// Save creates the UserFamousQuotes in the database.
func (ufqc *UserFamousQuotesCreate) Save(ctx context.Context) (*UserFamousQuotes, error) {
	if err := ufqc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ufqc.sqlSave, ufqc.mutation, ufqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ufqc *UserFamousQuotesCreate) SaveX(ctx context.Context) *UserFamousQuotes {
	v, err := ufqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufqc *UserFamousQuotesCreate) Exec(ctx context.Context) error {
	_, err := ufqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufqc *UserFamousQuotesCreate) ExecX(ctx context.Context) {
	if err := ufqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufqc *UserFamousQuotesCreate) defaults() error {
	if _, ok := ufqc.mutation.CreatedAt(); !ok {
		v := userfamousquotes.DefaultCreatedAt
		ufqc.mutation.SetCreatedAt(v)
	}
	if _, ok := ufqc.mutation.CreatedBy(); !ok {
		v := userfamousquotes.DefaultCreatedBy
		ufqc.mutation.SetCreatedBy(v)
	}
	if _, ok := ufqc.mutation.UpdatedAt(); !ok {
		v := userfamousquotes.DefaultUpdatedAt
		ufqc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ufqc.mutation.UpdatedBy(); !ok {
		v := userfamousquotes.DefaultUpdatedBy
		ufqc.mutation.SetUpdatedBy(v)
	}
	if _, ok := ufqc.mutation.DeletedAt(); !ok {
		v := userfamousquotes.DefaultDeletedAt
		ufqc.mutation.SetDeletedAt(v)
	}
	if _, ok := ufqc.mutation.DeletedBy(); !ok {
		v := userfamousquotes.DefaultDeletedBy
		ufqc.mutation.SetDeletedBy(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ufqc *UserFamousQuotesCreate) check() error {
	if _, ok := ufqc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserFamousQuotes.created_at"`)}
	}
	if _, ok := ufqc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "UserFamousQuotes.created_by"`)}
	}
	if _, ok := ufqc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserFamousQuotes.updated_at"`)}
	}
	if _, ok := ufqc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "UserFamousQuotes.updated_by"`)}
	}
	if _, ok := ufqc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "UserFamousQuotes.deleted_at"`)}
	}
	if _, ok := ufqc.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "UserFamousQuotes.deleted_by"`)}
	}
	if _, ok := ufqc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "UserFamousQuotes.text"`)}
	}
	if v, ok := ufqc.mutation.ID(); ok {
		if err := userfamousquotes.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "UserFamousQuotes.id": %w`, err)}
		}
	}
	return nil
}

func (ufqc *UserFamousQuotesCreate) sqlSave(ctx context.Context) (*UserFamousQuotes, error) {
	if err := ufqc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ufqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ufqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ufqc.mutation.id = &_node.ID
	ufqc.mutation.done = true
	return _node, nil
}

func (ufqc *UserFamousQuotesCreate) createSpec() (*UserFamousQuotes, *sqlgraph.CreateSpec) {
	var (
		_node = &UserFamousQuotes{config: ufqc.config}
		_spec = sqlgraph.NewCreateSpec(userfamousquotes.Table, sqlgraph.NewFieldSpec(userfamousquotes.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ufqc.conflict
	if id, ok := ufqc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ufqc.mutation.CreatedAt(); ok {
		_spec.SetField(userfamousquotes.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := ufqc.mutation.CreatedBy(); ok {
		_spec.SetField(userfamousquotes.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := ufqc.mutation.UpdatedAt(); ok {
		_spec.SetField(userfamousquotes.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := ufqc.mutation.UpdatedBy(); ok {
		_spec.SetField(userfamousquotes.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := ufqc.mutation.DeletedAt(); ok {
		_spec.SetField(userfamousquotes.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := ufqc.mutation.DeletedBy(); ok {
		_spec.SetField(userfamousquotes.FieldDeletedBy, field.TypeInt64, value)
		_node.DeletedBy = value
	}
	if value, ok := ufqc.mutation.Text(); ok {
		_spec.SetField(userfamousquotes.FieldText, field.TypeString, value)
		_node.Text = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserFamousQuotes.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserFamousQuotesUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ufqc *UserFamousQuotesCreate) OnConflict(opts ...sql.ConflictOption) *UserFamousQuotesUpsertOne {
	ufqc.conflict = opts
	return &UserFamousQuotesUpsertOne{
		create: ufqc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserFamousQuotes.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ufqc *UserFamousQuotesCreate) OnConflictColumns(columns ...string) *UserFamousQuotesUpsertOne {
	ufqc.conflict = append(ufqc.conflict, sql.ConflictColumns(columns...))
	return &UserFamousQuotesUpsertOne{
		create: ufqc,
	}
}

type (
	// UserFamousQuotesUpsertOne is the builder for "upsert"-ing
	//  one UserFamousQuotes node.
	UserFamousQuotesUpsertOne struct {
		create *UserFamousQuotesCreate
	}

	// UserFamousQuotesUpsert is the "OnConflict" setter.
	UserFamousQuotesUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserFamousQuotesUpsert) SetUpdatedAt(v int64) *UserFamousQuotesUpsert {
	u.Set(userfamousquotes.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserFamousQuotesUpsert) UpdateUpdatedAt() *UserFamousQuotesUpsert {
	u.SetExcluded(userfamousquotes.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserFamousQuotesUpsert) AddUpdatedAt(v int64) *UserFamousQuotesUpsert {
	u.Add(userfamousquotes.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserFamousQuotesUpsert) SetUpdatedBy(v int64) *UserFamousQuotesUpsert {
	u.Set(userfamousquotes.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserFamousQuotesUpsert) UpdateUpdatedBy() *UserFamousQuotesUpsert {
	u.SetExcluded(userfamousquotes.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserFamousQuotesUpsert) AddUpdatedBy(v int64) *UserFamousQuotesUpsert {
	u.Add(userfamousquotes.FieldUpdatedBy, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserFamousQuotesUpsert) SetDeletedAt(v int64) *UserFamousQuotesUpsert {
	u.Set(userfamousquotes.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserFamousQuotesUpsert) UpdateDeletedAt() *UserFamousQuotesUpsert {
	u.SetExcluded(userfamousquotes.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UserFamousQuotesUpsert) AddDeletedAt(v int64) *UserFamousQuotesUpsert {
	u.Add(userfamousquotes.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *UserFamousQuotesUpsert) SetDeletedBy(v int64) *UserFamousQuotesUpsert {
	u.Set(userfamousquotes.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *UserFamousQuotesUpsert) UpdateDeletedBy() *UserFamousQuotesUpsert {
	u.SetExcluded(userfamousquotes.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *UserFamousQuotesUpsert) AddDeletedBy(v int64) *UserFamousQuotesUpsert {
	u.Add(userfamousquotes.FieldDeletedBy, v)
	return u
}

// SetText sets the "text" field.
func (u *UserFamousQuotesUpsert) SetText(v string) *UserFamousQuotesUpsert {
	u.Set(userfamousquotes.FieldText, v)
	return u
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *UserFamousQuotesUpsert) UpdateText() *UserFamousQuotesUpsert {
	u.SetExcluded(userfamousquotes.FieldText)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserFamousQuotes.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userfamousquotes.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserFamousQuotesUpsertOne) UpdateNewValues() *UserFamousQuotesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userfamousquotes.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(userfamousquotes.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(userfamousquotes.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserFamousQuotes.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserFamousQuotesUpsertOne) Ignore() *UserFamousQuotesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserFamousQuotesUpsertOne) DoNothing() *UserFamousQuotesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserFamousQuotesCreate.OnConflict
// documentation for more info.
func (u *UserFamousQuotesUpsertOne) Update(set func(*UserFamousQuotesUpsert)) *UserFamousQuotesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserFamousQuotesUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserFamousQuotesUpsertOne) SetUpdatedAt(v int64) *UserFamousQuotesUpsertOne {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserFamousQuotesUpsertOne) AddUpdatedAt(v int64) *UserFamousQuotesUpsertOne {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserFamousQuotesUpsertOne) UpdateUpdatedAt() *UserFamousQuotesUpsertOne {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserFamousQuotesUpsertOne) SetUpdatedBy(v int64) *UserFamousQuotesUpsertOne {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserFamousQuotesUpsertOne) AddUpdatedBy(v int64) *UserFamousQuotesUpsertOne {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserFamousQuotesUpsertOne) UpdateUpdatedBy() *UserFamousQuotesUpsertOne {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserFamousQuotesUpsertOne) SetDeletedAt(v int64) *UserFamousQuotesUpsertOne {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UserFamousQuotesUpsertOne) AddDeletedAt(v int64) *UserFamousQuotesUpsertOne {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserFamousQuotesUpsertOne) UpdateDeletedAt() *UserFamousQuotesUpsertOne {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *UserFamousQuotesUpsertOne) SetDeletedBy(v int64) *UserFamousQuotesUpsertOne {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *UserFamousQuotesUpsertOne) AddDeletedBy(v int64) *UserFamousQuotesUpsertOne {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *UserFamousQuotesUpsertOne) UpdateDeletedBy() *UserFamousQuotesUpsertOne {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetText sets the "text" field.
func (u *UserFamousQuotesUpsertOne) SetText(v string) *UserFamousQuotesUpsertOne {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *UserFamousQuotesUpsertOne) UpdateText() *UserFamousQuotesUpsertOne {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.UpdateText()
	})
}

// Exec executes the query.
func (u *UserFamousQuotesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserFamousQuotesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserFamousQuotesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserFamousQuotesUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserFamousQuotesUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserFamousQuotesCreateBulk is the builder for creating many UserFamousQuotes entities in bulk.
type UserFamousQuotesCreateBulk struct {
	config
	err      error
	builders []*UserFamousQuotesCreate
	conflict []sql.ConflictOption
}

// Save creates the UserFamousQuotes entities in the database.
func (ufqcb *UserFamousQuotesCreateBulk) Save(ctx context.Context) ([]*UserFamousQuotes, error) {
	if ufqcb.err != nil {
		return nil, ufqcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ufqcb.builders))
	nodes := make([]*UserFamousQuotes, len(ufqcb.builders))
	mutators := make([]Mutator, len(ufqcb.builders))
	for i := range ufqcb.builders {
		func(i int, root context.Context) {
			builder := ufqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserFamousQuotesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ufqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ufqcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ufqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ufqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ufqcb *UserFamousQuotesCreateBulk) SaveX(ctx context.Context) []*UserFamousQuotes {
	v, err := ufqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufqcb *UserFamousQuotesCreateBulk) Exec(ctx context.Context) error {
	_, err := ufqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufqcb *UserFamousQuotesCreateBulk) ExecX(ctx context.Context) {
	if err := ufqcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserFamousQuotes.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserFamousQuotesUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ufqcb *UserFamousQuotesCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserFamousQuotesUpsertBulk {
	ufqcb.conflict = opts
	return &UserFamousQuotesUpsertBulk{
		create: ufqcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserFamousQuotes.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ufqcb *UserFamousQuotesCreateBulk) OnConflictColumns(columns ...string) *UserFamousQuotesUpsertBulk {
	ufqcb.conflict = append(ufqcb.conflict, sql.ConflictColumns(columns...))
	return &UserFamousQuotesUpsertBulk{
		create: ufqcb,
	}
}

// UserFamousQuotesUpsertBulk is the builder for "upsert"-ing
// a bulk of UserFamousQuotes nodes.
type UserFamousQuotesUpsertBulk struct {
	create *UserFamousQuotesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserFamousQuotes.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userfamousquotes.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserFamousQuotesUpsertBulk) UpdateNewValues() *UserFamousQuotesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userfamousquotes.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(userfamousquotes.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(userfamousquotes.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserFamousQuotes.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserFamousQuotesUpsertBulk) Ignore() *UserFamousQuotesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserFamousQuotesUpsertBulk) DoNothing() *UserFamousQuotesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserFamousQuotesCreateBulk.OnConflict
// documentation for more info.
func (u *UserFamousQuotesUpsertBulk) Update(set func(*UserFamousQuotesUpsert)) *UserFamousQuotesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserFamousQuotesUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserFamousQuotesUpsertBulk) SetUpdatedAt(v int64) *UserFamousQuotesUpsertBulk {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserFamousQuotesUpsertBulk) AddUpdatedAt(v int64) *UserFamousQuotesUpsertBulk {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserFamousQuotesUpsertBulk) UpdateUpdatedAt() *UserFamousQuotesUpsertBulk {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserFamousQuotesUpsertBulk) SetUpdatedBy(v int64) *UserFamousQuotesUpsertBulk {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserFamousQuotesUpsertBulk) AddUpdatedBy(v int64) *UserFamousQuotesUpsertBulk {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserFamousQuotesUpsertBulk) UpdateUpdatedBy() *UserFamousQuotesUpsertBulk {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserFamousQuotesUpsertBulk) SetDeletedAt(v int64) *UserFamousQuotesUpsertBulk {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UserFamousQuotesUpsertBulk) AddDeletedAt(v int64) *UserFamousQuotesUpsertBulk {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserFamousQuotesUpsertBulk) UpdateDeletedAt() *UserFamousQuotesUpsertBulk {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *UserFamousQuotesUpsertBulk) SetDeletedBy(v int64) *UserFamousQuotesUpsertBulk {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *UserFamousQuotesUpsertBulk) AddDeletedBy(v int64) *UserFamousQuotesUpsertBulk {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *UserFamousQuotesUpsertBulk) UpdateDeletedBy() *UserFamousQuotesUpsertBulk {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetText sets the "text" field.
func (u *UserFamousQuotesUpsertBulk) SetText(v string) *UserFamousQuotesUpsertBulk {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *UserFamousQuotesUpsertBulk) UpdateText() *UserFamousQuotesUpsertBulk {
	return u.Update(func(s *UserFamousQuotesUpsert) {
		s.UpdateText()
	})
}

// Exec executes the query.
func (u *UserFamousQuotesUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserFamousQuotesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserFamousQuotesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserFamousQuotesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
