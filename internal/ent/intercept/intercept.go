// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"blog/internal/ent"
	"blog/internal/ent/account"
	"blog/internal/ent/blogs"
	"blog/internal/ent/blogscomment"
	"blog/internal/ent/blogscontent"
	"blog/internal/ent/blogsextend"
	"blog/internal/ent/files"
	"blog/internal/ent/filesextend"
	"blog/internal/ent/palacesmemo"
	"blog/internal/ent/palacesmemory"
	"blog/internal/ent/palacestodo"
	"blog/internal/ent/palacestododone"
	"blog/internal/ent/predicate"
	"blog/internal/ent/tags"
	"blog/internal/ent/tagsrelation"
	"blog/internal/ent/travelextends"
	"blog/internal/ent/travels"
	"blog/internal/ent/user"
	"blog/internal/ent/userexperience"
	"blog/internal/ent/userfamousquotes"
	"blog/internal/ent/userproject"

	"entgo.io/ent/dialect/sql"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The AccountFunc type is an adapter to allow the use of ordinary function as a Querier.
type AccountFunc func(context.Context, *ent.AccountQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AccountFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AccountQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AccountQuery", q)
}

// The TraverseAccount type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAccount func(context.Context, *ent.AccountQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAccount) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAccount) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AccountQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AccountQuery", q)
}

// The BlogsFunc type is an adapter to allow the use of ordinary function as a Querier.
type BlogsFunc func(context.Context, *ent.BlogsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f BlogsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.BlogsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.BlogsQuery", q)
}

// The TraverseBlogs type is an adapter to allow the use of ordinary function as Traverser.
type TraverseBlogs func(context.Context, *ent.BlogsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseBlogs) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseBlogs) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlogsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.BlogsQuery", q)
}

// The BlogsCommentFunc type is an adapter to allow the use of ordinary function as a Querier.
type BlogsCommentFunc func(context.Context, *ent.BlogsCommentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f BlogsCommentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.BlogsCommentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.BlogsCommentQuery", q)
}

// The TraverseBlogsComment type is an adapter to allow the use of ordinary function as Traverser.
type TraverseBlogsComment func(context.Context, *ent.BlogsCommentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseBlogsComment) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseBlogsComment) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlogsCommentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.BlogsCommentQuery", q)
}

// The BlogsContentFunc type is an adapter to allow the use of ordinary function as a Querier.
type BlogsContentFunc func(context.Context, *ent.BlogsContentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f BlogsContentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.BlogsContentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.BlogsContentQuery", q)
}

// The TraverseBlogsContent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseBlogsContent func(context.Context, *ent.BlogsContentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseBlogsContent) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseBlogsContent) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlogsContentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.BlogsContentQuery", q)
}

// The BlogsExtendFunc type is an adapter to allow the use of ordinary function as a Querier.
type BlogsExtendFunc func(context.Context, *ent.BlogsExtendQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f BlogsExtendFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.BlogsExtendQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.BlogsExtendQuery", q)
}

// The TraverseBlogsExtend type is an adapter to allow the use of ordinary function as Traverser.
type TraverseBlogsExtend func(context.Context, *ent.BlogsExtendQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseBlogsExtend) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseBlogsExtend) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlogsExtendQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.BlogsExtendQuery", q)
}

// The FilesFunc type is an adapter to allow the use of ordinary function as a Querier.
type FilesFunc func(context.Context, *ent.FilesQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FilesFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FilesQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FilesQuery", q)
}

// The TraverseFiles type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFiles func(context.Context, *ent.FilesQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFiles) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFiles) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FilesQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FilesQuery", q)
}

// The FilesExtendFunc type is an adapter to allow the use of ordinary function as a Querier.
type FilesExtendFunc func(context.Context, *ent.FilesExtendQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FilesExtendFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FilesExtendQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FilesExtendQuery", q)
}

// The TraverseFilesExtend type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFilesExtend func(context.Context, *ent.FilesExtendQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFilesExtend) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFilesExtend) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FilesExtendQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FilesExtendQuery", q)
}

// The PalacesMemoFunc type is an adapter to allow the use of ordinary function as a Querier.
type PalacesMemoFunc func(context.Context, *ent.PalacesMemoQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PalacesMemoFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PalacesMemoQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PalacesMemoQuery", q)
}

// The TraversePalacesMemo type is an adapter to allow the use of ordinary function as Traverser.
type TraversePalacesMemo func(context.Context, *ent.PalacesMemoQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePalacesMemo) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePalacesMemo) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PalacesMemoQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PalacesMemoQuery", q)
}

// The PalacesMemoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type PalacesMemoryFunc func(context.Context, *ent.PalacesMemoryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PalacesMemoryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PalacesMemoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PalacesMemoryQuery", q)
}

// The TraversePalacesMemory type is an adapter to allow the use of ordinary function as Traverser.
type TraversePalacesMemory func(context.Context, *ent.PalacesMemoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePalacesMemory) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePalacesMemory) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PalacesMemoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PalacesMemoryQuery", q)
}

// The PalacesTodoFunc type is an adapter to allow the use of ordinary function as a Querier.
type PalacesTodoFunc func(context.Context, *ent.PalacesTodoQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PalacesTodoFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PalacesTodoQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PalacesTodoQuery", q)
}

// The TraversePalacesTodo type is an adapter to allow the use of ordinary function as Traverser.
type TraversePalacesTodo func(context.Context, *ent.PalacesTodoQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePalacesTodo) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePalacesTodo) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PalacesTodoQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PalacesTodoQuery", q)
}

// The PalacesTodoDoneFunc type is an adapter to allow the use of ordinary function as a Querier.
type PalacesTodoDoneFunc func(context.Context, *ent.PalacesTodoDoneQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PalacesTodoDoneFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PalacesTodoDoneQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PalacesTodoDoneQuery", q)
}

// The TraversePalacesTodoDone type is an adapter to allow the use of ordinary function as Traverser.
type TraversePalacesTodoDone func(context.Context, *ent.PalacesTodoDoneQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePalacesTodoDone) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePalacesTodoDone) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PalacesTodoDoneQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PalacesTodoDoneQuery", q)
}

// The TagsFunc type is an adapter to allow the use of ordinary function as a Querier.
type TagsFunc func(context.Context, *ent.TagsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TagsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TagsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TagsQuery", q)
}

// The TraverseTags type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTags func(context.Context, *ent.TagsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTags) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTags) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TagsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TagsQuery", q)
}

// The TagsRelationFunc type is an adapter to allow the use of ordinary function as a Querier.
type TagsRelationFunc func(context.Context, *ent.TagsRelationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TagsRelationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TagsRelationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TagsRelationQuery", q)
}

// The TraverseTagsRelation type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTagsRelation func(context.Context, *ent.TagsRelationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTagsRelation) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTagsRelation) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TagsRelationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TagsRelationQuery", q)
}

// The TravelExtendsFunc type is an adapter to allow the use of ordinary function as a Querier.
type TravelExtendsFunc func(context.Context, *ent.TravelExtendsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TravelExtendsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TravelExtendsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TravelExtendsQuery", q)
}

// The TraverseTravelExtends type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTravelExtends func(context.Context, *ent.TravelExtendsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTravelExtends) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTravelExtends) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TravelExtendsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TravelExtendsQuery", q)
}

// The TravelsFunc type is an adapter to allow the use of ordinary function as a Querier.
type TravelsFunc func(context.Context, *ent.TravelsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TravelsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TravelsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TravelsQuery", q)
}

// The TraverseTravels type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTravels func(context.Context, *ent.TravelsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTravels) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTravels) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TravelsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TravelsQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The UserExperienceFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserExperienceFunc func(context.Context, *ent.UserExperienceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserExperienceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserExperienceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserExperienceQuery", q)
}

// The TraverseUserExperience type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserExperience func(context.Context, *ent.UserExperienceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserExperience) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserExperience) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserExperienceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserExperienceQuery", q)
}

// The UserFamousQuotesFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFamousQuotesFunc func(context.Context, *ent.UserFamousQuotesQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFamousQuotesFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserFamousQuotesQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserFamousQuotesQuery", q)
}

// The TraverseUserFamousQuotes type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserFamousQuotes func(context.Context, *ent.UserFamousQuotesQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserFamousQuotes) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserFamousQuotes) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserFamousQuotesQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserFamousQuotesQuery", q)
}

// The UserProjectFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserProjectFunc func(context.Context, *ent.UserProjectQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserProjectFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserProjectQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserProjectQuery", q)
}

// The TraverseUserProject type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserProject func(context.Context, *ent.UserProjectQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserProject) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserProject) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserProjectQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserProjectQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.AccountQuery:
		return &query[*ent.AccountQuery, predicate.Account, account.OrderOption]{typ: ent.TypeAccount, tq: q}, nil
	case *ent.BlogsQuery:
		return &query[*ent.BlogsQuery, predicate.Blogs, blogs.OrderOption]{typ: ent.TypeBlogs, tq: q}, nil
	case *ent.BlogsCommentQuery:
		return &query[*ent.BlogsCommentQuery, predicate.BlogsComment, blogscomment.OrderOption]{typ: ent.TypeBlogsComment, tq: q}, nil
	case *ent.BlogsContentQuery:
		return &query[*ent.BlogsContentQuery, predicate.BlogsContent, blogscontent.OrderOption]{typ: ent.TypeBlogsContent, tq: q}, nil
	case *ent.BlogsExtendQuery:
		return &query[*ent.BlogsExtendQuery, predicate.BlogsExtend, blogsextend.OrderOption]{typ: ent.TypeBlogsExtend, tq: q}, nil
	case *ent.FilesQuery:
		return &query[*ent.FilesQuery, predicate.Files, files.OrderOption]{typ: ent.TypeFiles, tq: q}, nil
	case *ent.FilesExtendQuery:
		return &query[*ent.FilesExtendQuery, predicate.FilesExtend, filesextend.OrderOption]{typ: ent.TypeFilesExtend, tq: q}, nil
	case *ent.PalacesMemoQuery:
		return &query[*ent.PalacesMemoQuery, predicate.PalacesMemo, palacesmemo.OrderOption]{typ: ent.TypePalacesMemo, tq: q}, nil
	case *ent.PalacesMemoryQuery:
		return &query[*ent.PalacesMemoryQuery, predicate.PalacesMemory, palacesmemory.OrderOption]{typ: ent.TypePalacesMemory, tq: q}, nil
	case *ent.PalacesTodoQuery:
		return &query[*ent.PalacesTodoQuery, predicate.PalacesTodo, palacestodo.OrderOption]{typ: ent.TypePalacesTodo, tq: q}, nil
	case *ent.PalacesTodoDoneQuery:
		return &query[*ent.PalacesTodoDoneQuery, predicate.PalacesTodoDone, palacestododone.OrderOption]{typ: ent.TypePalacesTodoDone, tq: q}, nil
	case *ent.TagsQuery:
		return &query[*ent.TagsQuery, predicate.Tags, tags.OrderOption]{typ: ent.TypeTags, tq: q}, nil
	case *ent.TagsRelationQuery:
		return &query[*ent.TagsRelationQuery, predicate.TagsRelation, tagsrelation.OrderOption]{typ: ent.TypeTagsRelation, tq: q}, nil
	case *ent.TravelExtendsQuery:
		return &query[*ent.TravelExtendsQuery, predicate.TravelExtends, travelextends.OrderOption]{typ: ent.TypeTravelExtends, tq: q}, nil
	case *ent.TravelsQuery:
		return &query[*ent.TravelsQuery, predicate.Travels, travels.OrderOption]{typ: ent.TypeTravels, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	case *ent.UserExperienceQuery:
		return &query[*ent.UserExperienceQuery, predicate.UserExperience, userexperience.OrderOption]{typ: ent.TypeUserExperience, tq: q}, nil
	case *ent.UserFamousQuotesQuery:
		return &query[*ent.UserFamousQuotesQuery, predicate.UserFamousQuotes, userfamousquotes.OrderOption]{typ: ent.TypeUserFamousQuotes, tq: q}, nil
	case *ent.UserProjectQuery:
		return &query[*ent.UserProjectQuery, predicate.UserProject, userproject.OrderOption]{typ: ent.TypeUserProject, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
