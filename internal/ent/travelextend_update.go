// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/predicate"
	"blog/internal/ent/travel"
	"blog/internal/ent/travelextend"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TravelExtendUpdate is the builder for updating TravelExtend entities.
type TravelExtendUpdate struct {
	config
	hooks    []Hook
	mutation *TravelExtendMutation
}

// Where appends a list predicates to the TravelExtendUpdate builder.
func (teu *TravelExtendUpdate) Where(ps ...predicate.TravelExtend) *TravelExtendUpdate {
	teu.mutation.Where(ps...)
	return teu
}

// SetUpdatedAt sets the "updated_at" field.
func (teu *TravelExtendUpdate) SetUpdatedAt(i int64) *TravelExtendUpdate {
	teu.mutation.ResetUpdatedAt()
	teu.mutation.SetUpdatedAt(i)
	return teu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (teu *TravelExtendUpdate) AddUpdatedAt(i int64) *TravelExtendUpdate {
	teu.mutation.AddUpdatedAt(i)
	return teu
}

// SetUpdatedBy sets the "updated_by" field.
func (teu *TravelExtendUpdate) SetUpdatedBy(i int64) *TravelExtendUpdate {
	teu.mutation.ResetUpdatedBy()
	teu.mutation.SetUpdatedBy(i)
	return teu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (teu *TravelExtendUpdate) SetNillableUpdatedBy(i *int64) *TravelExtendUpdate {
	if i != nil {
		teu.SetUpdatedBy(*i)
	}
	return teu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (teu *TravelExtendUpdate) AddUpdatedBy(i int64) *TravelExtendUpdate {
	teu.mutation.AddUpdatedBy(i)
	return teu
}

// SetDeletedAt sets the "deleted_at" field.
func (teu *TravelExtendUpdate) SetDeletedAt(i int64) *TravelExtendUpdate {
	teu.mutation.ResetDeletedAt()
	teu.mutation.SetDeletedAt(i)
	return teu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (teu *TravelExtendUpdate) SetNillableDeletedAt(i *int64) *TravelExtendUpdate {
	if i != nil {
		teu.SetDeletedAt(*i)
	}
	return teu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (teu *TravelExtendUpdate) AddDeletedAt(i int64) *TravelExtendUpdate {
	teu.mutation.AddDeletedAt(i)
	return teu
}

// SetDeletedBy sets the "deleted_by" field.
func (teu *TravelExtendUpdate) SetDeletedBy(i int64) *TravelExtendUpdate {
	teu.mutation.ResetDeletedBy()
	teu.mutation.SetDeletedBy(i)
	return teu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (teu *TravelExtendUpdate) SetNillableDeletedBy(i *int64) *TravelExtendUpdate {
	if i != nil {
		teu.SetDeletedBy(*i)
	}
	return teu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (teu *TravelExtendUpdate) AddDeletedBy(i int64) *TravelExtendUpdate {
	teu.mutation.AddDeletedBy(i)
	return teu
}

// SetAccountID sets the "account_id" field.
func (teu *TravelExtendUpdate) SetAccountID(i int) *TravelExtendUpdate {
	teu.mutation.ResetAccountID()
	teu.mutation.SetAccountID(i)
	return teu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (teu *TravelExtendUpdate) SetNillableAccountID(i *int) *TravelExtendUpdate {
	if i != nil {
		teu.SetAccountID(*i)
	}
	return teu
}

// AddAccountID adds i to the "account_id" field.
func (teu *TravelExtendUpdate) AddAccountID(i int) *TravelExtendUpdate {
	teu.mutation.AddAccountID(i)
	return teu
}

// SetTravelID sets the "travel_id" field.
func (teu *TravelExtendUpdate) SetTravelID(i int) *TravelExtendUpdate {
	teu.mutation.ResetTravelID()
	teu.mutation.SetTravelID(i)
	return teu
}

// SetNillableTravelID sets the "travel_id" field if the given value is not nil.
func (teu *TravelExtendUpdate) SetNillableTravelID(i *int) *TravelExtendUpdate {
	if i != nil {
		teu.SetTravelID(*i)
	}
	return teu
}

// AddTravelID adds i to the "travel_id" field.
func (teu *TravelExtendUpdate) AddTravelID(i int) *TravelExtendUpdate {
	teu.mutation.AddTravelID(i)
	return teu
}

// SetIsThumb sets the "is_thumb" field.
func (teu *TravelExtendUpdate) SetIsThumb(b bool) *TravelExtendUpdate {
	teu.mutation.SetIsThumb(b)
	return teu
}

// SetNillableIsThumb sets the "is_thumb" field if the given value is not nil.
func (teu *TravelExtendUpdate) SetNillableIsThumb(b *bool) *TravelExtendUpdate {
	if b != nil {
		teu.SetIsThumb(*b)
	}
	return teu
}

// SetIsCollect sets the "is_collect" field.
func (teu *TravelExtendUpdate) SetIsCollect(b bool) *TravelExtendUpdate {
	teu.mutation.SetIsCollect(b)
	return teu
}

// SetNillableIsCollect sets the "is_collect" field if the given value is not nil.
func (teu *TravelExtendUpdate) SetNillableIsCollect(b *bool) *TravelExtendUpdate {
	if b != nil {
		teu.SetIsCollect(*b)
	}
	return teu
}

// SetTravelID sets the "travel" edge to the Travel entity by ID.
func (teu *TravelExtendUpdate) SetTravelID(id int) *TravelExtendUpdate {
	teu.mutation.SetTravelID(id)
	return teu
}

// SetNillableTravelID sets the "travel" edge to the Travel entity by ID if the given value is not nil.
func (teu *TravelExtendUpdate) SetNillableTravelID(id *int) *TravelExtendUpdate {
	if id != nil {
		teu = teu.SetTravelID(*id)
	}
	return teu
}

// SetTravel sets the "travel" edge to the Travel entity.
func (teu *TravelExtendUpdate) SetTravel(t *Travel) *TravelExtendUpdate {
	return teu.SetTravelID(t.ID)
}

// Mutation returns the TravelExtendMutation object of the builder.
func (teu *TravelExtendUpdate) Mutation() *TravelExtendMutation {
	return teu.mutation
}

// ClearTravel clears the "travel" edge to the Travel entity.
func (teu *TravelExtendUpdate) ClearTravel() *TravelExtendUpdate {
	teu.mutation.ClearTravel()
	return teu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (teu *TravelExtendUpdate) Save(ctx context.Context) (int, error) {
	if err := teu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, teu.sqlSave, teu.mutation, teu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (teu *TravelExtendUpdate) SaveX(ctx context.Context) int {
	affected, err := teu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (teu *TravelExtendUpdate) Exec(ctx context.Context) error {
	_, err := teu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teu *TravelExtendUpdate) ExecX(ctx context.Context) {
	if err := teu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teu *TravelExtendUpdate) defaults() error {
	if _, ok := teu.mutation.UpdatedAt(); !ok {
		if travelextend.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized travelextend.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := travelextend.UpdateDefaultUpdatedAt()
		teu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (teu *TravelExtendUpdate) check() error {
	if v, ok := teu.mutation.AccountID(); ok {
		if err := travelextend.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "TravelExtend.account_id": %w`, err)}
		}
	}
	return nil
}

func (teu *TravelExtendUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := teu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(travelextend.Table, travelextend.Columns, sqlgraph.NewFieldSpec(travelextend.FieldID, field.TypeInt))
	if ps := teu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teu.mutation.UpdatedAt(); ok {
		_spec.SetField(travelextend.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := teu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(travelextend.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := teu.mutation.UpdatedBy(); ok {
		_spec.SetField(travelextend.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := teu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(travelextend.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := teu.mutation.DeletedAt(); ok {
		_spec.SetField(travelextend.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := teu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(travelextend.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := teu.mutation.DeletedBy(); ok {
		_spec.SetField(travelextend.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := teu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(travelextend.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := teu.mutation.AccountID(); ok {
		_spec.SetField(travelextend.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := teu.mutation.AddedAccountID(); ok {
		_spec.AddField(travelextend.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := teu.mutation.TravelID(); ok {
		_spec.SetField(travelextend.FieldTravelID, field.TypeInt, value)
	}
	if value, ok := teu.mutation.AddedTravelID(); ok {
		_spec.AddField(travelextend.FieldTravelID, field.TypeInt, value)
	}
	if value, ok := teu.mutation.IsThumb(); ok {
		_spec.SetField(travelextend.FieldIsThumb, field.TypeBool, value)
	}
	if value, ok := teu.mutation.IsCollect(); ok {
		_spec.SetField(travelextend.FieldIsCollect, field.TypeBool, value)
	}
	if teu.mutation.TravelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   travelextend.TravelTable,
			Columns: []string{travelextend.TravelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teu.mutation.TravelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   travelextend.TravelTable,
			Columns: []string{travelextend.TravelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, teu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{travelextend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	teu.mutation.done = true
	return n, nil
}

// TravelExtendUpdateOne is the builder for updating a single TravelExtend entity.
type TravelExtendUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TravelExtendMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (teuo *TravelExtendUpdateOne) SetUpdatedAt(i int64) *TravelExtendUpdateOne {
	teuo.mutation.ResetUpdatedAt()
	teuo.mutation.SetUpdatedAt(i)
	return teuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (teuo *TravelExtendUpdateOne) AddUpdatedAt(i int64) *TravelExtendUpdateOne {
	teuo.mutation.AddUpdatedAt(i)
	return teuo
}

// SetUpdatedBy sets the "updated_by" field.
func (teuo *TravelExtendUpdateOne) SetUpdatedBy(i int64) *TravelExtendUpdateOne {
	teuo.mutation.ResetUpdatedBy()
	teuo.mutation.SetUpdatedBy(i)
	return teuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (teuo *TravelExtendUpdateOne) SetNillableUpdatedBy(i *int64) *TravelExtendUpdateOne {
	if i != nil {
		teuo.SetUpdatedBy(*i)
	}
	return teuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (teuo *TravelExtendUpdateOne) AddUpdatedBy(i int64) *TravelExtendUpdateOne {
	teuo.mutation.AddUpdatedBy(i)
	return teuo
}

// SetDeletedAt sets the "deleted_at" field.
func (teuo *TravelExtendUpdateOne) SetDeletedAt(i int64) *TravelExtendUpdateOne {
	teuo.mutation.ResetDeletedAt()
	teuo.mutation.SetDeletedAt(i)
	return teuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (teuo *TravelExtendUpdateOne) SetNillableDeletedAt(i *int64) *TravelExtendUpdateOne {
	if i != nil {
		teuo.SetDeletedAt(*i)
	}
	return teuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (teuo *TravelExtendUpdateOne) AddDeletedAt(i int64) *TravelExtendUpdateOne {
	teuo.mutation.AddDeletedAt(i)
	return teuo
}

// SetDeletedBy sets the "deleted_by" field.
func (teuo *TravelExtendUpdateOne) SetDeletedBy(i int64) *TravelExtendUpdateOne {
	teuo.mutation.ResetDeletedBy()
	teuo.mutation.SetDeletedBy(i)
	return teuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (teuo *TravelExtendUpdateOne) SetNillableDeletedBy(i *int64) *TravelExtendUpdateOne {
	if i != nil {
		teuo.SetDeletedBy(*i)
	}
	return teuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (teuo *TravelExtendUpdateOne) AddDeletedBy(i int64) *TravelExtendUpdateOne {
	teuo.mutation.AddDeletedBy(i)
	return teuo
}

// SetAccountID sets the "account_id" field.
func (teuo *TravelExtendUpdateOne) SetAccountID(i int) *TravelExtendUpdateOne {
	teuo.mutation.ResetAccountID()
	teuo.mutation.SetAccountID(i)
	return teuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (teuo *TravelExtendUpdateOne) SetNillableAccountID(i *int) *TravelExtendUpdateOne {
	if i != nil {
		teuo.SetAccountID(*i)
	}
	return teuo
}

// AddAccountID adds i to the "account_id" field.
func (teuo *TravelExtendUpdateOne) AddAccountID(i int) *TravelExtendUpdateOne {
	teuo.mutation.AddAccountID(i)
	return teuo
}

// SetTravelID sets the "travel_id" field.
func (teuo *TravelExtendUpdateOne) SetTravelID(i int) *TravelExtendUpdateOne {
	teuo.mutation.ResetTravelID()
	teuo.mutation.SetTravelID(i)
	return teuo
}

// SetNillableTravelID sets the "travel_id" field if the given value is not nil.
func (teuo *TravelExtendUpdateOne) SetNillableTravelID(i *int) *TravelExtendUpdateOne {
	if i != nil {
		teuo.SetTravelID(*i)
	}
	return teuo
}

// AddTravelID adds i to the "travel_id" field.
func (teuo *TravelExtendUpdateOne) AddTravelID(i int) *TravelExtendUpdateOne {
	teuo.mutation.AddTravelID(i)
	return teuo
}

// SetIsThumb sets the "is_thumb" field.
func (teuo *TravelExtendUpdateOne) SetIsThumb(b bool) *TravelExtendUpdateOne {
	teuo.mutation.SetIsThumb(b)
	return teuo
}

// SetNillableIsThumb sets the "is_thumb" field if the given value is not nil.
func (teuo *TravelExtendUpdateOne) SetNillableIsThumb(b *bool) *TravelExtendUpdateOne {
	if b != nil {
		teuo.SetIsThumb(*b)
	}
	return teuo
}

// SetIsCollect sets the "is_collect" field.
func (teuo *TravelExtendUpdateOne) SetIsCollect(b bool) *TravelExtendUpdateOne {
	teuo.mutation.SetIsCollect(b)
	return teuo
}

// SetNillableIsCollect sets the "is_collect" field if the given value is not nil.
func (teuo *TravelExtendUpdateOne) SetNillableIsCollect(b *bool) *TravelExtendUpdateOne {
	if b != nil {
		teuo.SetIsCollect(*b)
	}
	return teuo
}

// SetTravelID sets the "travel" edge to the Travel entity by ID.
func (teuo *TravelExtendUpdateOne) SetTravelID(id int) *TravelExtendUpdateOne {
	teuo.mutation.SetTravelID(id)
	return teuo
}

// SetNillableTravelID sets the "travel" edge to the Travel entity by ID if the given value is not nil.
func (teuo *TravelExtendUpdateOne) SetNillableTravelID(id *int) *TravelExtendUpdateOne {
	if id != nil {
		teuo = teuo.SetTravelID(*id)
	}
	return teuo
}

// SetTravel sets the "travel" edge to the Travel entity.
func (teuo *TravelExtendUpdateOne) SetTravel(t *Travel) *TravelExtendUpdateOne {
	return teuo.SetTravelID(t.ID)
}

// Mutation returns the TravelExtendMutation object of the builder.
func (teuo *TravelExtendUpdateOne) Mutation() *TravelExtendMutation {
	return teuo.mutation
}

// ClearTravel clears the "travel" edge to the Travel entity.
func (teuo *TravelExtendUpdateOne) ClearTravel() *TravelExtendUpdateOne {
	teuo.mutation.ClearTravel()
	return teuo
}

// Where appends a list predicates to the TravelExtendUpdate builder.
func (teuo *TravelExtendUpdateOne) Where(ps ...predicate.TravelExtend) *TravelExtendUpdateOne {
	teuo.mutation.Where(ps...)
	return teuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (teuo *TravelExtendUpdateOne) Select(field string, fields ...string) *TravelExtendUpdateOne {
	teuo.fields = append([]string{field}, fields...)
	return teuo
}

// Save executes the query and returns the updated TravelExtend entity.
func (teuo *TravelExtendUpdateOne) Save(ctx context.Context) (*TravelExtend, error) {
	if err := teuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, teuo.sqlSave, teuo.mutation, teuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (teuo *TravelExtendUpdateOne) SaveX(ctx context.Context) *TravelExtend {
	node, err := teuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (teuo *TravelExtendUpdateOne) Exec(ctx context.Context) error {
	_, err := teuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teuo *TravelExtendUpdateOne) ExecX(ctx context.Context) {
	if err := teuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teuo *TravelExtendUpdateOne) defaults() error {
	if _, ok := teuo.mutation.UpdatedAt(); !ok {
		if travelextend.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized travelextend.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := travelextend.UpdateDefaultUpdatedAt()
		teuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (teuo *TravelExtendUpdateOne) check() error {
	if v, ok := teuo.mutation.AccountID(); ok {
		if err := travelextend.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "TravelExtend.account_id": %w`, err)}
		}
	}
	return nil
}

func (teuo *TravelExtendUpdateOne) sqlSave(ctx context.Context) (_node *TravelExtend, err error) {
	if err := teuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(travelextend.Table, travelextend.Columns, sqlgraph.NewFieldSpec(travelextend.FieldID, field.TypeInt))
	id, ok := teuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TravelExtend.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := teuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, travelextend.FieldID)
		for _, f := range fields {
			if !travelextend.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != travelextend.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := teuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teuo.mutation.UpdatedAt(); ok {
		_spec.SetField(travelextend.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := teuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(travelextend.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := teuo.mutation.UpdatedBy(); ok {
		_spec.SetField(travelextend.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := teuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(travelextend.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := teuo.mutation.DeletedAt(); ok {
		_spec.SetField(travelextend.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := teuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(travelextend.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := teuo.mutation.DeletedBy(); ok {
		_spec.SetField(travelextend.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := teuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(travelextend.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := teuo.mutation.AccountID(); ok {
		_spec.SetField(travelextend.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := teuo.mutation.AddedAccountID(); ok {
		_spec.AddField(travelextend.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := teuo.mutation.TravelID(); ok {
		_spec.SetField(travelextend.FieldTravelID, field.TypeInt, value)
	}
	if value, ok := teuo.mutation.AddedTravelID(); ok {
		_spec.AddField(travelextend.FieldTravelID, field.TypeInt, value)
	}
	if value, ok := teuo.mutation.IsThumb(); ok {
		_spec.SetField(travelextend.FieldIsThumb, field.TypeBool, value)
	}
	if value, ok := teuo.mutation.IsCollect(); ok {
		_spec.SetField(travelextend.FieldIsCollect, field.TypeBool, value)
	}
	if teuo.mutation.TravelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   travelextend.TravelTable,
			Columns: []string{travelextend.TravelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teuo.mutation.TravelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   travelextend.TravelTable,
			Columns: []string{travelextend.TravelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(travel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TravelExtend{config: teuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, teuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{travelextend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	teuo.mutation.done = true
	return _node, nil
}
