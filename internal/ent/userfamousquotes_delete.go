// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/predicate"
	"blog/internal/ent/userfamousquotes"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserFamousQuotesDelete is the builder for deleting a UserFamousQuotes entity.
type UserFamousQuotesDelete struct {
	config
	hooks    []Hook
	mutation *UserFamousQuotesMutation
}

// Where appends a list predicates to the UserFamousQuotesDelete builder.
func (ufqd *UserFamousQuotesDelete) Where(ps ...predicate.UserFamousQuotes) *UserFamousQuotesDelete {
	ufqd.mutation.Where(ps...)
	return ufqd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ufqd *UserFamousQuotesDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ufqd.sqlExec, ufqd.mutation, ufqd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ufqd *UserFamousQuotesDelete) ExecX(ctx context.Context) int {
	n, err := ufqd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ufqd *UserFamousQuotesDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userfamousquotes.Table, sqlgraph.NewFieldSpec(userfamousquotes.FieldID, field.TypeInt))
	if ps := ufqd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ufqd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ufqd.mutation.done = true
	return affected, err
}

// UserFamousQuotesDeleteOne is the builder for deleting a single UserFamousQuotes entity.
type UserFamousQuotesDeleteOne struct {
	ufqd *UserFamousQuotesDelete
}

// Where appends a list predicates to the UserFamousQuotesDelete builder.
func (ufqdo *UserFamousQuotesDeleteOne) Where(ps ...predicate.UserFamousQuotes) *UserFamousQuotesDeleteOne {
	ufqdo.ufqd.mutation.Where(ps...)
	return ufqdo
}

// Exec executes the deletion query.
func (ufqdo *UserFamousQuotesDeleteOne) Exec(ctx context.Context) error {
	n, err := ufqdo.ufqd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userfamousquotes.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ufqdo *UserFamousQuotesDeleteOne) ExecX(ctx context.Context) {
	if err := ufqdo.Exec(ctx); err != nil {
		panic(err)
	}
}
