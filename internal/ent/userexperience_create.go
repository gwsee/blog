// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/userexperience"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserExperienceCreate is the builder for creating a UserExperience entity.
type UserExperienceCreate struct {
	config
	mutation *UserExperienceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (uec *UserExperienceCreate) SetCreatedAt(i int64) *UserExperienceCreate {
	uec.mutation.SetCreatedAt(i)
	return uec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uec *UserExperienceCreate) SetNillableCreatedAt(i *int64) *UserExperienceCreate {
	if i != nil {
		uec.SetCreatedAt(*i)
	}
	return uec
}

// SetCreatedBy sets the "created_by" field.
func (uec *UserExperienceCreate) SetCreatedBy(i int64) *UserExperienceCreate {
	uec.mutation.SetCreatedBy(i)
	return uec
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (uec *UserExperienceCreate) SetNillableCreatedBy(i *int64) *UserExperienceCreate {
	if i != nil {
		uec.SetCreatedBy(*i)
	}
	return uec
}

// SetUpdatedAt sets the "updated_at" field.
func (uec *UserExperienceCreate) SetUpdatedAt(i int64) *UserExperienceCreate {
	uec.mutation.SetUpdatedAt(i)
	return uec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uec *UserExperienceCreate) SetNillableUpdatedAt(i *int64) *UserExperienceCreate {
	if i != nil {
		uec.SetUpdatedAt(*i)
	}
	return uec
}

// SetUpdatedBy sets the "updated_by" field.
func (uec *UserExperienceCreate) SetUpdatedBy(i int64) *UserExperienceCreate {
	uec.mutation.SetUpdatedBy(i)
	return uec
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uec *UserExperienceCreate) SetNillableUpdatedBy(i *int64) *UserExperienceCreate {
	if i != nil {
		uec.SetUpdatedBy(*i)
	}
	return uec
}

// SetDeletedAt sets the "deleted_at" field.
func (uec *UserExperienceCreate) SetDeletedAt(i int64) *UserExperienceCreate {
	uec.mutation.SetDeletedAt(i)
	return uec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uec *UserExperienceCreate) SetNillableDeletedAt(i *int64) *UserExperienceCreate {
	if i != nil {
		uec.SetDeletedAt(*i)
	}
	return uec
}

// SetDeletedBy sets the "deleted_by" field.
func (uec *UserExperienceCreate) SetDeletedBy(i int64) *UserExperienceCreate {
	uec.mutation.SetDeletedBy(i)
	return uec
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uec *UserExperienceCreate) SetNillableDeletedBy(i *int64) *UserExperienceCreate {
	if i != nil {
		uec.SetDeletedBy(*i)
	}
	return uec
}

// SetUserID sets the "user_id" field.
func (uec *UserExperienceCreate) SetUserID(i int) *UserExperienceCreate {
	uec.mutation.SetUserID(i)
	return uec
}

// SetCompany sets the "company" field.
func (uec *UserExperienceCreate) SetCompany(s string) *UserExperienceCreate {
	uec.mutation.SetCompany(s)
	return uec
}

// SetRole sets the "role" field.
func (uec *UserExperienceCreate) SetRole(s string) *UserExperienceCreate {
	uec.mutation.SetRole(s)
	return uec
}

// SetLocation sets the "location" field.
func (uec *UserExperienceCreate) SetLocation(s string) *UserExperienceCreate {
	uec.mutation.SetLocation(s)
	return uec
}

// SetStart sets the "start" field.
func (uec *UserExperienceCreate) SetStart(i int64) *UserExperienceCreate {
	uec.mutation.SetStart(i)
	return uec
}

// SetEnd sets the "end" field.
func (uec *UserExperienceCreate) SetEnd(i int64) *UserExperienceCreate {
	uec.mutation.SetEnd(i)
	return uec
}

// SetDescription sets the "description" field.
func (uec *UserExperienceCreate) SetDescription(s string) *UserExperienceCreate {
	uec.mutation.SetDescription(s)
	return uec
}

// SetResponsibilities sets the "responsibilities" field.
func (uec *UserExperienceCreate) SetResponsibilities(s string) *UserExperienceCreate {
	uec.mutation.SetResponsibilities(s)
	return uec
}

// SetAchievements sets the "achievements" field.
func (uec *UserExperienceCreate) SetAchievements(s string) *UserExperienceCreate {
	uec.mutation.SetAchievements(s)
	return uec
}

// SetSkills sets the "skills" field.
func (uec *UserExperienceCreate) SetSkills(s []string) *UserExperienceCreate {
	uec.mutation.SetSkills(s)
	return uec
}

// SetID sets the "id" field.
func (uec *UserExperienceCreate) SetID(i int) *UserExperienceCreate {
	uec.mutation.SetID(i)
	return uec
}

// Mutation returns the UserExperienceMutation object of the builder.
func (uec *UserExperienceCreate) Mutation() *UserExperienceMutation {
	return uec.mutation
}

// Save creates the UserExperience in the database.
func (uec *UserExperienceCreate) Save(ctx context.Context) (*UserExperience, error) {
	if err := uec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uec.sqlSave, uec.mutation, uec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uec *UserExperienceCreate) SaveX(ctx context.Context) *UserExperience {
	v, err := uec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uec *UserExperienceCreate) Exec(ctx context.Context) error {
	_, err := uec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uec *UserExperienceCreate) ExecX(ctx context.Context) {
	if err := uec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uec *UserExperienceCreate) defaults() error {
	if _, ok := uec.mutation.CreatedAt(); !ok {
		v := userexperience.DefaultCreatedAt
		uec.mutation.SetCreatedAt(v)
	}
	if _, ok := uec.mutation.CreatedBy(); !ok {
		v := userexperience.DefaultCreatedBy
		uec.mutation.SetCreatedBy(v)
	}
	if _, ok := uec.mutation.UpdatedAt(); !ok {
		v := userexperience.DefaultUpdatedAt
		uec.mutation.SetUpdatedAt(v)
	}
	if _, ok := uec.mutation.UpdatedBy(); !ok {
		v := userexperience.DefaultUpdatedBy
		uec.mutation.SetUpdatedBy(v)
	}
	if _, ok := uec.mutation.DeletedAt(); !ok {
		v := userexperience.DefaultDeletedAt
		uec.mutation.SetDeletedAt(v)
	}
	if _, ok := uec.mutation.DeletedBy(); !ok {
		v := userexperience.DefaultDeletedBy
		uec.mutation.SetDeletedBy(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uec *UserExperienceCreate) check() error {
	if _, ok := uec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserExperience.created_at"`)}
	}
	if _, ok := uec.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "UserExperience.created_by"`)}
	}
	if _, ok := uec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserExperience.updated_at"`)}
	}
	if _, ok := uec.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "UserExperience.updated_by"`)}
	}
	if _, ok := uec.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "UserExperience.deleted_at"`)}
	}
	if _, ok := uec.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "UserExperience.deleted_by"`)}
	}
	if _, ok := uec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserExperience.user_id"`)}
	}
	if _, ok := uec.mutation.Company(); !ok {
		return &ValidationError{Name: "company", err: errors.New(`ent: missing required field "UserExperience.company"`)}
	}
	if _, ok := uec.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "UserExperience.role"`)}
	}
	if _, ok := uec.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "UserExperience.location"`)}
	}
	if _, ok := uec.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "UserExperience.start"`)}
	}
	if _, ok := uec.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "UserExperience.end"`)}
	}
	if _, ok := uec.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "UserExperience.description"`)}
	}
	if _, ok := uec.mutation.Responsibilities(); !ok {
		return &ValidationError{Name: "responsibilities", err: errors.New(`ent: missing required field "UserExperience.responsibilities"`)}
	}
	if _, ok := uec.mutation.Achievements(); !ok {
		return &ValidationError{Name: "achievements", err: errors.New(`ent: missing required field "UserExperience.achievements"`)}
	}
	if _, ok := uec.mutation.Skills(); !ok {
		return &ValidationError{Name: "skills", err: errors.New(`ent: missing required field "UserExperience.skills"`)}
	}
	if v, ok := uec.mutation.ID(); ok {
		if err := userexperience.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "UserExperience.id": %w`, err)}
		}
	}
	return nil
}

func (uec *UserExperienceCreate) sqlSave(ctx context.Context) (*UserExperience, error) {
	if err := uec.check(); err != nil {
		return nil, err
	}
	_node, _spec := uec.createSpec()
	if err := sqlgraph.CreateNode(ctx, uec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	uec.mutation.id = &_node.ID
	uec.mutation.done = true
	return _node, nil
}

func (uec *UserExperienceCreate) createSpec() (*UserExperience, *sqlgraph.CreateSpec) {
	var (
		_node = &UserExperience{config: uec.config}
		_spec = sqlgraph.NewCreateSpec(userexperience.Table, sqlgraph.NewFieldSpec(userexperience.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uec.conflict
	if id, ok := uec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uec.mutation.CreatedAt(); ok {
		_spec.SetField(userexperience.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := uec.mutation.CreatedBy(); ok {
		_spec.SetField(userexperience.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := uec.mutation.UpdatedAt(); ok {
		_spec.SetField(userexperience.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := uec.mutation.UpdatedBy(); ok {
		_spec.SetField(userexperience.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := uec.mutation.DeletedAt(); ok {
		_spec.SetField(userexperience.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := uec.mutation.DeletedBy(); ok {
		_spec.SetField(userexperience.FieldDeletedBy, field.TypeInt64, value)
		_node.DeletedBy = value
	}
	if value, ok := uec.mutation.UserID(); ok {
		_spec.SetField(userexperience.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := uec.mutation.Company(); ok {
		_spec.SetField(userexperience.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := uec.mutation.Role(); ok {
		_spec.SetField(userexperience.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	if value, ok := uec.mutation.Location(); ok {
		_spec.SetField(userexperience.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := uec.mutation.Start(); ok {
		_spec.SetField(userexperience.FieldStart, field.TypeInt64, value)
		_node.Start = value
	}
	if value, ok := uec.mutation.End(); ok {
		_spec.SetField(userexperience.FieldEnd, field.TypeInt64, value)
		_node.End = value
	}
	if value, ok := uec.mutation.Description(); ok {
		_spec.SetField(userexperience.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := uec.mutation.Responsibilities(); ok {
		_spec.SetField(userexperience.FieldResponsibilities, field.TypeString, value)
		_node.Responsibilities = value
	}
	if value, ok := uec.mutation.Achievements(); ok {
		_spec.SetField(userexperience.FieldAchievements, field.TypeString, value)
		_node.Achievements = value
	}
	if value, ok := uec.mutation.Skills(); ok {
		_spec.SetField(userexperience.FieldSkills, field.TypeJSON, value)
		_node.Skills = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserExperience.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserExperienceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (uec *UserExperienceCreate) OnConflict(opts ...sql.ConflictOption) *UserExperienceUpsertOne {
	uec.conflict = opts
	return &UserExperienceUpsertOne{
		create: uec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserExperience.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uec *UserExperienceCreate) OnConflictColumns(columns ...string) *UserExperienceUpsertOne {
	uec.conflict = append(uec.conflict, sql.ConflictColumns(columns...))
	return &UserExperienceUpsertOne{
		create: uec,
	}
}

type (
	// UserExperienceUpsertOne is the builder for "upsert"-ing
	//  one UserExperience node.
	UserExperienceUpsertOne struct {
		create *UserExperienceCreate
	}

	// UserExperienceUpsert is the "OnConflict" setter.
	UserExperienceUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserExperienceUpsert) SetUpdatedAt(v int64) *UserExperienceUpsert {
	u.Set(userexperience.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserExperienceUpsert) UpdateUpdatedAt() *UserExperienceUpsert {
	u.SetExcluded(userexperience.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserExperienceUpsert) AddUpdatedAt(v int64) *UserExperienceUpsert {
	u.Add(userexperience.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserExperienceUpsert) SetUpdatedBy(v int64) *UserExperienceUpsert {
	u.Set(userexperience.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserExperienceUpsert) UpdateUpdatedBy() *UserExperienceUpsert {
	u.SetExcluded(userexperience.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserExperienceUpsert) AddUpdatedBy(v int64) *UserExperienceUpsert {
	u.Add(userexperience.FieldUpdatedBy, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserExperienceUpsert) SetDeletedAt(v int64) *UserExperienceUpsert {
	u.Set(userexperience.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserExperienceUpsert) UpdateDeletedAt() *UserExperienceUpsert {
	u.SetExcluded(userexperience.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UserExperienceUpsert) AddDeletedAt(v int64) *UserExperienceUpsert {
	u.Add(userexperience.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *UserExperienceUpsert) SetDeletedBy(v int64) *UserExperienceUpsert {
	u.Set(userexperience.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *UserExperienceUpsert) UpdateDeletedBy() *UserExperienceUpsert {
	u.SetExcluded(userexperience.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *UserExperienceUpsert) AddDeletedBy(v int64) *UserExperienceUpsert {
	u.Add(userexperience.FieldDeletedBy, v)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserExperienceUpsert) SetUserID(v int) *UserExperienceUpsert {
	u.Set(userexperience.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserExperienceUpsert) UpdateUserID() *UserExperienceUpsert {
	u.SetExcluded(userexperience.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *UserExperienceUpsert) AddUserID(v int) *UserExperienceUpsert {
	u.Add(userexperience.FieldUserID, v)
	return u
}

// SetCompany sets the "company" field.
func (u *UserExperienceUpsert) SetCompany(v string) *UserExperienceUpsert {
	u.Set(userexperience.FieldCompany, v)
	return u
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *UserExperienceUpsert) UpdateCompany() *UserExperienceUpsert {
	u.SetExcluded(userexperience.FieldCompany)
	return u
}

// SetRole sets the "role" field.
func (u *UserExperienceUpsert) SetRole(v string) *UserExperienceUpsert {
	u.Set(userexperience.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserExperienceUpsert) UpdateRole() *UserExperienceUpsert {
	u.SetExcluded(userexperience.FieldRole)
	return u
}

// SetLocation sets the "location" field.
func (u *UserExperienceUpsert) SetLocation(v string) *UserExperienceUpsert {
	u.Set(userexperience.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *UserExperienceUpsert) UpdateLocation() *UserExperienceUpsert {
	u.SetExcluded(userexperience.FieldLocation)
	return u
}

// SetStart sets the "start" field.
func (u *UserExperienceUpsert) SetStart(v int64) *UserExperienceUpsert {
	u.Set(userexperience.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *UserExperienceUpsert) UpdateStart() *UserExperienceUpsert {
	u.SetExcluded(userexperience.FieldStart)
	return u
}

// AddStart adds v to the "start" field.
func (u *UserExperienceUpsert) AddStart(v int64) *UserExperienceUpsert {
	u.Add(userexperience.FieldStart, v)
	return u
}

// SetEnd sets the "end" field.
func (u *UserExperienceUpsert) SetEnd(v int64) *UserExperienceUpsert {
	u.Set(userexperience.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *UserExperienceUpsert) UpdateEnd() *UserExperienceUpsert {
	u.SetExcluded(userexperience.FieldEnd)
	return u
}

// AddEnd adds v to the "end" field.
func (u *UserExperienceUpsert) AddEnd(v int64) *UserExperienceUpsert {
	u.Add(userexperience.FieldEnd, v)
	return u
}

// SetDescription sets the "description" field.
func (u *UserExperienceUpsert) SetDescription(v string) *UserExperienceUpsert {
	u.Set(userexperience.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UserExperienceUpsert) UpdateDescription() *UserExperienceUpsert {
	u.SetExcluded(userexperience.FieldDescription)
	return u
}

// SetResponsibilities sets the "responsibilities" field.
func (u *UserExperienceUpsert) SetResponsibilities(v string) *UserExperienceUpsert {
	u.Set(userexperience.FieldResponsibilities, v)
	return u
}

// UpdateResponsibilities sets the "responsibilities" field to the value that was provided on create.
func (u *UserExperienceUpsert) UpdateResponsibilities() *UserExperienceUpsert {
	u.SetExcluded(userexperience.FieldResponsibilities)
	return u
}

// SetAchievements sets the "achievements" field.
func (u *UserExperienceUpsert) SetAchievements(v string) *UserExperienceUpsert {
	u.Set(userexperience.FieldAchievements, v)
	return u
}

// UpdateAchievements sets the "achievements" field to the value that was provided on create.
func (u *UserExperienceUpsert) UpdateAchievements() *UserExperienceUpsert {
	u.SetExcluded(userexperience.FieldAchievements)
	return u
}

// SetSkills sets the "skills" field.
func (u *UserExperienceUpsert) SetSkills(v []string) *UserExperienceUpsert {
	u.Set(userexperience.FieldSkills, v)
	return u
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *UserExperienceUpsert) UpdateSkills() *UserExperienceUpsert {
	u.SetExcluded(userexperience.FieldSkills)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserExperience.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userexperience.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserExperienceUpsertOne) UpdateNewValues() *UserExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userexperience.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(userexperience.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(userexperience.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserExperience.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserExperienceUpsertOne) Ignore() *UserExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserExperienceUpsertOne) DoNothing() *UserExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserExperienceCreate.OnConflict
// documentation for more info.
func (u *UserExperienceUpsertOne) Update(set func(*UserExperienceUpsert)) *UserExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserExperienceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserExperienceUpsertOne) SetUpdatedAt(v int64) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserExperienceUpsertOne) AddUpdatedAt(v int64) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserExperienceUpsertOne) UpdateUpdatedAt() *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserExperienceUpsertOne) SetUpdatedBy(v int64) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserExperienceUpsertOne) AddUpdatedBy(v int64) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserExperienceUpsertOne) UpdateUpdatedBy() *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserExperienceUpsertOne) SetDeletedAt(v int64) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UserExperienceUpsertOne) AddDeletedAt(v int64) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserExperienceUpsertOne) UpdateDeletedAt() *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *UserExperienceUpsertOne) SetDeletedBy(v int64) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *UserExperienceUpsertOne) AddDeletedBy(v int64) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *UserExperienceUpsertOne) UpdateDeletedBy() *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserExperienceUpsertOne) SetUserID(v int) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *UserExperienceUpsertOne) AddUserID(v int) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserExperienceUpsertOne) UpdateUserID() *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateUserID()
	})
}

// SetCompany sets the "company" field.
func (u *UserExperienceUpsertOne) SetCompany(v string) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *UserExperienceUpsertOne) UpdateCompany() *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateCompany()
	})
}

// SetRole sets the "role" field.
func (u *UserExperienceUpsertOne) SetRole(v string) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserExperienceUpsertOne) UpdateRole() *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateRole()
	})
}

// SetLocation sets the "location" field.
func (u *UserExperienceUpsertOne) SetLocation(v string) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *UserExperienceUpsertOne) UpdateLocation() *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateLocation()
	})
}

// SetStart sets the "start" field.
func (u *UserExperienceUpsertOne) SetStart(v int64) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *UserExperienceUpsertOne) AddStart(v int64) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *UserExperienceUpsertOne) UpdateStart() *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *UserExperienceUpsertOne) SetEnd(v int64) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *UserExperienceUpsertOne) AddEnd(v int64) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *UserExperienceUpsertOne) UpdateEnd() *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateEnd()
	})
}

// SetDescription sets the "description" field.
func (u *UserExperienceUpsertOne) SetDescription(v string) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UserExperienceUpsertOne) UpdateDescription() *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateDescription()
	})
}

// SetResponsibilities sets the "responsibilities" field.
func (u *UserExperienceUpsertOne) SetResponsibilities(v string) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetResponsibilities(v)
	})
}

// UpdateResponsibilities sets the "responsibilities" field to the value that was provided on create.
func (u *UserExperienceUpsertOne) UpdateResponsibilities() *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateResponsibilities()
	})
}

// SetAchievements sets the "achievements" field.
func (u *UserExperienceUpsertOne) SetAchievements(v string) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetAchievements(v)
	})
}

// UpdateAchievements sets the "achievements" field to the value that was provided on create.
func (u *UserExperienceUpsertOne) UpdateAchievements() *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateAchievements()
	})
}

// SetSkills sets the "skills" field.
func (u *UserExperienceUpsertOne) SetSkills(v []string) *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetSkills(v)
	})
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *UserExperienceUpsertOne) UpdateSkills() *UserExperienceUpsertOne {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateSkills()
	})
}

// Exec executes the query.
func (u *UserExperienceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserExperienceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserExperienceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserExperienceUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserExperienceUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserExperienceCreateBulk is the builder for creating many UserExperience entities in bulk.
type UserExperienceCreateBulk struct {
	config
	err      error
	builders []*UserExperienceCreate
	conflict []sql.ConflictOption
}

// Save creates the UserExperience entities in the database.
func (uecb *UserExperienceCreateBulk) Save(ctx context.Context) ([]*UserExperience, error) {
	if uecb.err != nil {
		return nil, uecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uecb.builders))
	nodes := make([]*UserExperience, len(uecb.builders))
	mutators := make([]Mutator, len(uecb.builders))
	for i := range uecb.builders {
		func(i int, root context.Context) {
			builder := uecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserExperienceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uecb *UserExperienceCreateBulk) SaveX(ctx context.Context) []*UserExperience {
	v, err := uecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uecb *UserExperienceCreateBulk) Exec(ctx context.Context) error {
	_, err := uecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uecb *UserExperienceCreateBulk) ExecX(ctx context.Context) {
	if err := uecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserExperience.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserExperienceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (uecb *UserExperienceCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserExperienceUpsertBulk {
	uecb.conflict = opts
	return &UserExperienceUpsertBulk{
		create: uecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserExperience.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uecb *UserExperienceCreateBulk) OnConflictColumns(columns ...string) *UserExperienceUpsertBulk {
	uecb.conflict = append(uecb.conflict, sql.ConflictColumns(columns...))
	return &UserExperienceUpsertBulk{
		create: uecb,
	}
}

// UserExperienceUpsertBulk is the builder for "upsert"-ing
// a bulk of UserExperience nodes.
type UserExperienceUpsertBulk struct {
	create *UserExperienceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserExperience.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userexperience.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserExperienceUpsertBulk) UpdateNewValues() *UserExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userexperience.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(userexperience.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(userexperience.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserExperience.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserExperienceUpsertBulk) Ignore() *UserExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserExperienceUpsertBulk) DoNothing() *UserExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserExperienceCreateBulk.OnConflict
// documentation for more info.
func (u *UserExperienceUpsertBulk) Update(set func(*UserExperienceUpsert)) *UserExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserExperienceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserExperienceUpsertBulk) SetUpdatedAt(v int64) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *UserExperienceUpsertBulk) AddUpdatedAt(v int64) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserExperienceUpsertBulk) UpdateUpdatedAt() *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserExperienceUpsertBulk) SetUpdatedBy(v int64) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserExperienceUpsertBulk) AddUpdatedBy(v int64) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserExperienceUpsertBulk) UpdateUpdatedBy() *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserExperienceUpsertBulk) SetDeletedAt(v int64) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UserExperienceUpsertBulk) AddDeletedAt(v int64) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserExperienceUpsertBulk) UpdateDeletedAt() *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *UserExperienceUpsertBulk) SetDeletedBy(v int64) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *UserExperienceUpsertBulk) AddDeletedBy(v int64) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *UserExperienceUpsertBulk) UpdateDeletedBy() *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserExperienceUpsertBulk) SetUserID(v int) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *UserExperienceUpsertBulk) AddUserID(v int) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserExperienceUpsertBulk) UpdateUserID() *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateUserID()
	})
}

// SetCompany sets the "company" field.
func (u *UserExperienceUpsertBulk) SetCompany(v string) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *UserExperienceUpsertBulk) UpdateCompany() *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateCompany()
	})
}

// SetRole sets the "role" field.
func (u *UserExperienceUpsertBulk) SetRole(v string) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserExperienceUpsertBulk) UpdateRole() *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateRole()
	})
}

// SetLocation sets the "location" field.
func (u *UserExperienceUpsertBulk) SetLocation(v string) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *UserExperienceUpsertBulk) UpdateLocation() *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateLocation()
	})
}

// SetStart sets the "start" field.
func (u *UserExperienceUpsertBulk) SetStart(v int64) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *UserExperienceUpsertBulk) AddStart(v int64) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *UserExperienceUpsertBulk) UpdateStart() *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *UserExperienceUpsertBulk) SetEnd(v int64) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *UserExperienceUpsertBulk) AddEnd(v int64) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *UserExperienceUpsertBulk) UpdateEnd() *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateEnd()
	})
}

// SetDescription sets the "description" field.
func (u *UserExperienceUpsertBulk) SetDescription(v string) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UserExperienceUpsertBulk) UpdateDescription() *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateDescription()
	})
}

// SetResponsibilities sets the "responsibilities" field.
func (u *UserExperienceUpsertBulk) SetResponsibilities(v string) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetResponsibilities(v)
	})
}

// UpdateResponsibilities sets the "responsibilities" field to the value that was provided on create.
func (u *UserExperienceUpsertBulk) UpdateResponsibilities() *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateResponsibilities()
	})
}

// SetAchievements sets the "achievements" field.
func (u *UserExperienceUpsertBulk) SetAchievements(v string) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetAchievements(v)
	})
}

// UpdateAchievements sets the "achievements" field to the value that was provided on create.
func (u *UserExperienceUpsertBulk) UpdateAchievements() *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateAchievements()
	})
}

// SetSkills sets the "skills" field.
func (u *UserExperienceUpsertBulk) SetSkills(v []string) *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.SetSkills(v)
	})
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *UserExperienceUpsertBulk) UpdateSkills() *UserExperienceUpsertBulk {
	return u.Update(func(s *UserExperienceUpsert) {
		s.UpdateSkills()
	})
}

// Exec executes the query.
func (u *UserExperienceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserExperienceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserExperienceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserExperienceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
