// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/filesextend"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FilesExtendCreate is the builder for creating a FilesExtend entity.
type FilesExtendCreate struct {
	config
	mutation *FilesExtendMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fec *FilesExtendCreate) SetCreatedAt(i int64) *FilesExtendCreate {
	fec.mutation.SetCreatedAt(i)
	return fec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fec *FilesExtendCreate) SetNillableCreatedAt(i *int64) *FilesExtendCreate {
	if i != nil {
		fec.SetCreatedAt(*i)
	}
	return fec
}

// SetCreatedBy sets the "created_by" field.
func (fec *FilesExtendCreate) SetCreatedBy(i int64) *FilesExtendCreate {
	fec.mutation.SetCreatedBy(i)
	return fec
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fec *FilesExtendCreate) SetNillableCreatedBy(i *int64) *FilesExtendCreate {
	if i != nil {
		fec.SetCreatedBy(*i)
	}
	return fec
}

// SetUpdatedAt sets the "updated_at" field.
func (fec *FilesExtendCreate) SetUpdatedAt(i int64) *FilesExtendCreate {
	fec.mutation.SetUpdatedAt(i)
	return fec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fec *FilesExtendCreate) SetNillableUpdatedAt(i *int64) *FilesExtendCreate {
	if i != nil {
		fec.SetUpdatedAt(*i)
	}
	return fec
}

// SetUpdatedBy sets the "updated_by" field.
func (fec *FilesExtendCreate) SetUpdatedBy(i int64) *FilesExtendCreate {
	fec.mutation.SetUpdatedBy(i)
	return fec
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fec *FilesExtendCreate) SetNillableUpdatedBy(i *int64) *FilesExtendCreate {
	if i != nil {
		fec.SetUpdatedBy(*i)
	}
	return fec
}

// SetDeletedAt sets the "deleted_at" field.
func (fec *FilesExtendCreate) SetDeletedAt(i int64) *FilesExtendCreate {
	fec.mutation.SetDeletedAt(i)
	return fec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fec *FilesExtendCreate) SetNillableDeletedAt(i *int64) *FilesExtendCreate {
	if i != nil {
		fec.SetDeletedAt(*i)
	}
	return fec
}

// SetDeletedBy sets the "deleted_by" field.
func (fec *FilesExtendCreate) SetDeletedBy(i int64) *FilesExtendCreate {
	fec.mutation.SetDeletedBy(i)
	return fec
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fec *FilesExtendCreate) SetNillableDeletedBy(i *int64) *FilesExtendCreate {
	if i != nil {
		fec.SetDeletedBy(*i)
	}
	return fec
}

// SetFileID sets the "file_id" field.
func (fec *FilesExtendCreate) SetFileID(s string) *FilesExtendCreate {
	fec.mutation.SetFileID(s)
	return fec
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (fec *FilesExtendCreate) SetNillableFileID(s *string) *FilesExtendCreate {
	if s != nil {
		fec.SetFileID(*s)
	}
	return fec
}

// SetUserID sets the "user_id" field.
func (fec *FilesExtendCreate) SetUserID(i int) *FilesExtendCreate {
	fec.mutation.SetUserID(i)
	return fec
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fec *FilesExtendCreate) SetNillableUserID(i *int) *FilesExtendCreate {
	if i != nil {
		fec.SetUserID(*i)
	}
	return fec
}

// SetFilename sets the "filename" field.
func (fec *FilesExtendCreate) SetFilename(s string) *FilesExtendCreate {
	fec.mutation.SetFilename(s)
	return fec
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (fec *FilesExtendCreate) SetNillableFilename(s *string) *FilesExtendCreate {
	if s != nil {
		fec.SetFilename(*s)
	}
	return fec
}

// SetFrom sets the "from" field.
func (fec *FilesExtendCreate) SetFrom(s string) *FilesExtendCreate {
	fec.mutation.SetFrom(s)
	return fec
}

// SetIsHidden sets the "is_hidden" field.
func (fec *FilesExtendCreate) SetIsHidden(i int8) *FilesExtendCreate {
	fec.mutation.SetIsHidden(i)
	return fec
}

// SetID sets the "id" field.
func (fec *FilesExtendCreate) SetID(i int) *FilesExtendCreate {
	fec.mutation.SetID(i)
	return fec
}

// Mutation returns the FilesExtendMutation object of the builder.
func (fec *FilesExtendCreate) Mutation() *FilesExtendMutation {
	return fec.mutation
}

// Save creates the FilesExtend in the database.
func (fec *FilesExtendCreate) Save(ctx context.Context) (*FilesExtend, error) {
	if err := fec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fec.sqlSave, fec.mutation, fec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fec *FilesExtendCreate) SaveX(ctx context.Context) *FilesExtend {
	v, err := fec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fec *FilesExtendCreate) Exec(ctx context.Context) error {
	_, err := fec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fec *FilesExtendCreate) ExecX(ctx context.Context) {
	if err := fec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fec *FilesExtendCreate) defaults() error {
	if _, ok := fec.mutation.CreatedAt(); !ok {
		v := filesextend.DefaultCreatedAt
		fec.mutation.SetCreatedAt(v)
	}
	if _, ok := fec.mutation.CreatedBy(); !ok {
		v := filesextend.DefaultCreatedBy
		fec.mutation.SetCreatedBy(v)
	}
	if _, ok := fec.mutation.UpdatedAt(); !ok {
		v := filesextend.DefaultUpdatedAt
		fec.mutation.SetUpdatedAt(v)
	}
	if _, ok := fec.mutation.UpdatedBy(); !ok {
		v := filesextend.DefaultUpdatedBy
		fec.mutation.SetUpdatedBy(v)
	}
	if _, ok := fec.mutation.DeletedAt(); !ok {
		v := filesextend.DefaultDeletedAt
		fec.mutation.SetDeletedAt(v)
	}
	if _, ok := fec.mutation.DeletedBy(); !ok {
		v := filesextend.DefaultDeletedBy
		fec.mutation.SetDeletedBy(v)
	}
	if _, ok := fec.mutation.FileID(); !ok {
		v := filesextend.DefaultFileID
		fec.mutation.SetFileID(v)
	}
	if _, ok := fec.mutation.UserID(); !ok {
		v := filesextend.DefaultUserID
		fec.mutation.SetUserID(v)
	}
	if _, ok := fec.mutation.Filename(); !ok {
		v := filesextend.DefaultFilename
		fec.mutation.SetFilename(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fec *FilesExtendCreate) check() error {
	if _, ok := fec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FilesExtend.created_at"`)}
	}
	if _, ok := fec.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "FilesExtend.created_by"`)}
	}
	if _, ok := fec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FilesExtend.updated_at"`)}
	}
	if _, ok := fec.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "FilesExtend.updated_by"`)}
	}
	if _, ok := fec.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "FilesExtend.deleted_at"`)}
	}
	if _, ok := fec.mutation.DeletedBy(); !ok {
		return &ValidationError{Name: "deleted_by", err: errors.New(`ent: missing required field "FilesExtend.deleted_by"`)}
	}
	if _, ok := fec.mutation.FileID(); !ok {
		return &ValidationError{Name: "file_id", err: errors.New(`ent: missing required field "FilesExtend.file_id"`)}
	}
	if _, ok := fec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "FilesExtend.user_id"`)}
	}
	if _, ok := fec.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "FilesExtend.filename"`)}
	}
	if _, ok := fec.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "FilesExtend.from"`)}
	}
	if _, ok := fec.mutation.IsHidden(); !ok {
		return &ValidationError{Name: "is_hidden", err: errors.New(`ent: missing required field "FilesExtend.is_hidden"`)}
	}
	if v, ok := fec.mutation.ID(); ok {
		if err := filesextend.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "FilesExtend.id": %w`, err)}
		}
	}
	return nil
}

func (fec *FilesExtendCreate) sqlSave(ctx context.Context) (*FilesExtend, error) {
	if err := fec.check(); err != nil {
		return nil, err
	}
	_node, _spec := fec.createSpec()
	if err := sqlgraph.CreateNode(ctx, fec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	fec.mutation.id = &_node.ID
	fec.mutation.done = true
	return _node, nil
}

func (fec *FilesExtendCreate) createSpec() (*FilesExtend, *sqlgraph.CreateSpec) {
	var (
		_node = &FilesExtend{config: fec.config}
		_spec = sqlgraph.NewCreateSpec(filesextend.Table, sqlgraph.NewFieldSpec(filesextend.FieldID, field.TypeInt))
	)
	_spec.OnConflict = fec.conflict
	if id, ok := fec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fec.mutation.CreatedAt(); ok {
		_spec.SetField(filesextend.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := fec.mutation.CreatedBy(); ok {
		_spec.SetField(filesextend.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := fec.mutation.UpdatedAt(); ok {
		_spec.SetField(filesextend.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := fec.mutation.UpdatedBy(); ok {
		_spec.SetField(filesextend.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := fec.mutation.DeletedAt(); ok {
		_spec.SetField(filesextend.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := fec.mutation.DeletedBy(); ok {
		_spec.SetField(filesextend.FieldDeletedBy, field.TypeInt64, value)
		_node.DeletedBy = value
	}
	if value, ok := fec.mutation.FileID(); ok {
		_spec.SetField(filesextend.FieldFileID, field.TypeString, value)
		_node.FileID = value
	}
	if value, ok := fec.mutation.UserID(); ok {
		_spec.SetField(filesextend.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := fec.mutation.Filename(); ok {
		_spec.SetField(filesextend.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := fec.mutation.From(); ok {
		_spec.SetField(filesextend.FieldFrom, field.TypeString, value)
		_node.From = value
	}
	if value, ok := fec.mutation.IsHidden(); ok {
		_spec.SetField(filesextend.FieldIsHidden, field.TypeInt8, value)
		_node.IsHidden = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FilesExtend.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FilesExtendUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fec *FilesExtendCreate) OnConflict(opts ...sql.ConflictOption) *FilesExtendUpsertOne {
	fec.conflict = opts
	return &FilesExtendUpsertOne{
		create: fec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FilesExtend.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fec *FilesExtendCreate) OnConflictColumns(columns ...string) *FilesExtendUpsertOne {
	fec.conflict = append(fec.conflict, sql.ConflictColumns(columns...))
	return &FilesExtendUpsertOne{
		create: fec,
	}
}

type (
	// FilesExtendUpsertOne is the builder for "upsert"-ing
	//  one FilesExtend node.
	FilesExtendUpsertOne struct {
		create *FilesExtendCreate
	}

	// FilesExtendUpsert is the "OnConflict" setter.
	FilesExtendUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *FilesExtendUpsert) SetUpdatedAt(v int64) *FilesExtendUpsert {
	u.Set(filesextend.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FilesExtendUpsert) UpdateUpdatedAt() *FilesExtendUpsert {
	u.SetExcluded(filesextend.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FilesExtendUpsert) AddUpdatedAt(v int64) *FilesExtendUpsert {
	u.Add(filesextend.FieldUpdatedAt, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FilesExtendUpsert) SetUpdatedBy(v int64) *FilesExtendUpsert {
	u.Set(filesextend.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FilesExtendUpsert) UpdateUpdatedBy() *FilesExtendUpsert {
	u.SetExcluded(filesextend.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FilesExtendUpsert) AddUpdatedBy(v int64) *FilesExtendUpsert {
	u.Add(filesextend.FieldUpdatedBy, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FilesExtendUpsert) SetDeletedAt(v int64) *FilesExtendUpsert {
	u.Set(filesextend.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FilesExtendUpsert) UpdateDeletedAt() *FilesExtendUpsert {
	u.SetExcluded(filesextend.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FilesExtendUpsert) AddDeletedAt(v int64) *FilesExtendUpsert {
	u.Add(filesextend.FieldDeletedAt, v)
	return u
}

// SetDeletedBy sets the "deleted_by" field.
func (u *FilesExtendUpsert) SetDeletedBy(v int64) *FilesExtendUpsert {
	u.Set(filesextend.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *FilesExtendUpsert) UpdateDeletedBy() *FilesExtendUpsert {
	u.SetExcluded(filesextend.FieldDeletedBy)
	return u
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *FilesExtendUpsert) AddDeletedBy(v int64) *FilesExtendUpsert {
	u.Add(filesextend.FieldDeletedBy, v)
	return u
}

// SetFileID sets the "file_id" field.
func (u *FilesExtendUpsert) SetFileID(v string) *FilesExtendUpsert {
	u.Set(filesextend.FieldFileID, v)
	return u
}

// UpdateFileID sets the "file_id" field to the value that was provided on create.
func (u *FilesExtendUpsert) UpdateFileID() *FilesExtendUpsert {
	u.SetExcluded(filesextend.FieldFileID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *FilesExtendUpsert) SetUserID(v int) *FilesExtendUpsert {
	u.Set(filesextend.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *FilesExtendUpsert) UpdateUserID() *FilesExtendUpsert {
	u.SetExcluded(filesextend.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *FilesExtendUpsert) AddUserID(v int) *FilesExtendUpsert {
	u.Add(filesextend.FieldUserID, v)
	return u
}

// SetFilename sets the "filename" field.
func (u *FilesExtendUpsert) SetFilename(v string) *FilesExtendUpsert {
	u.Set(filesextend.FieldFilename, v)
	return u
}

// UpdateFilename sets the "filename" field to the value that was provided on create.
func (u *FilesExtendUpsert) UpdateFilename() *FilesExtendUpsert {
	u.SetExcluded(filesextend.FieldFilename)
	return u
}

// SetFrom sets the "from" field.
func (u *FilesExtendUpsert) SetFrom(v string) *FilesExtendUpsert {
	u.Set(filesextend.FieldFrom, v)
	return u
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *FilesExtendUpsert) UpdateFrom() *FilesExtendUpsert {
	u.SetExcluded(filesextend.FieldFrom)
	return u
}

// SetIsHidden sets the "is_hidden" field.
func (u *FilesExtendUpsert) SetIsHidden(v int8) *FilesExtendUpsert {
	u.Set(filesextend.FieldIsHidden, v)
	return u
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *FilesExtendUpsert) UpdateIsHidden() *FilesExtendUpsert {
	u.SetExcluded(filesextend.FieldIsHidden)
	return u
}

// AddIsHidden adds v to the "is_hidden" field.
func (u *FilesExtendUpsert) AddIsHidden(v int8) *FilesExtendUpsert {
	u.Add(filesextend.FieldIsHidden, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FilesExtend.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(filesextend.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FilesExtendUpsertOne) UpdateNewValues() *FilesExtendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(filesextend.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(filesextend.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(filesextend.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FilesExtend.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FilesExtendUpsertOne) Ignore() *FilesExtendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FilesExtendUpsertOne) DoNothing() *FilesExtendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FilesExtendCreate.OnConflict
// documentation for more info.
func (u *FilesExtendUpsertOne) Update(set func(*FilesExtendUpsert)) *FilesExtendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FilesExtendUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FilesExtendUpsertOne) SetUpdatedAt(v int64) *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FilesExtendUpsertOne) AddUpdatedAt(v int64) *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FilesExtendUpsertOne) UpdateUpdatedAt() *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FilesExtendUpsertOne) SetUpdatedBy(v int64) *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FilesExtendUpsertOne) AddUpdatedBy(v int64) *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FilesExtendUpsertOne) UpdateUpdatedBy() *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FilesExtendUpsertOne) SetDeletedAt(v int64) *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FilesExtendUpsertOne) AddDeletedAt(v int64) *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FilesExtendUpsertOne) UpdateDeletedAt() *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *FilesExtendUpsertOne) SetDeletedBy(v int64) *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *FilesExtendUpsertOne) AddDeletedBy(v int64) *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *FilesExtendUpsertOne) UpdateDeletedBy() *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetFileID sets the "file_id" field.
func (u *FilesExtendUpsertOne) SetFileID(v string) *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetFileID(v)
	})
}

// UpdateFileID sets the "file_id" field to the value that was provided on create.
func (u *FilesExtendUpsertOne) UpdateFileID() *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateFileID()
	})
}

// SetUserID sets the "user_id" field.
func (u *FilesExtendUpsertOne) SetUserID(v int) *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *FilesExtendUpsertOne) AddUserID(v int) *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *FilesExtendUpsertOne) UpdateUserID() *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateUserID()
	})
}

// SetFilename sets the "filename" field.
func (u *FilesExtendUpsertOne) SetFilename(v string) *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetFilename(v)
	})
}

// UpdateFilename sets the "filename" field to the value that was provided on create.
func (u *FilesExtendUpsertOne) UpdateFilename() *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateFilename()
	})
}

// SetFrom sets the "from" field.
func (u *FilesExtendUpsertOne) SetFrom(v string) *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetFrom(v)
	})
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *FilesExtendUpsertOne) UpdateFrom() *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateFrom()
	})
}

// SetIsHidden sets the "is_hidden" field.
func (u *FilesExtendUpsertOne) SetIsHidden(v int8) *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetIsHidden(v)
	})
}

// AddIsHidden adds v to the "is_hidden" field.
func (u *FilesExtendUpsertOne) AddIsHidden(v int8) *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.AddIsHidden(v)
	})
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *FilesExtendUpsertOne) UpdateIsHidden() *FilesExtendUpsertOne {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateIsHidden()
	})
}

// Exec executes the query.
func (u *FilesExtendUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FilesExtendCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FilesExtendUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FilesExtendUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FilesExtendUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FilesExtendCreateBulk is the builder for creating many FilesExtend entities in bulk.
type FilesExtendCreateBulk struct {
	config
	err      error
	builders []*FilesExtendCreate
	conflict []sql.ConflictOption
}

// Save creates the FilesExtend entities in the database.
func (fecb *FilesExtendCreateBulk) Save(ctx context.Context) ([]*FilesExtend, error) {
	if fecb.err != nil {
		return nil, fecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fecb.builders))
	nodes := make([]*FilesExtend, len(fecb.builders))
	mutators := make([]Mutator, len(fecb.builders))
	for i := range fecb.builders {
		func(i int, root context.Context) {
			builder := fecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FilesExtendMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fecb *FilesExtendCreateBulk) SaveX(ctx context.Context) []*FilesExtend {
	v, err := fecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fecb *FilesExtendCreateBulk) Exec(ctx context.Context) error {
	_, err := fecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fecb *FilesExtendCreateBulk) ExecX(ctx context.Context) {
	if err := fecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FilesExtend.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FilesExtendUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fecb *FilesExtendCreateBulk) OnConflict(opts ...sql.ConflictOption) *FilesExtendUpsertBulk {
	fecb.conflict = opts
	return &FilesExtendUpsertBulk{
		create: fecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FilesExtend.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fecb *FilesExtendCreateBulk) OnConflictColumns(columns ...string) *FilesExtendUpsertBulk {
	fecb.conflict = append(fecb.conflict, sql.ConflictColumns(columns...))
	return &FilesExtendUpsertBulk{
		create: fecb,
	}
}

// FilesExtendUpsertBulk is the builder for "upsert"-ing
// a bulk of FilesExtend nodes.
type FilesExtendUpsertBulk struct {
	create *FilesExtendCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FilesExtend.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(filesextend.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FilesExtendUpsertBulk) UpdateNewValues() *FilesExtendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(filesextend.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(filesextend.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(filesextend.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FilesExtend.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FilesExtendUpsertBulk) Ignore() *FilesExtendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FilesExtendUpsertBulk) DoNothing() *FilesExtendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FilesExtendCreateBulk.OnConflict
// documentation for more info.
func (u *FilesExtendUpsertBulk) Update(set func(*FilesExtendUpsert)) *FilesExtendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FilesExtendUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FilesExtendUpsertBulk) SetUpdatedAt(v int64) *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FilesExtendUpsertBulk) AddUpdatedAt(v int64) *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FilesExtendUpsertBulk) UpdateUpdatedAt() *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FilesExtendUpsertBulk) SetUpdatedBy(v int64) *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FilesExtendUpsertBulk) AddUpdatedBy(v int64) *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FilesExtendUpsertBulk) UpdateUpdatedBy() *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FilesExtendUpsertBulk) SetDeletedAt(v int64) *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FilesExtendUpsertBulk) AddDeletedAt(v int64) *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FilesExtendUpsertBulk) UpdateDeletedAt() *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDeletedBy sets the "deleted_by" field.
func (u *FilesExtendUpsertBulk) SetDeletedBy(v int64) *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetDeletedBy(v)
	})
}

// AddDeletedBy adds v to the "deleted_by" field.
func (u *FilesExtendUpsertBulk) AddDeletedBy(v int64) *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.AddDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "deleted_by" field to the value that was provided on create.
func (u *FilesExtendUpsertBulk) UpdateDeletedBy() *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateDeletedBy()
	})
}

// SetFileID sets the "file_id" field.
func (u *FilesExtendUpsertBulk) SetFileID(v string) *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetFileID(v)
	})
}

// UpdateFileID sets the "file_id" field to the value that was provided on create.
func (u *FilesExtendUpsertBulk) UpdateFileID() *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateFileID()
	})
}

// SetUserID sets the "user_id" field.
func (u *FilesExtendUpsertBulk) SetUserID(v int) *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *FilesExtendUpsertBulk) AddUserID(v int) *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *FilesExtendUpsertBulk) UpdateUserID() *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateUserID()
	})
}

// SetFilename sets the "filename" field.
func (u *FilesExtendUpsertBulk) SetFilename(v string) *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetFilename(v)
	})
}

// UpdateFilename sets the "filename" field to the value that was provided on create.
func (u *FilesExtendUpsertBulk) UpdateFilename() *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateFilename()
	})
}

// SetFrom sets the "from" field.
func (u *FilesExtendUpsertBulk) SetFrom(v string) *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetFrom(v)
	})
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *FilesExtendUpsertBulk) UpdateFrom() *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateFrom()
	})
}

// SetIsHidden sets the "is_hidden" field.
func (u *FilesExtendUpsertBulk) SetIsHidden(v int8) *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.SetIsHidden(v)
	})
}

// AddIsHidden adds v to the "is_hidden" field.
func (u *FilesExtendUpsertBulk) AddIsHidden(v int8) *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.AddIsHidden(v)
	})
}

// UpdateIsHidden sets the "is_hidden" field to the value that was provided on create.
func (u *FilesExtendUpsertBulk) UpdateIsHidden() *FilesExtendUpsertBulk {
	return u.Update(func(s *FilesExtendUpsert) {
		s.UpdateIsHidden()
	})
}

// Exec executes the query.
func (u *FilesExtendUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FilesExtendCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FilesExtendCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FilesExtendUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
