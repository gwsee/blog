// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/palacestodo"
	"blog/internal/ent/palacestododone"
	"blog/internal/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PalacesTodoUpdate is the builder for updating PalacesTodo entities.
type PalacesTodoUpdate struct {
	config
	hooks    []Hook
	mutation *PalacesTodoMutation
}

// Where appends a list predicates to the PalacesTodoUpdate builder.
func (ptu *PalacesTodoUpdate) Where(ps ...predicate.PalacesTodo) *PalacesTodoUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetUpdatedAt sets the "updated_at" field.
func (ptu *PalacesTodoUpdate) SetUpdatedAt(i int64) *PalacesTodoUpdate {
	ptu.mutation.ResetUpdatedAt()
	ptu.mutation.SetUpdatedAt(i)
	return ptu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ptu *PalacesTodoUpdate) AddUpdatedAt(i int64) *PalacesTodoUpdate {
	ptu.mutation.AddUpdatedAt(i)
	return ptu
}

// SetUpdatedBy sets the "updated_by" field.
func (ptu *PalacesTodoUpdate) SetUpdatedBy(i int64) *PalacesTodoUpdate {
	ptu.mutation.ResetUpdatedBy()
	ptu.mutation.SetUpdatedBy(i)
	return ptu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ptu *PalacesTodoUpdate) SetNillableUpdatedBy(i *int64) *PalacesTodoUpdate {
	if i != nil {
		ptu.SetUpdatedBy(*i)
	}
	return ptu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ptu *PalacesTodoUpdate) AddUpdatedBy(i int64) *PalacesTodoUpdate {
	ptu.mutation.AddUpdatedBy(i)
	return ptu
}

// SetDeletedAt sets the "deleted_at" field.
func (ptu *PalacesTodoUpdate) SetDeletedAt(i int64) *PalacesTodoUpdate {
	ptu.mutation.ResetDeletedAt()
	ptu.mutation.SetDeletedAt(i)
	return ptu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptu *PalacesTodoUpdate) SetNillableDeletedAt(i *int64) *PalacesTodoUpdate {
	if i != nil {
		ptu.SetDeletedAt(*i)
	}
	return ptu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (ptu *PalacesTodoUpdate) AddDeletedAt(i int64) *PalacesTodoUpdate {
	ptu.mutation.AddDeletedAt(i)
	return ptu
}

// SetDeletedBy sets the "deleted_by" field.
func (ptu *PalacesTodoUpdate) SetDeletedBy(i int64) *PalacesTodoUpdate {
	ptu.mutation.ResetDeletedBy()
	ptu.mutation.SetDeletedBy(i)
	return ptu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ptu *PalacesTodoUpdate) SetNillableDeletedBy(i *int64) *PalacesTodoUpdate {
	if i != nil {
		ptu.SetDeletedBy(*i)
	}
	return ptu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (ptu *PalacesTodoUpdate) AddDeletedBy(i int64) *PalacesTodoUpdate {
	ptu.mutation.AddDeletedBy(i)
	return ptu
}

// SetAccountID sets the "account_id" field.
func (ptu *PalacesTodoUpdate) SetAccountID(i int) *PalacesTodoUpdate {
	ptu.mutation.ResetAccountID()
	ptu.mutation.SetAccountID(i)
	return ptu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (ptu *PalacesTodoUpdate) SetNillableAccountID(i *int) *PalacesTodoUpdate {
	if i != nil {
		ptu.SetAccountID(*i)
	}
	return ptu
}

// AddAccountID adds i to the "account_id" field.
func (ptu *PalacesTodoUpdate) AddAccountID(i int) *PalacesTodoUpdate {
	ptu.mutation.AddAccountID(i)
	return ptu
}

// SetTheme sets the "theme" field.
func (ptu *PalacesTodoUpdate) SetTheme(s string) *PalacesTodoUpdate {
	ptu.mutation.SetTheme(s)
	return ptu
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (ptu *PalacesTodoUpdate) SetNillableTheme(s *string) *PalacesTodoUpdate {
	if s != nil {
		ptu.SetTheme(*s)
	}
	return ptu
}

// SetType sets the "type" field.
func (ptu *PalacesTodoUpdate) SetType(i int8) *PalacesTodoUpdate {
	ptu.mutation.ResetType()
	ptu.mutation.SetType(i)
	return ptu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ptu *PalacesTodoUpdate) SetNillableType(i *int8) *PalacesTodoUpdate {
	if i != nil {
		ptu.SetType(*i)
	}
	return ptu
}

// AddType adds i to the "type" field.
func (ptu *PalacesTodoUpdate) AddType(i int8) *PalacesTodoUpdate {
	ptu.mutation.AddType(i)
	return ptu
}

// SetFrom sets the "from" field.
func (ptu *PalacesTodoUpdate) SetFrom(i int64) *PalacesTodoUpdate {
	ptu.mutation.ResetFrom()
	ptu.mutation.SetFrom(i)
	return ptu
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (ptu *PalacesTodoUpdate) SetNillableFrom(i *int64) *PalacesTodoUpdate {
	if i != nil {
		ptu.SetFrom(*i)
	}
	return ptu
}

// AddFrom adds i to the "from" field.
func (ptu *PalacesTodoUpdate) AddFrom(i int64) *PalacesTodoUpdate {
	ptu.mutation.AddFrom(i)
	return ptu
}

// SetTo sets the "to" field.
func (ptu *PalacesTodoUpdate) SetTo(i int64) *PalacesTodoUpdate {
	ptu.mutation.ResetTo()
	ptu.mutation.SetTo(i)
	return ptu
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (ptu *PalacesTodoUpdate) SetNillableTo(i *int64) *PalacesTodoUpdate {
	if i != nil {
		ptu.SetTo(*i)
	}
	return ptu
}

// AddTo adds i to the "to" field.
func (ptu *PalacesTodoUpdate) AddTo(i int64) *PalacesTodoUpdate {
	ptu.mutation.AddTo(i)
	return ptu
}

// SetNum sets the "num" field.
func (ptu *PalacesTodoUpdate) SetNum(i int64) *PalacesTodoUpdate {
	ptu.mutation.ResetNum()
	ptu.mutation.SetNum(i)
	return ptu
}

// SetNillableNum sets the "num" field if the given value is not nil.
func (ptu *PalacesTodoUpdate) SetNillableNum(i *int64) *PalacesTodoUpdate {
	if i != nil {
		ptu.SetNum(*i)
	}
	return ptu
}

// AddNum adds i to the "num" field.
func (ptu *PalacesTodoUpdate) AddNum(i int64) *PalacesTodoUpdate {
	ptu.mutation.AddNum(i)
	return ptu
}

// SetSort sets the "sort" field.
func (ptu *PalacesTodoUpdate) SetSort(i int64) *PalacesTodoUpdate {
	ptu.mutation.ResetSort()
	ptu.mutation.SetSort(i)
	return ptu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (ptu *PalacesTodoUpdate) SetNillableSort(i *int64) *PalacesTodoUpdate {
	if i != nil {
		ptu.SetSort(*i)
	}
	return ptu
}

// AddSort adds i to the "sort" field.
func (ptu *PalacesTodoUpdate) AddSort(i int64) *PalacesTodoUpdate {
	ptu.mutation.AddSort(i)
	return ptu
}

// SetContent sets the "content" field.
func (ptu *PalacesTodoUpdate) SetContent(s string) *PalacesTodoUpdate {
	ptu.mutation.SetContent(s)
	return ptu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ptu *PalacesTodoUpdate) SetNillableContent(s *string) *PalacesTodoUpdate {
	if s != nil {
		ptu.SetContent(*s)
	}
	return ptu
}

// SetStatus sets the "status" field.
func (ptu *PalacesTodoUpdate) SetStatus(i int8) *PalacesTodoUpdate {
	ptu.mutation.ResetStatus()
	ptu.mutation.SetStatus(i)
	return ptu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ptu *PalacesTodoUpdate) SetNillableStatus(i *int8) *PalacesTodoUpdate {
	if i != nil {
		ptu.SetStatus(*i)
	}
	return ptu
}

// AddStatus adds i to the "status" field.
func (ptu *PalacesTodoUpdate) AddStatus(i int8) *PalacesTodoUpdate {
	ptu.mutation.AddStatus(i)
	return ptu
}

// AddDoneIDs adds the "dones" edge to the PalacesTodoDone entity by IDs.
func (ptu *PalacesTodoUpdate) AddDoneIDs(ids ...int) *PalacesTodoUpdate {
	ptu.mutation.AddDoneIDs(ids...)
	return ptu
}

// AddDones adds the "dones" edges to the PalacesTodoDone entity.
func (ptu *PalacesTodoUpdate) AddDones(p ...*PalacesTodoDone) *PalacesTodoUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddDoneIDs(ids...)
}

// Mutation returns the PalacesTodoMutation object of the builder.
func (ptu *PalacesTodoUpdate) Mutation() *PalacesTodoMutation {
	return ptu.mutation
}

// ClearDones clears all "dones" edges to the PalacesTodoDone entity.
func (ptu *PalacesTodoUpdate) ClearDones() *PalacesTodoUpdate {
	ptu.mutation.ClearDones()
	return ptu
}

// RemoveDoneIDs removes the "dones" edge to PalacesTodoDone entities by IDs.
func (ptu *PalacesTodoUpdate) RemoveDoneIDs(ids ...int) *PalacesTodoUpdate {
	ptu.mutation.RemoveDoneIDs(ids...)
	return ptu
}

// RemoveDones removes "dones" edges to PalacesTodoDone entities.
func (ptu *PalacesTodoUpdate) RemoveDones(p ...*PalacesTodoDone) *PalacesTodoUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemoveDoneIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *PalacesTodoUpdate) Save(ctx context.Context) (int, error) {
	if err := ptu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PalacesTodoUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PalacesTodoUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PalacesTodoUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptu *PalacesTodoUpdate) defaults() error {
	if _, ok := ptu.mutation.CreatedAt(); !ok {
		if palacestodo.UpdateDefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized palacestodo.UpdateDefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := palacestodo.UpdateDefaultCreatedAt()
		ptu.mutation.SetCreatedAt(v)
	}
	if _, ok := ptu.mutation.UpdatedAt(); !ok {
		if palacestodo.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized palacestodo.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := palacestodo.UpdateDefaultUpdatedAt()
		ptu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ptu *PalacesTodoUpdate) check() error {
	if v, ok := ptu.mutation.Content(); ok {
		if err := palacestodo.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "PalacesTodo.content": %w`, err)}
		}
	}
	return nil
}

func (ptu *PalacesTodoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(palacestodo.Table, palacestodo.Columns, sqlgraph.NewFieldSpec(palacestodo.FieldID, field.TypeInt))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.CreatedAt(); ok {
		_spec.SetField(palacestodo.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(palacestodo.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.UpdatedAt(); ok {
		_spec.SetField(palacestodo.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(palacestodo.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.UpdatedBy(); ok {
		_spec.SetField(palacestodo.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(palacestodo.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.DeletedAt(); ok {
		_spec.SetField(palacestodo.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(palacestodo.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.DeletedBy(); ok {
		_spec.SetField(palacestodo.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(palacestodo.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.AccountID(); ok {
		_spec.SetField(palacestodo.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AddedAccountID(); ok {
		_spec.AddField(palacestodo.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.Theme(); ok {
		_spec.SetField(palacestodo.FieldTheme, field.TypeString, value)
	}
	if value, ok := ptu.mutation.GetType(); ok {
		_spec.SetField(palacestodo.FieldType, field.TypeInt8, value)
	}
	if value, ok := ptu.mutation.AddedType(); ok {
		_spec.AddField(palacestodo.FieldType, field.TypeInt8, value)
	}
	if value, ok := ptu.mutation.From(); ok {
		_spec.SetField(palacestodo.FieldFrom, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.AddedFrom(); ok {
		_spec.AddField(palacestodo.FieldFrom, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.To(); ok {
		_spec.SetField(palacestodo.FieldTo, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.AddedTo(); ok {
		_spec.AddField(palacestodo.FieldTo, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.Num(); ok {
		_spec.SetField(palacestodo.FieldNum, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.AddedNum(); ok {
		_spec.AddField(palacestodo.FieldNum, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.Sort(); ok {
		_spec.SetField(palacestodo.FieldSort, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.AddedSort(); ok {
		_spec.AddField(palacestodo.FieldSort, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.Content(); ok {
		_spec.SetField(palacestodo.FieldContent, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Status(); ok {
		_spec.SetField(palacestodo.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ptu.mutation.AddedStatus(); ok {
		_spec.AddField(palacestodo.FieldStatus, field.TypeInt8, value)
	}
	if ptu.mutation.DonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   palacestodo.DonesTable,
			Columns: []string{palacestodo.DonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(palacestododone.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedDonesIDs(); len(nodes) > 0 && !ptu.mutation.DonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   palacestodo.DonesTable,
			Columns: []string{palacestodo.DonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(palacestododone.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.DonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   palacestodo.DonesTable,
			Columns: []string{palacestodo.DonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(palacestododone.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{palacestodo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// PalacesTodoUpdateOne is the builder for updating a single PalacesTodo entity.
type PalacesTodoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PalacesTodoMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ptuo *PalacesTodoUpdateOne) SetUpdatedAt(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.ResetUpdatedAt()
	ptuo.mutation.SetUpdatedAt(i)
	return ptuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ptuo *PalacesTodoUpdateOne) AddUpdatedAt(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.AddUpdatedAt(i)
	return ptuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ptuo *PalacesTodoUpdateOne) SetUpdatedBy(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.ResetUpdatedBy()
	ptuo.mutation.SetUpdatedBy(i)
	return ptuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ptuo *PalacesTodoUpdateOne) SetNillableUpdatedBy(i *int64) *PalacesTodoUpdateOne {
	if i != nil {
		ptuo.SetUpdatedBy(*i)
	}
	return ptuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ptuo *PalacesTodoUpdateOne) AddUpdatedBy(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.AddUpdatedBy(i)
	return ptuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ptuo *PalacesTodoUpdateOne) SetDeletedAt(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.ResetDeletedAt()
	ptuo.mutation.SetDeletedAt(i)
	return ptuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptuo *PalacesTodoUpdateOne) SetNillableDeletedAt(i *int64) *PalacesTodoUpdateOne {
	if i != nil {
		ptuo.SetDeletedAt(*i)
	}
	return ptuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (ptuo *PalacesTodoUpdateOne) AddDeletedAt(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.AddDeletedAt(i)
	return ptuo
}

// SetDeletedBy sets the "deleted_by" field.
func (ptuo *PalacesTodoUpdateOne) SetDeletedBy(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.ResetDeletedBy()
	ptuo.mutation.SetDeletedBy(i)
	return ptuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ptuo *PalacesTodoUpdateOne) SetNillableDeletedBy(i *int64) *PalacesTodoUpdateOne {
	if i != nil {
		ptuo.SetDeletedBy(*i)
	}
	return ptuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (ptuo *PalacesTodoUpdateOne) AddDeletedBy(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.AddDeletedBy(i)
	return ptuo
}

// SetAccountID sets the "account_id" field.
func (ptuo *PalacesTodoUpdateOne) SetAccountID(i int) *PalacesTodoUpdateOne {
	ptuo.mutation.ResetAccountID()
	ptuo.mutation.SetAccountID(i)
	return ptuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (ptuo *PalacesTodoUpdateOne) SetNillableAccountID(i *int) *PalacesTodoUpdateOne {
	if i != nil {
		ptuo.SetAccountID(*i)
	}
	return ptuo
}

// AddAccountID adds i to the "account_id" field.
func (ptuo *PalacesTodoUpdateOne) AddAccountID(i int) *PalacesTodoUpdateOne {
	ptuo.mutation.AddAccountID(i)
	return ptuo
}

// SetTheme sets the "theme" field.
func (ptuo *PalacesTodoUpdateOne) SetTheme(s string) *PalacesTodoUpdateOne {
	ptuo.mutation.SetTheme(s)
	return ptuo
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (ptuo *PalacesTodoUpdateOne) SetNillableTheme(s *string) *PalacesTodoUpdateOne {
	if s != nil {
		ptuo.SetTheme(*s)
	}
	return ptuo
}

// SetType sets the "type" field.
func (ptuo *PalacesTodoUpdateOne) SetType(i int8) *PalacesTodoUpdateOne {
	ptuo.mutation.ResetType()
	ptuo.mutation.SetType(i)
	return ptuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ptuo *PalacesTodoUpdateOne) SetNillableType(i *int8) *PalacesTodoUpdateOne {
	if i != nil {
		ptuo.SetType(*i)
	}
	return ptuo
}

// AddType adds i to the "type" field.
func (ptuo *PalacesTodoUpdateOne) AddType(i int8) *PalacesTodoUpdateOne {
	ptuo.mutation.AddType(i)
	return ptuo
}

// SetFrom sets the "from" field.
func (ptuo *PalacesTodoUpdateOne) SetFrom(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.ResetFrom()
	ptuo.mutation.SetFrom(i)
	return ptuo
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (ptuo *PalacesTodoUpdateOne) SetNillableFrom(i *int64) *PalacesTodoUpdateOne {
	if i != nil {
		ptuo.SetFrom(*i)
	}
	return ptuo
}

// AddFrom adds i to the "from" field.
func (ptuo *PalacesTodoUpdateOne) AddFrom(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.AddFrom(i)
	return ptuo
}

// SetTo sets the "to" field.
func (ptuo *PalacesTodoUpdateOne) SetTo(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.ResetTo()
	ptuo.mutation.SetTo(i)
	return ptuo
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (ptuo *PalacesTodoUpdateOne) SetNillableTo(i *int64) *PalacesTodoUpdateOne {
	if i != nil {
		ptuo.SetTo(*i)
	}
	return ptuo
}

// AddTo adds i to the "to" field.
func (ptuo *PalacesTodoUpdateOne) AddTo(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.AddTo(i)
	return ptuo
}

// SetNum sets the "num" field.
func (ptuo *PalacesTodoUpdateOne) SetNum(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.ResetNum()
	ptuo.mutation.SetNum(i)
	return ptuo
}

// SetNillableNum sets the "num" field if the given value is not nil.
func (ptuo *PalacesTodoUpdateOne) SetNillableNum(i *int64) *PalacesTodoUpdateOne {
	if i != nil {
		ptuo.SetNum(*i)
	}
	return ptuo
}

// AddNum adds i to the "num" field.
func (ptuo *PalacesTodoUpdateOne) AddNum(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.AddNum(i)
	return ptuo
}

// SetSort sets the "sort" field.
func (ptuo *PalacesTodoUpdateOne) SetSort(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.ResetSort()
	ptuo.mutation.SetSort(i)
	return ptuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (ptuo *PalacesTodoUpdateOne) SetNillableSort(i *int64) *PalacesTodoUpdateOne {
	if i != nil {
		ptuo.SetSort(*i)
	}
	return ptuo
}

// AddSort adds i to the "sort" field.
func (ptuo *PalacesTodoUpdateOne) AddSort(i int64) *PalacesTodoUpdateOne {
	ptuo.mutation.AddSort(i)
	return ptuo
}

// SetContent sets the "content" field.
func (ptuo *PalacesTodoUpdateOne) SetContent(s string) *PalacesTodoUpdateOne {
	ptuo.mutation.SetContent(s)
	return ptuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ptuo *PalacesTodoUpdateOne) SetNillableContent(s *string) *PalacesTodoUpdateOne {
	if s != nil {
		ptuo.SetContent(*s)
	}
	return ptuo
}

// SetStatus sets the "status" field.
func (ptuo *PalacesTodoUpdateOne) SetStatus(i int8) *PalacesTodoUpdateOne {
	ptuo.mutation.ResetStatus()
	ptuo.mutation.SetStatus(i)
	return ptuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ptuo *PalacesTodoUpdateOne) SetNillableStatus(i *int8) *PalacesTodoUpdateOne {
	if i != nil {
		ptuo.SetStatus(*i)
	}
	return ptuo
}

// AddStatus adds i to the "status" field.
func (ptuo *PalacesTodoUpdateOne) AddStatus(i int8) *PalacesTodoUpdateOne {
	ptuo.mutation.AddStatus(i)
	return ptuo
}

// AddDoneIDs adds the "dones" edge to the PalacesTodoDone entity by IDs.
func (ptuo *PalacesTodoUpdateOne) AddDoneIDs(ids ...int) *PalacesTodoUpdateOne {
	ptuo.mutation.AddDoneIDs(ids...)
	return ptuo
}

// AddDones adds the "dones" edges to the PalacesTodoDone entity.
func (ptuo *PalacesTodoUpdateOne) AddDones(p ...*PalacesTodoDone) *PalacesTodoUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddDoneIDs(ids...)
}

// Mutation returns the PalacesTodoMutation object of the builder.
func (ptuo *PalacesTodoUpdateOne) Mutation() *PalacesTodoMutation {
	return ptuo.mutation
}

// ClearDones clears all "dones" edges to the PalacesTodoDone entity.
func (ptuo *PalacesTodoUpdateOne) ClearDones() *PalacesTodoUpdateOne {
	ptuo.mutation.ClearDones()
	return ptuo
}

// RemoveDoneIDs removes the "dones" edge to PalacesTodoDone entities by IDs.
func (ptuo *PalacesTodoUpdateOne) RemoveDoneIDs(ids ...int) *PalacesTodoUpdateOne {
	ptuo.mutation.RemoveDoneIDs(ids...)
	return ptuo
}

// RemoveDones removes "dones" edges to PalacesTodoDone entities.
func (ptuo *PalacesTodoUpdateOne) RemoveDones(p ...*PalacesTodoDone) *PalacesTodoUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemoveDoneIDs(ids...)
}

// Where appends a list predicates to the PalacesTodoUpdate builder.
func (ptuo *PalacesTodoUpdateOne) Where(ps ...predicate.PalacesTodo) *PalacesTodoUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *PalacesTodoUpdateOne) Select(field string, fields ...string) *PalacesTodoUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated PalacesTodo entity.
func (ptuo *PalacesTodoUpdateOne) Save(ctx context.Context) (*PalacesTodo, error) {
	if err := ptuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PalacesTodoUpdateOne) SaveX(ctx context.Context) *PalacesTodo {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PalacesTodoUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PalacesTodoUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptuo *PalacesTodoUpdateOne) defaults() error {
	if _, ok := ptuo.mutation.CreatedAt(); !ok {
		if palacestodo.UpdateDefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized palacestodo.UpdateDefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := palacestodo.UpdateDefaultCreatedAt()
		ptuo.mutation.SetCreatedAt(v)
	}
	if _, ok := ptuo.mutation.UpdatedAt(); !ok {
		if palacestodo.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized palacestodo.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := palacestodo.UpdateDefaultUpdatedAt()
		ptuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *PalacesTodoUpdateOne) check() error {
	if v, ok := ptuo.mutation.Content(); ok {
		if err := palacestodo.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "PalacesTodo.content": %w`, err)}
		}
	}
	return nil
}

func (ptuo *PalacesTodoUpdateOne) sqlSave(ctx context.Context) (_node *PalacesTodo, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(palacestodo.Table, palacestodo.Columns, sqlgraph.NewFieldSpec(palacestodo.FieldID, field.TypeInt))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PalacesTodo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, palacestodo.FieldID)
		for _, f := range fields {
			if !palacestodo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != palacestodo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.CreatedAt(); ok {
		_spec.SetField(palacestodo.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(palacestodo.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.UpdatedAt(); ok {
		_spec.SetField(palacestodo.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(palacestodo.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.UpdatedBy(); ok {
		_spec.SetField(palacestodo.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(palacestodo.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.DeletedAt(); ok {
		_spec.SetField(palacestodo.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(palacestodo.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.DeletedBy(); ok {
		_spec.SetField(palacestodo.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(palacestodo.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.AccountID(); ok {
		_spec.SetField(palacestodo.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AddedAccountID(); ok {
		_spec.AddField(palacestodo.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.Theme(); ok {
		_spec.SetField(palacestodo.FieldTheme, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.GetType(); ok {
		_spec.SetField(palacestodo.FieldType, field.TypeInt8, value)
	}
	if value, ok := ptuo.mutation.AddedType(); ok {
		_spec.AddField(palacestodo.FieldType, field.TypeInt8, value)
	}
	if value, ok := ptuo.mutation.From(); ok {
		_spec.SetField(palacestodo.FieldFrom, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.AddedFrom(); ok {
		_spec.AddField(palacestodo.FieldFrom, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.To(); ok {
		_spec.SetField(palacestodo.FieldTo, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.AddedTo(); ok {
		_spec.AddField(palacestodo.FieldTo, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.Num(); ok {
		_spec.SetField(palacestodo.FieldNum, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.AddedNum(); ok {
		_spec.AddField(palacestodo.FieldNum, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.Sort(); ok {
		_spec.SetField(palacestodo.FieldSort, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.AddedSort(); ok {
		_spec.AddField(palacestodo.FieldSort, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.Content(); ok {
		_spec.SetField(palacestodo.FieldContent, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Status(); ok {
		_spec.SetField(palacestodo.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ptuo.mutation.AddedStatus(); ok {
		_spec.AddField(palacestodo.FieldStatus, field.TypeInt8, value)
	}
	if ptuo.mutation.DonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   palacestodo.DonesTable,
			Columns: []string{palacestodo.DonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(palacestododone.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedDonesIDs(); len(nodes) > 0 && !ptuo.mutation.DonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   palacestodo.DonesTable,
			Columns: []string{palacestodo.DonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(palacestododone.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.DonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   palacestodo.DonesTable,
			Columns: []string{palacestodo.DonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(palacestododone.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PalacesTodo{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{palacestodo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
