// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/filesextend"
	"blog/internal/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FilesExtendUpdate is the builder for updating FilesExtend entities.
type FilesExtendUpdate struct {
	config
	hooks    []Hook
	mutation *FilesExtendMutation
}

// Where appends a list predicates to the FilesExtendUpdate builder.
func (feu *FilesExtendUpdate) Where(ps ...predicate.FilesExtend) *FilesExtendUpdate {
	feu.mutation.Where(ps...)
	return feu
}

// SetUpdatedAt sets the "updated_at" field.
func (feu *FilesExtendUpdate) SetUpdatedAt(i int64) *FilesExtendUpdate {
	feu.mutation.ResetUpdatedAt()
	feu.mutation.SetUpdatedAt(i)
	return feu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (feu *FilesExtendUpdate) AddUpdatedAt(i int64) *FilesExtendUpdate {
	feu.mutation.AddUpdatedAt(i)
	return feu
}

// SetUpdatedBy sets the "updated_by" field.
func (feu *FilesExtendUpdate) SetUpdatedBy(i int64) *FilesExtendUpdate {
	feu.mutation.ResetUpdatedBy()
	feu.mutation.SetUpdatedBy(i)
	return feu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (feu *FilesExtendUpdate) SetNillableUpdatedBy(i *int64) *FilesExtendUpdate {
	if i != nil {
		feu.SetUpdatedBy(*i)
	}
	return feu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (feu *FilesExtendUpdate) AddUpdatedBy(i int64) *FilesExtendUpdate {
	feu.mutation.AddUpdatedBy(i)
	return feu
}

// SetDeletedAt sets the "deleted_at" field.
func (feu *FilesExtendUpdate) SetDeletedAt(i int64) *FilesExtendUpdate {
	feu.mutation.ResetDeletedAt()
	feu.mutation.SetDeletedAt(i)
	return feu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (feu *FilesExtendUpdate) SetNillableDeletedAt(i *int64) *FilesExtendUpdate {
	if i != nil {
		feu.SetDeletedAt(*i)
	}
	return feu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (feu *FilesExtendUpdate) AddDeletedAt(i int64) *FilesExtendUpdate {
	feu.mutation.AddDeletedAt(i)
	return feu
}

// SetDeletedBy sets the "deleted_by" field.
func (feu *FilesExtendUpdate) SetDeletedBy(i int64) *FilesExtendUpdate {
	feu.mutation.ResetDeletedBy()
	feu.mutation.SetDeletedBy(i)
	return feu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (feu *FilesExtendUpdate) SetNillableDeletedBy(i *int64) *FilesExtendUpdate {
	if i != nil {
		feu.SetDeletedBy(*i)
	}
	return feu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (feu *FilesExtendUpdate) AddDeletedBy(i int64) *FilesExtendUpdate {
	feu.mutation.AddDeletedBy(i)
	return feu
}

// SetFileID sets the "file_id" field.
func (feu *FilesExtendUpdate) SetFileID(s string) *FilesExtendUpdate {
	feu.mutation.SetFileID(s)
	return feu
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (feu *FilesExtendUpdate) SetNillableFileID(s *string) *FilesExtendUpdate {
	if s != nil {
		feu.SetFileID(*s)
	}
	return feu
}

// SetUserID sets the "user_id" field.
func (feu *FilesExtendUpdate) SetUserID(i int) *FilesExtendUpdate {
	feu.mutation.ResetUserID()
	feu.mutation.SetUserID(i)
	return feu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (feu *FilesExtendUpdate) SetNillableUserID(i *int) *FilesExtendUpdate {
	if i != nil {
		feu.SetUserID(*i)
	}
	return feu
}

// AddUserID adds i to the "user_id" field.
func (feu *FilesExtendUpdate) AddUserID(i int) *FilesExtendUpdate {
	feu.mutation.AddUserID(i)
	return feu
}

// SetFrom sets the "from" field.
func (feu *FilesExtendUpdate) SetFrom(s string) *FilesExtendUpdate {
	feu.mutation.SetFrom(s)
	return feu
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (feu *FilesExtendUpdate) SetNillableFrom(s *string) *FilesExtendUpdate {
	if s != nil {
		feu.SetFrom(*s)
	}
	return feu
}

// SetFromID sets the "from_id" field.
func (feu *FilesExtendUpdate) SetFromID(i int) *FilesExtendUpdate {
	feu.mutation.ResetFromID()
	feu.mutation.SetFromID(i)
	return feu
}

// SetNillableFromID sets the "from_id" field if the given value is not nil.
func (feu *FilesExtendUpdate) SetNillableFromID(i *int) *FilesExtendUpdate {
	if i != nil {
		feu.SetFromID(*i)
	}
	return feu
}

// AddFromID adds i to the "from_id" field.
func (feu *FilesExtendUpdate) AddFromID(i int) *FilesExtendUpdate {
	feu.mutation.AddFromID(i)
	return feu
}

// SetIsHidden sets the "is_hidden" field.
func (feu *FilesExtendUpdate) SetIsHidden(i int8) *FilesExtendUpdate {
	feu.mutation.ResetIsHidden()
	feu.mutation.SetIsHidden(i)
	return feu
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (feu *FilesExtendUpdate) SetNillableIsHidden(i *int8) *FilesExtendUpdate {
	if i != nil {
		feu.SetIsHidden(*i)
	}
	return feu
}

// AddIsHidden adds i to the "is_hidden" field.
func (feu *FilesExtendUpdate) AddIsHidden(i int8) *FilesExtendUpdate {
	feu.mutation.AddIsHidden(i)
	return feu
}

// Mutation returns the FilesExtendMutation object of the builder.
func (feu *FilesExtendUpdate) Mutation() *FilesExtendMutation {
	return feu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (feu *FilesExtendUpdate) Save(ctx context.Context) (int, error) {
	if err := feu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, feu.sqlSave, feu.mutation, feu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (feu *FilesExtendUpdate) SaveX(ctx context.Context) int {
	affected, err := feu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (feu *FilesExtendUpdate) Exec(ctx context.Context) error {
	_, err := feu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (feu *FilesExtendUpdate) ExecX(ctx context.Context) {
	if err := feu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (feu *FilesExtendUpdate) defaults() error {
	if _, ok := feu.mutation.UpdatedAt(); !ok {
		if filesextend.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized filesextend.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := filesextend.UpdateDefaultUpdatedAt()
		feu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (feu *FilesExtendUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(filesextend.Table, filesextend.Columns, sqlgraph.NewFieldSpec(filesextend.FieldID, field.TypeInt))
	if ps := feu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := feu.mutation.UpdatedAt(); ok {
		_spec.SetField(filesextend.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := feu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(filesextend.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := feu.mutation.UpdatedBy(); ok {
		_spec.SetField(filesextend.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := feu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(filesextend.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := feu.mutation.DeletedAt(); ok {
		_spec.SetField(filesextend.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := feu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(filesextend.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := feu.mutation.DeletedBy(); ok {
		_spec.SetField(filesextend.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := feu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(filesextend.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := feu.mutation.FileID(); ok {
		_spec.SetField(filesextend.FieldFileID, field.TypeString, value)
	}
	if value, ok := feu.mutation.UserID(); ok {
		_spec.SetField(filesextend.FieldUserID, field.TypeInt, value)
	}
	if value, ok := feu.mutation.AddedUserID(); ok {
		_spec.AddField(filesextend.FieldUserID, field.TypeInt, value)
	}
	if value, ok := feu.mutation.From(); ok {
		_spec.SetField(filesextend.FieldFrom, field.TypeString, value)
	}
	if value, ok := feu.mutation.FromID(); ok {
		_spec.SetField(filesextend.FieldFromID, field.TypeInt, value)
	}
	if value, ok := feu.mutation.AddedFromID(); ok {
		_spec.AddField(filesextend.FieldFromID, field.TypeInt, value)
	}
	if value, ok := feu.mutation.IsHidden(); ok {
		_spec.SetField(filesextend.FieldIsHidden, field.TypeInt8, value)
	}
	if value, ok := feu.mutation.AddedIsHidden(); ok {
		_spec.AddField(filesextend.FieldIsHidden, field.TypeInt8, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, feu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filesextend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	feu.mutation.done = true
	return n, nil
}

// FilesExtendUpdateOne is the builder for updating a single FilesExtend entity.
type FilesExtendUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FilesExtendMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (feuo *FilesExtendUpdateOne) SetUpdatedAt(i int64) *FilesExtendUpdateOne {
	feuo.mutation.ResetUpdatedAt()
	feuo.mutation.SetUpdatedAt(i)
	return feuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (feuo *FilesExtendUpdateOne) AddUpdatedAt(i int64) *FilesExtendUpdateOne {
	feuo.mutation.AddUpdatedAt(i)
	return feuo
}

// SetUpdatedBy sets the "updated_by" field.
func (feuo *FilesExtendUpdateOne) SetUpdatedBy(i int64) *FilesExtendUpdateOne {
	feuo.mutation.ResetUpdatedBy()
	feuo.mutation.SetUpdatedBy(i)
	return feuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (feuo *FilesExtendUpdateOne) SetNillableUpdatedBy(i *int64) *FilesExtendUpdateOne {
	if i != nil {
		feuo.SetUpdatedBy(*i)
	}
	return feuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (feuo *FilesExtendUpdateOne) AddUpdatedBy(i int64) *FilesExtendUpdateOne {
	feuo.mutation.AddUpdatedBy(i)
	return feuo
}

// SetDeletedAt sets the "deleted_at" field.
func (feuo *FilesExtendUpdateOne) SetDeletedAt(i int64) *FilesExtendUpdateOne {
	feuo.mutation.ResetDeletedAt()
	feuo.mutation.SetDeletedAt(i)
	return feuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (feuo *FilesExtendUpdateOne) SetNillableDeletedAt(i *int64) *FilesExtendUpdateOne {
	if i != nil {
		feuo.SetDeletedAt(*i)
	}
	return feuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (feuo *FilesExtendUpdateOne) AddDeletedAt(i int64) *FilesExtendUpdateOne {
	feuo.mutation.AddDeletedAt(i)
	return feuo
}

// SetDeletedBy sets the "deleted_by" field.
func (feuo *FilesExtendUpdateOne) SetDeletedBy(i int64) *FilesExtendUpdateOne {
	feuo.mutation.ResetDeletedBy()
	feuo.mutation.SetDeletedBy(i)
	return feuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (feuo *FilesExtendUpdateOne) SetNillableDeletedBy(i *int64) *FilesExtendUpdateOne {
	if i != nil {
		feuo.SetDeletedBy(*i)
	}
	return feuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (feuo *FilesExtendUpdateOne) AddDeletedBy(i int64) *FilesExtendUpdateOne {
	feuo.mutation.AddDeletedBy(i)
	return feuo
}

// SetFileID sets the "file_id" field.
func (feuo *FilesExtendUpdateOne) SetFileID(s string) *FilesExtendUpdateOne {
	feuo.mutation.SetFileID(s)
	return feuo
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (feuo *FilesExtendUpdateOne) SetNillableFileID(s *string) *FilesExtendUpdateOne {
	if s != nil {
		feuo.SetFileID(*s)
	}
	return feuo
}

// SetUserID sets the "user_id" field.
func (feuo *FilesExtendUpdateOne) SetUserID(i int) *FilesExtendUpdateOne {
	feuo.mutation.ResetUserID()
	feuo.mutation.SetUserID(i)
	return feuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (feuo *FilesExtendUpdateOne) SetNillableUserID(i *int) *FilesExtendUpdateOne {
	if i != nil {
		feuo.SetUserID(*i)
	}
	return feuo
}

// AddUserID adds i to the "user_id" field.
func (feuo *FilesExtendUpdateOne) AddUserID(i int) *FilesExtendUpdateOne {
	feuo.mutation.AddUserID(i)
	return feuo
}

// SetFrom sets the "from" field.
func (feuo *FilesExtendUpdateOne) SetFrom(s string) *FilesExtendUpdateOne {
	feuo.mutation.SetFrom(s)
	return feuo
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (feuo *FilesExtendUpdateOne) SetNillableFrom(s *string) *FilesExtendUpdateOne {
	if s != nil {
		feuo.SetFrom(*s)
	}
	return feuo
}

// SetFromID sets the "from_id" field.
func (feuo *FilesExtendUpdateOne) SetFromID(i int) *FilesExtendUpdateOne {
	feuo.mutation.ResetFromID()
	feuo.mutation.SetFromID(i)
	return feuo
}

// SetNillableFromID sets the "from_id" field if the given value is not nil.
func (feuo *FilesExtendUpdateOne) SetNillableFromID(i *int) *FilesExtendUpdateOne {
	if i != nil {
		feuo.SetFromID(*i)
	}
	return feuo
}

// AddFromID adds i to the "from_id" field.
func (feuo *FilesExtendUpdateOne) AddFromID(i int) *FilesExtendUpdateOne {
	feuo.mutation.AddFromID(i)
	return feuo
}

// SetIsHidden sets the "is_hidden" field.
func (feuo *FilesExtendUpdateOne) SetIsHidden(i int8) *FilesExtendUpdateOne {
	feuo.mutation.ResetIsHidden()
	feuo.mutation.SetIsHidden(i)
	return feuo
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (feuo *FilesExtendUpdateOne) SetNillableIsHidden(i *int8) *FilesExtendUpdateOne {
	if i != nil {
		feuo.SetIsHidden(*i)
	}
	return feuo
}

// AddIsHidden adds i to the "is_hidden" field.
func (feuo *FilesExtendUpdateOne) AddIsHidden(i int8) *FilesExtendUpdateOne {
	feuo.mutation.AddIsHidden(i)
	return feuo
}

// Mutation returns the FilesExtendMutation object of the builder.
func (feuo *FilesExtendUpdateOne) Mutation() *FilesExtendMutation {
	return feuo.mutation
}

// Where appends a list predicates to the FilesExtendUpdate builder.
func (feuo *FilesExtendUpdateOne) Where(ps ...predicate.FilesExtend) *FilesExtendUpdateOne {
	feuo.mutation.Where(ps...)
	return feuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (feuo *FilesExtendUpdateOne) Select(field string, fields ...string) *FilesExtendUpdateOne {
	feuo.fields = append([]string{field}, fields...)
	return feuo
}

// Save executes the query and returns the updated FilesExtend entity.
func (feuo *FilesExtendUpdateOne) Save(ctx context.Context) (*FilesExtend, error) {
	if err := feuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, feuo.sqlSave, feuo.mutation, feuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (feuo *FilesExtendUpdateOne) SaveX(ctx context.Context) *FilesExtend {
	node, err := feuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (feuo *FilesExtendUpdateOne) Exec(ctx context.Context) error {
	_, err := feuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (feuo *FilesExtendUpdateOne) ExecX(ctx context.Context) {
	if err := feuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (feuo *FilesExtendUpdateOne) defaults() error {
	if _, ok := feuo.mutation.UpdatedAt(); !ok {
		if filesextend.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized filesextend.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := filesextend.UpdateDefaultUpdatedAt()
		feuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (feuo *FilesExtendUpdateOne) sqlSave(ctx context.Context) (_node *FilesExtend, err error) {
	_spec := sqlgraph.NewUpdateSpec(filesextend.Table, filesextend.Columns, sqlgraph.NewFieldSpec(filesextend.FieldID, field.TypeInt))
	id, ok := feuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FilesExtend.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := feuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filesextend.FieldID)
		for _, f := range fields {
			if !filesextend.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filesextend.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := feuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := feuo.mutation.UpdatedAt(); ok {
		_spec.SetField(filesextend.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := feuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(filesextend.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := feuo.mutation.UpdatedBy(); ok {
		_spec.SetField(filesextend.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := feuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(filesextend.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := feuo.mutation.DeletedAt(); ok {
		_spec.SetField(filesextend.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := feuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(filesextend.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := feuo.mutation.DeletedBy(); ok {
		_spec.SetField(filesextend.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := feuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(filesextend.FieldDeletedBy, field.TypeInt64, value)
	}
	if value, ok := feuo.mutation.FileID(); ok {
		_spec.SetField(filesextend.FieldFileID, field.TypeString, value)
	}
	if value, ok := feuo.mutation.UserID(); ok {
		_spec.SetField(filesextend.FieldUserID, field.TypeInt, value)
	}
	if value, ok := feuo.mutation.AddedUserID(); ok {
		_spec.AddField(filesextend.FieldUserID, field.TypeInt, value)
	}
	if value, ok := feuo.mutation.From(); ok {
		_spec.SetField(filesextend.FieldFrom, field.TypeString, value)
	}
	if value, ok := feuo.mutation.FromID(); ok {
		_spec.SetField(filesextend.FieldFromID, field.TypeInt, value)
	}
	if value, ok := feuo.mutation.AddedFromID(); ok {
		_spec.AddField(filesextend.FieldFromID, field.TypeInt, value)
	}
	if value, ok := feuo.mutation.IsHidden(); ok {
		_spec.SetField(filesextend.FieldIsHidden, field.TypeInt8, value)
	}
	if value, ok := feuo.mutation.AddedIsHidden(); ok {
		_spec.AddField(filesextend.FieldIsHidden, field.TypeInt8, value)
	}
	_node = &FilesExtend{config: feuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, feuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filesextend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	feuo.mutation.done = true
	return _node, nil
}
