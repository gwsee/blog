// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog/internal/ent/accountexperience"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 经历表
type AccountExperience struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 创建人
	CreatedBy int64 `json:"created_by,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 更新人
	UpdatedBy int64 `json:"updated_by,omitempty"`
	// 软删除时间
	DeletedAt int64 `json:"deleted_at,omitempty"`
	// 删除人
	DeletedBy int64 `json:"deleted_by,omitempty"`
	// 用户ID
	UserID int `json:"user_id,omitempty"`
	// 公司名称
	Company string `json:"company,omitempty"`
	// 职位名称
	Role string `json:"role,omitempty"`
	// 公司地址
	Location string `json:"location,omitempty"`
	// 开始时间
	Start int64 `json:"start,omitempty"`
	// 结束时间
	End int64 `json:"end,omitempty"`
	// 职位描述
	Description string `json:"description,omitempty"`
	// 主要职责
	Responsibilities string `json:"responsibilities,omitempty"`
	// 工作成就
	Achievements string `json:"achievements,omitempty"`
	// 使用技能
	Skills       []string `json:"skills,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccountExperience) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case accountexperience.FieldSkills:
			values[i] = new([]byte)
		case accountexperience.FieldID, accountexperience.FieldCreatedAt, accountexperience.FieldCreatedBy, accountexperience.FieldUpdatedAt, accountexperience.FieldUpdatedBy, accountexperience.FieldDeletedAt, accountexperience.FieldDeletedBy, accountexperience.FieldUserID, accountexperience.FieldStart, accountexperience.FieldEnd:
			values[i] = new(sql.NullInt64)
		case accountexperience.FieldCompany, accountexperience.FieldRole, accountexperience.FieldLocation, accountexperience.FieldDescription, accountexperience.FieldResponsibilities, accountexperience.FieldAchievements:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccountExperience fields.
func (ae *AccountExperience) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accountexperience.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ae.ID = int(value.Int64)
		case accountexperience.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ae.CreatedAt = value.Int64
			}
		case accountexperience.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ae.CreatedBy = value.Int64
			}
		case accountexperience.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ae.UpdatedAt = value.Int64
			}
		case accountexperience.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ae.UpdatedBy = value.Int64
			}
		case accountexperience.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ae.DeletedAt = value.Int64
			}
		case accountexperience.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				ae.DeletedBy = value.Int64
			}
		case accountexperience.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ae.UserID = int(value.Int64)
			}
		case accountexperience.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				ae.Company = value.String
			}
		case accountexperience.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				ae.Role = value.String
			}
		case accountexperience.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				ae.Location = value.String
			}
		case accountexperience.FieldStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				ae.Start = value.Int64
			}
		case accountexperience.FieldEnd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				ae.End = value.Int64
			}
		case accountexperience.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ae.Description = value.String
			}
		case accountexperience.FieldResponsibilities:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field responsibilities", values[i])
			} else if value.Valid {
				ae.Responsibilities = value.String
			}
		case accountexperience.FieldAchievements:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field achievements", values[i])
			} else if value.Valid {
				ae.Achievements = value.String
			}
		case accountexperience.FieldSkills:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field skills", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ae.Skills); err != nil {
					return fmt.Errorf("unmarshal field skills: %w", err)
				}
			}
		default:
			ae.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AccountExperience.
// This includes values selected through modifiers, order, etc.
func (ae *AccountExperience) Value(name string) (ent.Value, error) {
	return ae.selectValues.Get(name)
}

// Update returns a builder for updating this AccountExperience.
// Note that you need to call AccountExperience.Unwrap() before calling this method if this AccountExperience
// was returned from a transaction, and the transaction was committed or rolled back.
func (ae *AccountExperience) Update() *AccountExperienceUpdateOne {
	return NewAccountExperienceClient(ae.config).UpdateOne(ae)
}

// Unwrap unwraps the AccountExperience entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ae *AccountExperience) Unwrap() *AccountExperience {
	_tx, ok := ae.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccountExperience is not a transactional entity")
	}
	ae.config.driver = _tx.drv
	return ae
}

// String implements the fmt.Stringer.
func (ae *AccountExperience) String() string {
	var builder strings.Builder
	builder.WriteString("AccountExperience(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ae.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ae.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ae.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ae.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ae.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ae.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(fmt.Sprintf("%v", ae.DeletedBy))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ae.UserID))
	builder.WriteString(", ")
	builder.WriteString("company=")
	builder.WriteString(ae.Company)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(ae.Role)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(ae.Location)
	builder.WriteString(", ")
	builder.WriteString("start=")
	builder.WriteString(fmt.Sprintf("%v", ae.Start))
	builder.WriteString(", ")
	builder.WriteString("end=")
	builder.WriteString(fmt.Sprintf("%v", ae.End))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ae.Description)
	builder.WriteString(", ")
	builder.WriteString("responsibilities=")
	builder.WriteString(ae.Responsibilities)
	builder.WriteString(", ")
	builder.WriteString("achievements=")
	builder.WriteString(ae.Achievements)
	builder.WriteString(", ")
	builder.WriteString("skills=")
	builder.WriteString(fmt.Sprintf("%v", ae.Skills))
	builder.WriteByte(')')
	return builder.String()
}

// AccountExperiences is a parsable slice of AccountExperience.
type AccountExperiences []*AccountExperience
