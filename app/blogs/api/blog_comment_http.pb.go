// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.28.2
// source: app/blogs/api/blog_comment.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBlogCommentCreateBlogComment = "/app.blogs.api.BlogComment/CreateBlogComment"
const OperationBlogCommentDeleteBlogComment = "/app.blogs.api.BlogComment/DeleteBlogComment"
const OperationBlogCommentGetBlogComment = "/app.blogs.api.BlogComment/GetBlogComment"
const OperationBlogCommentListBlogComment = "/app.blogs.api.BlogComment/ListBlogComment"
const OperationBlogCommentUpdateBlogComment = "/app.blogs.api.BlogComment/UpdateBlogComment"

type BlogCommentHTTPServer interface {
	CreateBlogComment(context.Context, *CreateBlogCommentRequest) (*CreateBlogCommentReply, error)
	DeleteBlogComment(context.Context, *DeleteBlogCommentRequest) (*DeleteBlogCommentReply, error)
	GetBlogComment(context.Context, *GetBlogCommentRequest) (*GetBlogCommentReply, error)
	ListBlogComment(context.Context, *ListBlogCommentRequest) (*ListBlogCommentReply, error)
	UpdateBlogComment(context.Context, *UpdateBlogCommentRequest) (*UpdateBlogCommentReply, error)
}

func RegisterBlogCommentHTTPServer(s *http.Server, srv BlogCommentHTTPServer) {
	r := s.Route("/")
	r.POST("/app.blogs.api.BlogComment/CreateBlogComment", _BlogComment_CreateBlogComment0_HTTP_Handler(srv))
	r.POST("/app.blogs.api.BlogComment/UpdateBlogComment", _BlogComment_UpdateBlogComment0_HTTP_Handler(srv))
	r.POST("/app.blogs.api.BlogComment/DeleteBlogComment", _BlogComment_DeleteBlogComment0_HTTP_Handler(srv))
	r.POST("/app.blogs.api.BlogComment/GetBlogComment", _BlogComment_GetBlogComment0_HTTP_Handler(srv))
	r.POST("/app.blogs.api.BlogComment/ListBlogComment", _BlogComment_ListBlogComment0_HTTP_Handler(srv))
}

func _BlogComment_CreateBlogComment0_HTTP_Handler(srv BlogCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBlogCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogCommentCreateBlogComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBlogComment(ctx, req.(*CreateBlogCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateBlogCommentReply)
		return ctx.Result(200, reply)
	}
}

func _BlogComment_UpdateBlogComment0_HTTP_Handler(srv BlogCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBlogCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogCommentUpdateBlogComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBlogComment(ctx, req.(*UpdateBlogCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateBlogCommentReply)
		return ctx.Result(200, reply)
	}
}

func _BlogComment_DeleteBlogComment0_HTTP_Handler(srv BlogCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBlogCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogCommentDeleteBlogComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBlogComment(ctx, req.(*DeleteBlogCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteBlogCommentReply)
		return ctx.Result(200, reply)
	}
}

func _BlogComment_GetBlogComment0_HTTP_Handler(srv BlogCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBlogCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogCommentGetBlogComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBlogComment(ctx, req.(*GetBlogCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBlogCommentReply)
		return ctx.Result(200, reply)
	}
}

func _BlogComment_ListBlogComment0_HTTP_Handler(srv BlogCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBlogCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogCommentListBlogComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBlogComment(ctx, req.(*ListBlogCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBlogCommentReply)
		return ctx.Result(200, reply)
	}
}

type BlogCommentHTTPClient interface {
	CreateBlogComment(ctx context.Context, req *CreateBlogCommentRequest, opts ...http.CallOption) (rsp *CreateBlogCommentReply, err error)
	DeleteBlogComment(ctx context.Context, req *DeleteBlogCommentRequest, opts ...http.CallOption) (rsp *DeleteBlogCommentReply, err error)
	GetBlogComment(ctx context.Context, req *GetBlogCommentRequest, opts ...http.CallOption) (rsp *GetBlogCommentReply, err error)
	ListBlogComment(ctx context.Context, req *ListBlogCommentRequest, opts ...http.CallOption) (rsp *ListBlogCommentReply, err error)
	UpdateBlogComment(ctx context.Context, req *UpdateBlogCommentRequest, opts ...http.CallOption) (rsp *UpdateBlogCommentReply, err error)
}

type BlogCommentHTTPClientImpl struct {
	cc *http.Client
}

func NewBlogCommentHTTPClient(client *http.Client) BlogCommentHTTPClient {
	return &BlogCommentHTTPClientImpl{client}
}

func (c *BlogCommentHTTPClientImpl) CreateBlogComment(ctx context.Context, in *CreateBlogCommentRequest, opts ...http.CallOption) (*CreateBlogCommentReply, error) {
	var out CreateBlogCommentReply
	pattern := "/app.blogs.api.BlogComment/CreateBlogComment"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogCommentCreateBlogComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogCommentHTTPClientImpl) DeleteBlogComment(ctx context.Context, in *DeleteBlogCommentRequest, opts ...http.CallOption) (*DeleteBlogCommentReply, error) {
	var out DeleteBlogCommentReply
	pattern := "/app.blogs.api.BlogComment/DeleteBlogComment"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogCommentDeleteBlogComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogCommentHTTPClientImpl) GetBlogComment(ctx context.Context, in *GetBlogCommentRequest, opts ...http.CallOption) (*GetBlogCommentReply, error) {
	var out GetBlogCommentReply
	pattern := "/app.blogs.api.BlogComment/GetBlogComment"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogCommentGetBlogComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogCommentHTTPClientImpl) ListBlogComment(ctx context.Context, in *ListBlogCommentRequest, opts ...http.CallOption) (*ListBlogCommentReply, error) {
	var out ListBlogCommentReply
	pattern := "/app.blogs.api.BlogComment/ListBlogComment"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogCommentListBlogComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogCommentHTTPClientImpl) UpdateBlogComment(ctx context.Context, in *UpdateBlogCommentRequest, opts ...http.CallOption) (*UpdateBlogCommentReply, error) {
	var out UpdateBlogCommentReply
	pattern := "/app.blogs.api.BlogComment/UpdateBlogComment"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogCommentUpdateBlogComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
