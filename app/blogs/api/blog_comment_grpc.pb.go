// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: app/blogs/api/blog_comment.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlogComment_CreateBlogComment_FullMethodName = "/app.blogs.api.BlogComment/CreateBlogComment"
	BlogComment_UpdateBlogComment_FullMethodName = "/app.blogs.api.BlogComment/UpdateBlogComment"
	BlogComment_DeleteBlogComment_FullMethodName = "/app.blogs.api.BlogComment/DeleteBlogComment"
	BlogComment_GetBlogComment_FullMethodName    = "/app.blogs.api.BlogComment/GetBlogComment"
	BlogComment_ListBlogComment_FullMethodName   = "/app.blogs.api.BlogComment/ListBlogComment"
)

// BlogCommentClient is the client API for BlogComment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogCommentClient interface {
	CreateBlogComment(ctx context.Context, in *CreateBlogCommentRequest, opts ...grpc.CallOption) (*CreateBlogCommentReply, error)
	UpdateBlogComment(ctx context.Context, in *UpdateBlogCommentRequest, opts ...grpc.CallOption) (*UpdateBlogCommentReply, error)
	DeleteBlogComment(ctx context.Context, in *DeleteBlogCommentRequest, opts ...grpc.CallOption) (*DeleteBlogCommentReply, error)
	GetBlogComment(ctx context.Context, in *GetBlogCommentRequest, opts ...grpc.CallOption) (*GetBlogCommentReply, error)
	ListBlogComment(ctx context.Context, in *ListBlogCommentRequest, opts ...grpc.CallOption) (*ListBlogCommentReply, error)
}

type blogCommentClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogCommentClient(cc grpc.ClientConnInterface) BlogCommentClient {
	return &blogCommentClient{cc}
}

func (c *blogCommentClient) CreateBlogComment(ctx context.Context, in *CreateBlogCommentRequest, opts ...grpc.CallOption) (*CreateBlogCommentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBlogCommentReply)
	err := c.cc.Invoke(ctx, BlogComment_CreateBlogComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogCommentClient) UpdateBlogComment(ctx context.Context, in *UpdateBlogCommentRequest, opts ...grpc.CallOption) (*UpdateBlogCommentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBlogCommentReply)
	err := c.cc.Invoke(ctx, BlogComment_UpdateBlogComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogCommentClient) DeleteBlogComment(ctx context.Context, in *DeleteBlogCommentRequest, opts ...grpc.CallOption) (*DeleteBlogCommentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBlogCommentReply)
	err := c.cc.Invoke(ctx, BlogComment_DeleteBlogComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogCommentClient) GetBlogComment(ctx context.Context, in *GetBlogCommentRequest, opts ...grpc.CallOption) (*GetBlogCommentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlogCommentReply)
	err := c.cc.Invoke(ctx, BlogComment_GetBlogComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogCommentClient) ListBlogComment(ctx context.Context, in *ListBlogCommentRequest, opts ...grpc.CallOption) (*ListBlogCommentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBlogCommentReply)
	err := c.cc.Invoke(ctx, BlogComment_ListBlogComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogCommentServer is the server API for BlogComment service.
// All implementations must embed UnimplementedBlogCommentServer
// for forward compatibility.
type BlogCommentServer interface {
	CreateBlogComment(context.Context, *CreateBlogCommentRequest) (*CreateBlogCommentReply, error)
	UpdateBlogComment(context.Context, *UpdateBlogCommentRequest) (*UpdateBlogCommentReply, error)
	DeleteBlogComment(context.Context, *DeleteBlogCommentRequest) (*DeleteBlogCommentReply, error)
	GetBlogComment(context.Context, *GetBlogCommentRequest) (*GetBlogCommentReply, error)
	ListBlogComment(context.Context, *ListBlogCommentRequest) (*ListBlogCommentReply, error)
	mustEmbedUnimplementedBlogCommentServer()
}

// UnimplementedBlogCommentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlogCommentServer struct{}

func (UnimplementedBlogCommentServer) CreateBlogComment(context.Context, *CreateBlogCommentRequest) (*CreateBlogCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlogComment not implemented")
}
func (UnimplementedBlogCommentServer) UpdateBlogComment(context.Context, *UpdateBlogCommentRequest) (*UpdateBlogCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlogComment not implemented")
}
func (UnimplementedBlogCommentServer) DeleteBlogComment(context.Context, *DeleteBlogCommentRequest) (*DeleteBlogCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlogComment not implemented")
}
func (UnimplementedBlogCommentServer) GetBlogComment(context.Context, *GetBlogCommentRequest) (*GetBlogCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogComment not implemented")
}
func (UnimplementedBlogCommentServer) ListBlogComment(context.Context, *ListBlogCommentRequest) (*ListBlogCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlogComment not implemented")
}
func (UnimplementedBlogCommentServer) mustEmbedUnimplementedBlogCommentServer() {}
func (UnimplementedBlogCommentServer) testEmbeddedByValue()                     {}

// UnsafeBlogCommentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogCommentServer will
// result in compilation errors.
type UnsafeBlogCommentServer interface {
	mustEmbedUnimplementedBlogCommentServer()
}

func RegisterBlogCommentServer(s grpc.ServiceRegistrar, srv BlogCommentServer) {
	// If the following call pancis, it indicates UnimplementedBlogCommentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlogComment_ServiceDesc, srv)
}

func _BlogComment_CreateBlogComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlogCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogCommentServer).CreateBlogComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogComment_CreateBlogComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogCommentServer).CreateBlogComment(ctx, req.(*CreateBlogCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogComment_UpdateBlogComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlogCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogCommentServer).UpdateBlogComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogComment_UpdateBlogComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogCommentServer).UpdateBlogComment(ctx, req.(*UpdateBlogCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogComment_DeleteBlogComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogCommentServer).DeleteBlogComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogComment_DeleteBlogComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogCommentServer).DeleteBlogComment(ctx, req.(*DeleteBlogCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogComment_GetBlogComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogCommentServer).GetBlogComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogComment_GetBlogComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogCommentServer).GetBlogComment(ctx, req.(*GetBlogCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogComment_ListBlogComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlogCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogCommentServer).ListBlogComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogComment_ListBlogComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogCommentServer).ListBlogComment(ctx, req.(*ListBlogCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogComment_ServiceDesc is the grpc.ServiceDesc for BlogComment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogComment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.blogs.api.BlogComment",
	HandlerType: (*BlogCommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlogComment",
			Handler:    _BlogComment_CreateBlogComment_Handler,
		},
		{
			MethodName: "UpdateBlogComment",
			Handler:    _BlogComment_UpdateBlogComment_Handler,
		},
		{
			MethodName: "DeleteBlogComment",
			Handler:    _BlogComment_DeleteBlogComment_Handler,
		},
		{
			MethodName: "GetBlogComment",
			Handler:    _BlogComment_GetBlogComment_Handler,
		},
		{
			MethodName: "ListBlogComment",
			Handler:    _BlogComment_ListBlogComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/blogs/api/blog_comment.proto",
}
