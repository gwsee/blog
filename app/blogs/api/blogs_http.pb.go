// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.28.2
// source: app/blogs/api/blogs.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBlogsCreateBlogs = "/app.blogs.api.Blogs/CreateBlogs"
const OperationBlogsDeleteBlogs = "/app.blogs.api.Blogs/DeleteBlogs"
const OperationBlogsGetBlogs = "/app.blogs.api.Blogs/GetBlogs"
const OperationBlogsListBlogs = "/app.blogs.api.Blogs/ListBlogs"
const OperationBlogsUpdateBlogs = "/app.blogs.api.Blogs/UpdateBlogs"

type BlogsHTTPServer interface {
	CreateBlogs(context.Context, *CreateBlogsRequest) (*CreateBlogsReply, error)
	DeleteBlogs(context.Context, *DeleteBlogsRequest) (*DeleteBlogsReply, error)
	GetBlogs(context.Context, *GetBlogsRequest) (*GetBlogsReply, error)
	ListBlogs(context.Context, *ListBlogsRequest) (*ListBlogsReply, error)
	UpdateBlogs(context.Context, *UpdateBlogsRequest) (*UpdateBlogsReply, error)
}

func RegisterBlogsHTTPServer(s *http.Server, srv BlogsHTTPServer) {
	r := s.Route("/")
	r.POST("/app.blogs.api.Blogs/CreateBlogs", _Blogs_CreateBlogs0_HTTP_Handler(srv))
	r.POST("/app.blogs.api.Blogs/UpdateBlogs", _Blogs_UpdateBlogs0_HTTP_Handler(srv))
	r.POST("/app.blogs.api.Blogs/DeleteBlogs", _Blogs_DeleteBlogs0_HTTP_Handler(srv))
	r.POST("/app.blogs.api.Blogs/GetBlogs", _Blogs_GetBlogs0_HTTP_Handler(srv))
	r.POST("/app.blogs.api.Blogs/ListBlogs", _Blogs_ListBlogs0_HTTP_Handler(srv))
}

func _Blogs_CreateBlogs0_HTTP_Handler(srv BlogsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBlogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogsCreateBlogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBlogs(ctx, req.(*CreateBlogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateBlogsReply)
		return ctx.Result(200, reply)
	}
}

func _Blogs_UpdateBlogs0_HTTP_Handler(srv BlogsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBlogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogsUpdateBlogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBlogs(ctx, req.(*UpdateBlogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateBlogsReply)
		return ctx.Result(200, reply)
	}
}

func _Blogs_DeleteBlogs0_HTTP_Handler(srv BlogsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBlogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogsDeleteBlogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBlogs(ctx, req.(*DeleteBlogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteBlogsReply)
		return ctx.Result(200, reply)
	}
}

func _Blogs_GetBlogs0_HTTP_Handler(srv BlogsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBlogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogsGetBlogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBlogs(ctx, req.(*GetBlogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBlogsReply)
		return ctx.Result(200, reply)
	}
}

func _Blogs_ListBlogs0_HTTP_Handler(srv BlogsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBlogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogsListBlogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBlogs(ctx, req.(*ListBlogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBlogsReply)
		return ctx.Result(200, reply)
	}
}

type BlogsHTTPClient interface {
	CreateBlogs(ctx context.Context, req *CreateBlogsRequest, opts ...http.CallOption) (rsp *CreateBlogsReply, err error)
	DeleteBlogs(ctx context.Context, req *DeleteBlogsRequest, opts ...http.CallOption) (rsp *DeleteBlogsReply, err error)
	GetBlogs(ctx context.Context, req *GetBlogsRequest, opts ...http.CallOption) (rsp *GetBlogsReply, err error)
	ListBlogs(ctx context.Context, req *ListBlogsRequest, opts ...http.CallOption) (rsp *ListBlogsReply, err error)
	UpdateBlogs(ctx context.Context, req *UpdateBlogsRequest, opts ...http.CallOption) (rsp *UpdateBlogsReply, err error)
}

type BlogsHTTPClientImpl struct {
	cc *http.Client
}

func NewBlogsHTTPClient(client *http.Client) BlogsHTTPClient {
	return &BlogsHTTPClientImpl{client}
}

func (c *BlogsHTTPClientImpl) CreateBlogs(ctx context.Context, in *CreateBlogsRequest, opts ...http.CallOption) (*CreateBlogsReply, error) {
	var out CreateBlogsReply
	pattern := "/app.blogs.api.Blogs/CreateBlogs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogsCreateBlogs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogsHTTPClientImpl) DeleteBlogs(ctx context.Context, in *DeleteBlogsRequest, opts ...http.CallOption) (*DeleteBlogsReply, error) {
	var out DeleteBlogsReply
	pattern := "/app.blogs.api.Blogs/DeleteBlogs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogsDeleteBlogs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogsHTTPClientImpl) GetBlogs(ctx context.Context, in *GetBlogsRequest, opts ...http.CallOption) (*GetBlogsReply, error) {
	var out GetBlogsReply
	pattern := "/app.blogs.api.Blogs/GetBlogs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogsGetBlogs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogsHTTPClientImpl) ListBlogs(ctx context.Context, in *ListBlogsRequest, opts ...http.CallOption) (*ListBlogsReply, error) {
	var out ListBlogsReply
	pattern := "/app.blogs.api.Blogs/ListBlogs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogsListBlogs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogsHTTPClientImpl) UpdateBlogs(ctx context.Context, in *UpdateBlogsRequest, opts ...http.CallOption) (*UpdateBlogsReply, error) {
	var out UpdateBlogsReply
	pattern := "/app.blogs.api.Blogs/UpdateBlogs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogsUpdateBlogs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
