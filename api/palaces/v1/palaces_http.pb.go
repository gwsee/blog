// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.28.2
// source: api/palaces/v1/palaces.proto

package v1

import (
	global "blog/api/global"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPalacesCreatePalaces = "/api.palaces.v1.Palaces/CreatePalaces"
const OperationPalacesDeleteMemo = "/api.palaces.v1.Palaces/DeleteMemo"
const OperationPalacesDeletePalaces = "/api.palaces.v1.Palaces/DeletePalaces"
const OperationPalacesDeleteTodo = "/api.palaces.v1.Palaces/DeleteTodo"
const OperationPalacesDeleteTodoDone = "/api.palaces.v1.Palaces/DeleteTodoDone"
const OperationPalacesDeleteTodoRecord = "/api.palaces.v1.Palaces/DeleteTodoRecord"
const OperationPalacesDoneMemo = "/api.palaces.v1.Palaces/DoneMemo"
const OperationPalacesDoneTodo = "/api.palaces.v1.Palaces/DoneTodo"
const OperationPalacesGetPalaces = "/api.palaces.v1.Palaces/GetPalaces"
const OperationPalacesListMemo = "/api.palaces.v1.Palaces/ListMemo"
const OperationPalacesListPalaces = "/api.palaces.v1.Palaces/ListPalaces"
const OperationPalacesListTodo = "/api.palaces.v1.Palaces/ListTodo"
const OperationPalacesListTodoDone = "/api.palaces.v1.Palaces/ListTodoDone"
const OperationPalacesSaveMemo = "/api.palaces.v1.Palaces/SaveMemo"
const OperationPalacesSaveTodo = "/api.palaces.v1.Palaces/SaveTodo"
const OperationPalacesUpdatePalaces = "/api.palaces.v1.Palaces/UpdatePalaces"

type PalacesHTTPServer interface {
	CreatePalaces(context.Context, *CreatePalacesRequest) (*CreatePalacesReply, error)
	DeleteMemo(context.Context, *global.ID) (*global.Empty, error)
	DeletePalaces(context.Context, *DeletePalacesRequest) (*DeletePalacesReply, error)
	DeleteTodo(context.Context, *global.ID) (*global.Empty, error)
	DeleteTodoDone(context.Context, *global.ID) (*global.Empty, error)
	// DeleteTodoRecord删除所有某个todo的记录
	DeleteTodoRecord(context.Context, *global.ID) (*global.Empty, error)
	DoneMemo(context.Context, *global.State) (*global.Empty, error)
	DoneTodo(context.Context, *global.ID) (*global.Empty, error)
	GetPalaces(context.Context, *GetPalacesRequest) (*GetPalacesReply, error)
	ListMemo(context.Context, *ListMemoRequest) (*ListMemoReply, error)
	ListPalaces(context.Context, *ListPalacesRequest) (*ListPalacesReply, error)
	ListTodo(context.Context, *ListTodoRequest) (*ListTodoReply, error)
	ListTodoDone(context.Context, *ListTodoRequest) (*ListTodoReply, error)
	SaveMemo(context.Context, *SaveMemoRequest) (*global.Empty, error)
	SaveTodo(context.Context, *SaveTodoItem) (*global.Empty, error)
	UpdatePalaces(context.Context, *UpdatePalacesRequest) (*UpdatePalacesReply, error)
}

func RegisterPalacesHTTPServer(s *http.Server, srv PalacesHTTPServer) {
	r := s.Route("/")
	r.POST("/api.palaces.v1.Palaces/CreatePalaces", _Palaces_CreatePalaces0_HTTP_Handler(srv))
	r.POST("/api.palaces.v1.Palaces/UpdatePalaces", _Palaces_UpdatePalaces0_HTTP_Handler(srv))
	r.POST("/api.palaces.v1.Palaces/DeletePalaces", _Palaces_DeletePalaces0_HTTP_Handler(srv))
	r.POST("/api.palaces.v1.Palaces/GetPalaces", _Palaces_GetPalaces0_HTTP_Handler(srv))
	r.POST("/api.palaces.v1.Palaces/ListPalaces", _Palaces_ListPalaces0_HTTP_Handler(srv))
	r.POST("/api.palaces.v1.Palaces/SaveMemo", _Palaces_SaveMemo0_HTTP_Handler(srv))
	r.POST("/api.palaces.v1.Palaces/DoneMemo", _Palaces_DoneMemo0_HTTP_Handler(srv))
	r.POST("/api.palaces.v1.Palaces/DeleteMemo", _Palaces_DeleteMemo0_HTTP_Handler(srv))
	r.POST("/api.palaces.v1.Palaces/ListMemo", _Palaces_ListMemo0_HTTP_Handler(srv))
	r.POST("/api.palaces.v1.Palaces/SaveTodo", _Palaces_SaveTodo0_HTTP_Handler(srv))
	r.POST("/api.palaces.v1.Palaces/DoneTodo", _Palaces_DoneTodo0_HTTP_Handler(srv))
	r.POST("/api.palaces.v1.Palaces/DeleteTodo", _Palaces_DeleteTodo0_HTTP_Handler(srv))
	r.POST("/api.palaces.v1.Palaces/DeleteTodoDone", _Palaces_DeleteTodoDone0_HTTP_Handler(srv))
	r.POST("/api.palaces.v1.Palaces/DeleteTodoRecord", _Palaces_DeleteTodoRecord0_HTTP_Handler(srv))
	r.POST("/api.palaces.v1.Palaces/ListTodo", _Palaces_ListTodo0_HTTP_Handler(srv))
	r.POST("/api.palaces.v1.Palaces/ListTodoDone", _Palaces_ListTodoDone0_HTTP_Handler(srv))
}

func _Palaces_CreatePalaces0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePalacesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesCreatePalaces)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePalaces(ctx, req.(*CreatePalacesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePalacesReply)
		return ctx.Result(200, reply)
	}
}

func _Palaces_UpdatePalaces0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePalacesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesUpdatePalaces)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePalaces(ctx, req.(*UpdatePalacesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePalacesReply)
		return ctx.Result(200, reply)
	}
}

func _Palaces_DeletePalaces0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePalacesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesDeletePalaces)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePalaces(ctx, req.(*DeletePalacesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePalacesReply)
		return ctx.Result(200, reply)
	}
}

func _Palaces_GetPalaces0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPalacesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesGetPalaces)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPalaces(ctx, req.(*GetPalacesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPalacesReply)
		return ctx.Result(200, reply)
	}
}

func _Palaces_ListPalaces0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPalacesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesListPalaces)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPalaces(ctx, req.(*ListPalacesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPalacesReply)
		return ctx.Result(200, reply)
	}
}

func _Palaces_SaveMemo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveMemoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesSaveMemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveMemo(ctx, req.(*SaveMemoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_DoneMemo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.State
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesDoneMemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DoneMemo(ctx, req.(*global.State))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_DeleteMemo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesDeleteMemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMemo(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_ListMemo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMemoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesListMemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMemo(ctx, req.(*ListMemoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMemoReply)
		return ctx.Result(200, reply)
	}
}

func _Palaces_SaveTodo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveTodoItem
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesSaveTodo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveTodo(ctx, req.(*SaveTodoItem))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_DoneTodo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesDoneTodo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DoneTodo(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_DeleteTodo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesDeleteTodo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTodo(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_DeleteTodoDone0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesDeleteTodoDone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTodoDone(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_DeleteTodoRecord0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesDeleteTodoRecord)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTodoRecord(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_ListTodo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTodoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesListTodo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTodo(ctx, req.(*ListTodoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTodoReply)
		return ctx.Result(200, reply)
	}
}

func _Palaces_ListTodoDone0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTodoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesListTodoDone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTodoDone(ctx, req.(*ListTodoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTodoReply)
		return ctx.Result(200, reply)
	}
}

type PalacesHTTPClient interface {
	CreatePalaces(ctx context.Context, req *CreatePalacesRequest, opts ...http.CallOption) (rsp *CreatePalacesReply, err error)
	DeleteMemo(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *global.Empty, err error)
	DeletePalaces(ctx context.Context, req *DeletePalacesRequest, opts ...http.CallOption) (rsp *DeletePalacesReply, err error)
	DeleteTodo(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *global.Empty, err error)
	DeleteTodoDone(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *global.Empty, err error)
	DeleteTodoRecord(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *global.Empty, err error)
	DoneMemo(ctx context.Context, req *global.State, opts ...http.CallOption) (rsp *global.Empty, err error)
	DoneTodo(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *global.Empty, err error)
	GetPalaces(ctx context.Context, req *GetPalacesRequest, opts ...http.CallOption) (rsp *GetPalacesReply, err error)
	ListMemo(ctx context.Context, req *ListMemoRequest, opts ...http.CallOption) (rsp *ListMemoReply, err error)
	ListPalaces(ctx context.Context, req *ListPalacesRequest, opts ...http.CallOption) (rsp *ListPalacesReply, err error)
	ListTodo(ctx context.Context, req *ListTodoRequest, opts ...http.CallOption) (rsp *ListTodoReply, err error)
	ListTodoDone(ctx context.Context, req *ListTodoRequest, opts ...http.CallOption) (rsp *ListTodoReply, err error)
	SaveMemo(ctx context.Context, req *SaveMemoRequest, opts ...http.CallOption) (rsp *global.Empty, err error)
	SaveTodo(ctx context.Context, req *SaveTodoItem, opts ...http.CallOption) (rsp *global.Empty, err error)
	UpdatePalaces(ctx context.Context, req *UpdatePalacesRequest, opts ...http.CallOption) (rsp *UpdatePalacesReply, err error)
}

type PalacesHTTPClientImpl struct {
	cc *http.Client
}

func NewPalacesHTTPClient(client *http.Client) PalacesHTTPClient {
	return &PalacesHTTPClientImpl{client}
}

func (c *PalacesHTTPClientImpl) CreatePalaces(ctx context.Context, in *CreatePalacesRequest, opts ...http.CallOption) (*CreatePalacesReply, error) {
	var out CreatePalacesReply
	pattern := "/api.palaces.v1.Palaces/CreatePalaces"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesCreatePalaces))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) DeleteMemo(ctx context.Context, in *global.ID, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/api.palaces.v1.Palaces/DeleteMemo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesDeleteMemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) DeletePalaces(ctx context.Context, in *DeletePalacesRequest, opts ...http.CallOption) (*DeletePalacesReply, error) {
	var out DeletePalacesReply
	pattern := "/api.palaces.v1.Palaces/DeletePalaces"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesDeletePalaces))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) DeleteTodo(ctx context.Context, in *global.ID, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/api.palaces.v1.Palaces/DeleteTodo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesDeleteTodo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) DeleteTodoDone(ctx context.Context, in *global.ID, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/api.palaces.v1.Palaces/DeleteTodoDone"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesDeleteTodoDone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) DeleteTodoRecord(ctx context.Context, in *global.ID, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/api.palaces.v1.Palaces/DeleteTodoRecord"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesDeleteTodoRecord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) DoneMemo(ctx context.Context, in *global.State, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/api.palaces.v1.Palaces/DoneMemo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesDoneMemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) DoneTodo(ctx context.Context, in *global.ID, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/api.palaces.v1.Palaces/DoneTodo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesDoneTodo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) GetPalaces(ctx context.Context, in *GetPalacesRequest, opts ...http.CallOption) (*GetPalacesReply, error) {
	var out GetPalacesReply
	pattern := "/api.palaces.v1.Palaces/GetPalaces"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesGetPalaces))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) ListMemo(ctx context.Context, in *ListMemoRequest, opts ...http.CallOption) (*ListMemoReply, error) {
	var out ListMemoReply
	pattern := "/api.palaces.v1.Palaces/ListMemo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesListMemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) ListPalaces(ctx context.Context, in *ListPalacesRequest, opts ...http.CallOption) (*ListPalacesReply, error) {
	var out ListPalacesReply
	pattern := "/api.palaces.v1.Palaces/ListPalaces"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesListPalaces))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) ListTodo(ctx context.Context, in *ListTodoRequest, opts ...http.CallOption) (*ListTodoReply, error) {
	var out ListTodoReply
	pattern := "/api.palaces.v1.Palaces/ListTodo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesListTodo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) ListTodoDone(ctx context.Context, in *ListTodoRequest, opts ...http.CallOption) (*ListTodoReply, error) {
	var out ListTodoReply
	pattern := "/api.palaces.v1.Palaces/ListTodoDone"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesListTodoDone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) SaveMemo(ctx context.Context, in *SaveMemoRequest, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/api.palaces.v1.Palaces/SaveMemo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesSaveMemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) SaveTodo(ctx context.Context, in *SaveTodoItem, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/api.palaces.v1.Palaces/SaveTodo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesSaveTodo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) UpdatePalaces(ctx context.Context, in *UpdatePalacesRequest, opts ...http.CallOption) (*UpdatePalacesReply, error) {
	var out UpdatePalacesReply
	pattern := "/api.palaces.v1.Palaces/UpdatePalaces"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPalacesUpdatePalaces))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
