// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: api/palaces/v1/palaces.proto

package v1

import (
	global "blog/api/global"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Palaces_CreatePalaces_FullMethodName    = "/api.palaces.v1.Palaces/CreatePalaces"
	Palaces_UpdatePalaces_FullMethodName    = "/api.palaces.v1.Palaces/UpdatePalaces"
	Palaces_DeletePalaces_FullMethodName    = "/api.palaces.v1.Palaces/DeletePalaces"
	Palaces_GetPalaces_FullMethodName       = "/api.palaces.v1.Palaces/GetPalaces"
	Palaces_ListPalaces_FullMethodName      = "/api.palaces.v1.Palaces/ListPalaces"
	Palaces_SaveMemo_FullMethodName         = "/api.palaces.v1.Palaces/SaveMemo"
	Palaces_DoneMemo_FullMethodName         = "/api.palaces.v1.Palaces/DoneMemo"
	Palaces_DeleteMemo_FullMethodName       = "/api.palaces.v1.Palaces/DeleteMemo"
	Palaces_ListMemo_FullMethodName         = "/api.palaces.v1.Palaces/ListMemo"
	Palaces_SaveTodo_FullMethodName         = "/api.palaces.v1.Palaces/SaveTodo"
	Palaces_DoneTodo_FullMethodName         = "/api.palaces.v1.Palaces/DoneTodo"
	Palaces_DeleteTodo_FullMethodName       = "/api.palaces.v1.Palaces/DeleteTodo"
	Palaces_DeleteTodoDone_FullMethodName   = "/api.palaces.v1.Palaces/DeleteTodoDone"
	Palaces_DeleteTodoRecord_FullMethodName = "/api.palaces.v1.Palaces/DeleteTodoRecord"
	Palaces_ListTodo_FullMethodName         = "/api.palaces.v1.Palaces/ListTodo"
	Palaces_ListTodoDone_FullMethodName     = "/api.palaces.v1.Palaces/ListTodoDone"
)

// PalacesClient is the client API for Palaces service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PalacesClient interface {
	CreatePalaces(ctx context.Context, in *CreatePalacesRequest, opts ...grpc.CallOption) (*CreatePalacesReply, error)
	UpdatePalaces(ctx context.Context, in *UpdatePalacesRequest, opts ...grpc.CallOption) (*UpdatePalacesReply, error)
	DeletePalaces(ctx context.Context, in *DeletePalacesRequest, opts ...grpc.CallOption) (*DeletePalacesReply, error)
	GetPalaces(ctx context.Context, in *GetPalacesRequest, opts ...grpc.CallOption) (*GetPalacesReply, error)
	ListPalaces(ctx context.Context, in *ListPalacesRequest, opts ...grpc.CallOption) (*ListPalacesReply, error)
	SaveMemo(ctx context.Context, in *SaveMemoRequest, opts ...grpc.CallOption) (*global.Empty, error)
	DoneMemo(ctx context.Context, in *global.State, opts ...grpc.CallOption) (*global.Empty, error)
	DeleteMemo(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error)
	ListMemo(ctx context.Context, in *ListMemoRequest, opts ...grpc.CallOption) (*ListMemoReply, error)
	SaveTodo(ctx context.Context, in *SaveTodoItem, opts ...grpc.CallOption) (*global.Empty, error)
	DoneTodo(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error)
	DeleteTodo(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error)
	DeleteTodoDone(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error)
	DeleteTodoRecord(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error)
	ListTodo(ctx context.Context, in *ListTodoRequest, opts ...grpc.CallOption) (*ListTodoReply, error)
	ListTodoDone(ctx context.Context, in *ListTodoRequest, opts ...grpc.CallOption) (*ListTodoReply, error)
}

type palacesClient struct {
	cc grpc.ClientConnInterface
}

func NewPalacesClient(cc grpc.ClientConnInterface) PalacesClient {
	return &palacesClient{cc}
}

func (c *palacesClient) CreatePalaces(ctx context.Context, in *CreatePalacesRequest, opts ...grpc.CallOption) (*CreatePalacesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePalacesReply)
	err := c.cc.Invoke(ctx, Palaces_CreatePalaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palacesClient) UpdatePalaces(ctx context.Context, in *UpdatePalacesRequest, opts ...grpc.CallOption) (*UpdatePalacesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePalacesReply)
	err := c.cc.Invoke(ctx, Palaces_UpdatePalaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palacesClient) DeletePalaces(ctx context.Context, in *DeletePalacesRequest, opts ...grpc.CallOption) (*DeletePalacesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePalacesReply)
	err := c.cc.Invoke(ctx, Palaces_DeletePalaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palacesClient) GetPalaces(ctx context.Context, in *GetPalacesRequest, opts ...grpc.CallOption) (*GetPalacesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPalacesReply)
	err := c.cc.Invoke(ctx, Palaces_GetPalaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palacesClient) ListPalaces(ctx context.Context, in *ListPalacesRequest, opts ...grpc.CallOption) (*ListPalacesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPalacesReply)
	err := c.cc.Invoke(ctx, Palaces_ListPalaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palacesClient) SaveMemo(ctx context.Context, in *SaveMemoRequest, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Palaces_SaveMemo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palacesClient) DoneMemo(ctx context.Context, in *global.State, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Palaces_DoneMemo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palacesClient) DeleteMemo(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Palaces_DeleteMemo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palacesClient) ListMemo(ctx context.Context, in *ListMemoRequest, opts ...grpc.CallOption) (*ListMemoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMemoReply)
	err := c.cc.Invoke(ctx, Palaces_ListMemo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palacesClient) SaveTodo(ctx context.Context, in *SaveTodoItem, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Palaces_SaveTodo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palacesClient) DoneTodo(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Palaces_DoneTodo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palacesClient) DeleteTodo(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Palaces_DeleteTodo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palacesClient) DeleteTodoDone(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Palaces_DeleteTodoDone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palacesClient) DeleteTodoRecord(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Palaces_DeleteTodoRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palacesClient) ListTodo(ctx context.Context, in *ListTodoRequest, opts ...grpc.CallOption) (*ListTodoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTodoReply)
	err := c.cc.Invoke(ctx, Palaces_ListTodo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *palacesClient) ListTodoDone(ctx context.Context, in *ListTodoRequest, opts ...grpc.CallOption) (*ListTodoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTodoReply)
	err := c.cc.Invoke(ctx, Palaces_ListTodoDone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PalacesServer is the server API for Palaces service.
// All implementations must embed UnimplementedPalacesServer
// for forward compatibility.
type PalacesServer interface {
	CreatePalaces(context.Context, *CreatePalacesRequest) (*CreatePalacesReply, error)
	UpdatePalaces(context.Context, *UpdatePalacesRequest) (*UpdatePalacesReply, error)
	DeletePalaces(context.Context, *DeletePalacesRequest) (*DeletePalacesReply, error)
	GetPalaces(context.Context, *GetPalacesRequest) (*GetPalacesReply, error)
	ListPalaces(context.Context, *ListPalacesRequest) (*ListPalacesReply, error)
	SaveMemo(context.Context, *SaveMemoRequest) (*global.Empty, error)
	DoneMemo(context.Context, *global.State) (*global.Empty, error)
	DeleteMemo(context.Context, *global.ID) (*global.Empty, error)
	ListMemo(context.Context, *ListMemoRequest) (*ListMemoReply, error)
	SaveTodo(context.Context, *SaveTodoItem) (*global.Empty, error)
	DoneTodo(context.Context, *global.ID) (*global.Empty, error)
	DeleteTodo(context.Context, *global.ID) (*global.Empty, error)
	DeleteTodoDone(context.Context, *global.ID) (*global.Empty, error)
	DeleteTodoRecord(context.Context, *global.ID) (*global.Empty, error)
	ListTodo(context.Context, *ListTodoRequest) (*ListTodoReply, error)
	ListTodoDone(context.Context, *ListTodoRequest) (*ListTodoReply, error)
	mustEmbedUnimplementedPalacesServer()
}

// UnimplementedPalacesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPalacesServer struct{}

func (UnimplementedPalacesServer) CreatePalaces(context.Context, *CreatePalacesRequest) (*CreatePalacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePalaces not implemented")
}
func (UnimplementedPalacesServer) UpdatePalaces(context.Context, *UpdatePalacesRequest) (*UpdatePalacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePalaces not implemented")
}
func (UnimplementedPalacesServer) DeletePalaces(context.Context, *DeletePalacesRequest) (*DeletePalacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePalaces not implemented")
}
func (UnimplementedPalacesServer) GetPalaces(context.Context, *GetPalacesRequest) (*GetPalacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPalaces not implemented")
}
func (UnimplementedPalacesServer) ListPalaces(context.Context, *ListPalacesRequest) (*ListPalacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPalaces not implemented")
}
func (UnimplementedPalacesServer) SaveMemo(context.Context, *SaveMemoRequest) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMemo not implemented")
}
func (UnimplementedPalacesServer) DoneMemo(context.Context, *global.State) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoneMemo not implemented")
}
func (UnimplementedPalacesServer) DeleteMemo(context.Context, *global.ID) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemo not implemented")
}
func (UnimplementedPalacesServer) ListMemo(context.Context, *ListMemoRequest) (*ListMemoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemo not implemented")
}
func (UnimplementedPalacesServer) SaveTodo(context.Context, *SaveTodoItem) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTodo not implemented")
}
func (UnimplementedPalacesServer) DoneTodo(context.Context, *global.ID) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoneTodo not implemented")
}
func (UnimplementedPalacesServer) DeleteTodo(context.Context, *global.ID) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (UnimplementedPalacesServer) DeleteTodoDone(context.Context, *global.ID) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodoDone not implemented")
}
func (UnimplementedPalacesServer) DeleteTodoRecord(context.Context, *global.ID) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodoRecord not implemented")
}
func (UnimplementedPalacesServer) ListTodo(context.Context, *ListTodoRequest) (*ListTodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTodo not implemented")
}
func (UnimplementedPalacesServer) ListTodoDone(context.Context, *ListTodoRequest) (*ListTodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTodoDone not implemented")
}
func (UnimplementedPalacesServer) mustEmbedUnimplementedPalacesServer() {}
func (UnimplementedPalacesServer) testEmbeddedByValue()                 {}

// UnsafePalacesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PalacesServer will
// result in compilation errors.
type UnsafePalacesServer interface {
	mustEmbedUnimplementedPalacesServer()
}

func RegisterPalacesServer(s grpc.ServiceRegistrar, srv PalacesServer) {
	// If the following call pancis, it indicates UnimplementedPalacesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Palaces_ServiceDesc, srv)
}

func _Palaces_CreatePalaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePalacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).CreatePalaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_CreatePalaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).CreatePalaces(ctx, req.(*CreatePalacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palaces_UpdatePalaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePalacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).UpdatePalaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_UpdatePalaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).UpdatePalaces(ctx, req.(*UpdatePalacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palaces_DeletePalaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePalacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).DeletePalaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_DeletePalaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).DeletePalaces(ctx, req.(*DeletePalacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palaces_GetPalaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPalacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).GetPalaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_GetPalaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).GetPalaces(ctx, req.(*GetPalacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palaces_ListPalaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPalacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).ListPalaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_ListPalaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).ListPalaces(ctx, req.(*ListPalacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palaces_SaveMemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).SaveMemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_SaveMemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).SaveMemo(ctx, req.(*SaveMemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palaces_DoneMemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).DoneMemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_DoneMemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).DoneMemo(ctx, req.(*global.State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palaces_DeleteMemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).DeleteMemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_DeleteMemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).DeleteMemo(ctx, req.(*global.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palaces_ListMemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).ListMemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_ListMemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).ListMemo(ctx, req.(*ListMemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palaces_SaveTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTodoItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).SaveTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_SaveTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).SaveTodo(ctx, req.(*SaveTodoItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palaces_DoneTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).DoneTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_DoneTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).DoneTodo(ctx, req.(*global.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palaces_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_DeleteTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).DeleteTodo(ctx, req.(*global.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palaces_DeleteTodoDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).DeleteTodoDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_DeleteTodoDone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).DeleteTodoDone(ctx, req.(*global.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palaces_DeleteTodoRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).DeleteTodoRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_DeleteTodoRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).DeleteTodoRecord(ctx, req.(*global.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palaces_ListTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).ListTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_ListTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).ListTodo(ctx, req.(*ListTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Palaces_ListTodoDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PalacesServer).ListTodoDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Palaces_ListTodoDone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PalacesServer).ListTodoDone(ctx, req.(*ListTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Palaces_ServiceDesc is the grpc.ServiceDesc for Palaces service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Palaces_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.palaces.v1.Palaces",
	HandlerType: (*PalacesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePalaces",
			Handler:    _Palaces_CreatePalaces_Handler,
		},
		{
			MethodName: "UpdatePalaces",
			Handler:    _Palaces_UpdatePalaces_Handler,
		},
		{
			MethodName: "DeletePalaces",
			Handler:    _Palaces_DeletePalaces_Handler,
		},
		{
			MethodName: "GetPalaces",
			Handler:    _Palaces_GetPalaces_Handler,
		},
		{
			MethodName: "ListPalaces",
			Handler:    _Palaces_ListPalaces_Handler,
		},
		{
			MethodName: "SaveMemo",
			Handler:    _Palaces_SaveMemo_Handler,
		},
		{
			MethodName: "DoneMemo",
			Handler:    _Palaces_DoneMemo_Handler,
		},
		{
			MethodName: "DeleteMemo",
			Handler:    _Palaces_DeleteMemo_Handler,
		},
		{
			MethodName: "ListMemo",
			Handler:    _Palaces_ListMemo_Handler,
		},
		{
			MethodName: "SaveTodo",
			Handler:    _Palaces_SaveTodo_Handler,
		},
		{
			MethodName: "DoneTodo",
			Handler:    _Palaces_DoneTodo_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _Palaces_DeleteTodo_Handler,
		},
		{
			MethodName: "DeleteTodoDone",
			Handler:    _Palaces_DeleteTodoDone_Handler,
		},
		{
			MethodName: "DeleteTodoRecord",
			Handler:    _Palaces_DeleteTodoRecord_Handler,
		},
		{
			MethodName: "ListTodo",
			Handler:    _Palaces_ListTodo_Handler,
		},
		{
			MethodName: "ListTodoDone",
			Handler:    _Palaces_ListTodoDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/palaces/v1/palaces.proto",
}
