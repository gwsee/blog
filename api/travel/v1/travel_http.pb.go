// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v3.19.4
// source: api/travel/v1/travel.proto

package v1

import (
	global "blog/api/global"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTravelCollect = "/api.travel.v1.Travel/Collect"
const OperationTravelDeleteTravel = "/api.travel.v1.Travel/DeleteTravel"
const OperationTravelGetTravel = "/api.travel.v1.Travel/GetTravel"
const OperationTravelListTravel = "/api.travel.v1.Travel/ListTravel"
const OperationTravelSaveTravel = "/api.travel.v1.Travel/SaveTravel"
const OperationTravelThumb = "/api.travel.v1.Travel/Thumb"

type TravelHTTPServer interface {
	Collect(context.Context, *global.ID) (*GetTravelReply, error)
	DeleteTravel(context.Context, *global.ID) (*global.Empty, error)
	GetTravel(context.Context, *global.ID) (*GetTravelReply, error)
	ListTravel(context.Context, *ListTravelRequest) (*ListTravelReply, error)
	SaveTravel(context.Context, *SaveTravelRequest) (*global.Empty, error)
	Thumb(context.Context, *global.ID) (*GetTravelReply, error)
}

func RegisterTravelHTTPServer(s *http.Server, srv TravelHTTPServer) {
	r := s.Route("/")
	r.POST("/api.travel.v1.Travel/SaveTravel", _Travel_SaveTravel0_HTTP_Handler(srv))
	r.POST("/api.travel.v1.Travel/DeleteTravel", _Travel_DeleteTravel0_HTTP_Handler(srv))
	r.POST("/api.travel.v1.Travel/GetTravel", _Travel_GetTravel0_HTTP_Handler(srv))
	r.POST("/api.travel.v1.Travel/ListTravel", _Travel_ListTravel0_HTTP_Handler(srv))
	r.POST("/api.travel.v1.Travel/Thumb", _Travel_Thumb0_HTTP_Handler(srv))
	r.POST("/api.travel.v1.Travel/Collect", _Travel_Collect0_HTTP_Handler(srv))
}

func _Travel_SaveTravel0_HTTP_Handler(srv TravelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveTravelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTravelSaveTravel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveTravel(ctx, req.(*SaveTravelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Travel_DeleteTravel0_HTTP_Handler(srv TravelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTravelDeleteTravel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTravel(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Travel_GetTravel0_HTTP_Handler(srv TravelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTravelGetTravel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTravel(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTravelReply)
		return ctx.Result(200, reply)
	}
}

func _Travel_ListTravel0_HTTP_Handler(srv TravelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTravelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTravelListTravel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTravel(ctx, req.(*ListTravelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTravelReply)
		return ctx.Result(200, reply)
	}
}

func _Travel_Thumb0_HTTP_Handler(srv TravelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTravelThumb)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Thumb(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTravelReply)
		return ctx.Result(200, reply)
	}
}

func _Travel_Collect0_HTTP_Handler(srv TravelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTravelCollect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Collect(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTravelReply)
		return ctx.Result(200, reply)
	}
}

type TravelHTTPClient interface {
	Collect(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *GetTravelReply, err error)
	DeleteTravel(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *global.Empty, err error)
	GetTravel(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *GetTravelReply, err error)
	ListTravel(ctx context.Context, req *ListTravelRequest, opts ...http.CallOption) (rsp *ListTravelReply, err error)
	SaveTravel(ctx context.Context, req *SaveTravelRequest, opts ...http.CallOption) (rsp *global.Empty, err error)
	Thumb(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *GetTravelReply, err error)
}

type TravelHTTPClientImpl struct {
	cc *http.Client
}

func NewTravelHTTPClient(client *http.Client) TravelHTTPClient {
	return &TravelHTTPClientImpl{client}
}

func (c *TravelHTTPClientImpl) Collect(ctx context.Context, in *global.ID, opts ...http.CallOption) (*GetTravelReply, error) {
	var out GetTravelReply
	pattern := "/api.travel.v1.Travel/Collect"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTravelCollect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TravelHTTPClientImpl) DeleteTravel(ctx context.Context, in *global.ID, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/api.travel.v1.Travel/DeleteTravel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTravelDeleteTravel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TravelHTTPClientImpl) GetTravel(ctx context.Context, in *global.ID, opts ...http.CallOption) (*GetTravelReply, error) {
	var out GetTravelReply
	pattern := "/api.travel.v1.Travel/GetTravel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTravelGetTravel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TravelHTTPClientImpl) ListTravel(ctx context.Context, in *ListTravelRequest, opts ...http.CallOption) (*ListTravelReply, error) {
	var out ListTravelReply
	pattern := "/api.travel.v1.Travel/ListTravel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTravelListTravel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TravelHTTPClientImpl) SaveTravel(ctx context.Context, in *SaveTravelRequest, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/api.travel.v1.Travel/SaveTravel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTravelSaveTravel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TravelHTTPClientImpl) Thumb(ctx context.Context, in *global.ID, opts ...http.CallOption) (*GetTravelReply, error) {
	var out GetTravelReply
	pattern := "/api.travel.v1.Travel/Thumb"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTravelThumb))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
