// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: api/travel/v1/travel.proto

package v1

import (
	global "blog/api/global"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Travel_SaveTravel_FullMethodName   = "/api.travel.v1.Travel/SaveTravel"
	Travel_DeleteTravel_FullMethodName = "/api.travel.v1.Travel/DeleteTravel"
	Travel_GetTravel_FullMethodName    = "/api.travel.v1.Travel/GetTravel"
	Travel_ListTravel_FullMethodName   = "/api.travel.v1.Travel/ListTravel"
	Travel_Thumb_FullMethodName        = "/api.travel.v1.Travel/Thumb"
	Travel_Collect_FullMethodName      = "/api.travel.v1.Travel/Collect"
)

// TravelClient is the client API for Travel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TravelClient interface {
	SaveTravel(ctx context.Context, in *SaveTravelRequest, opts ...grpc.CallOption) (*global.Empty, error)
	DeleteTravel(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error)
	GetTravel(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*GetTravelReply, error)
	ListTravel(ctx context.Context, in *ListTravelRequest, opts ...grpc.CallOption) (*ListTravelReply, error)
	Thumb(ctx context.Context, in *global.Action, opts ...grpc.CallOption) (*global.Empty, error)
	Collect(ctx context.Context, in *global.Action, opts ...grpc.CallOption) (*global.Empty, error)
}

type travelClient struct {
	cc grpc.ClientConnInterface
}

func NewTravelClient(cc grpc.ClientConnInterface) TravelClient {
	return &travelClient{cc}
}

func (c *travelClient) SaveTravel(ctx context.Context, in *SaveTravelRequest, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Travel_SaveTravel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) DeleteTravel(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Travel_DeleteTravel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) GetTravel(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*GetTravelReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTravelReply)
	err := c.cc.Invoke(ctx, Travel_GetTravel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) ListTravel(ctx context.Context, in *ListTravelRequest, opts ...grpc.CallOption) (*ListTravelReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTravelReply)
	err := c.cc.Invoke(ctx, Travel_ListTravel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) Thumb(ctx context.Context, in *global.Action, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Travel_Thumb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) Collect(ctx context.Context, in *global.Action, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Travel_Collect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TravelServer is the server API for Travel service.
// All implementations must embed UnimplementedTravelServer
// for forward compatibility.
type TravelServer interface {
	SaveTravel(context.Context, *SaveTravelRequest) (*global.Empty, error)
	DeleteTravel(context.Context, *global.ID) (*global.Empty, error)
	GetTravel(context.Context, *global.ID) (*GetTravelReply, error)
	ListTravel(context.Context, *ListTravelRequest) (*ListTravelReply, error)
	Thumb(context.Context, *global.Action) (*global.Empty, error)
	Collect(context.Context, *global.Action) (*global.Empty, error)
	mustEmbedUnimplementedTravelServer()
}

// UnimplementedTravelServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTravelServer struct{}

func (UnimplementedTravelServer) SaveTravel(context.Context, *SaveTravelRequest) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTravel not implemented")
}
func (UnimplementedTravelServer) DeleteTravel(context.Context, *global.ID) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTravel not implemented")
}
func (UnimplementedTravelServer) GetTravel(context.Context, *global.ID) (*GetTravelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTravel not implemented")
}
func (UnimplementedTravelServer) ListTravel(context.Context, *ListTravelRequest) (*ListTravelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTravel not implemented")
}
func (UnimplementedTravelServer) Thumb(context.Context, *global.Action) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thumb not implemented")
}
func (UnimplementedTravelServer) Collect(context.Context, *global.Action) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedTravelServer) mustEmbedUnimplementedTravelServer() {}
func (UnimplementedTravelServer) testEmbeddedByValue()                {}

// UnsafeTravelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TravelServer will
// result in compilation errors.
type UnsafeTravelServer interface {
	mustEmbedUnimplementedTravelServer()
}

func RegisterTravelServer(s grpc.ServiceRegistrar, srv TravelServer) {
	// If the following call pancis, it indicates UnimplementedTravelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Travel_ServiceDesc, srv)
}

func _Travel_SaveTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).SaveTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Travel_SaveTravel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).SaveTravel(ctx, req.(*SaveTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_DeleteTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).DeleteTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Travel_DeleteTravel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).DeleteTravel(ctx, req.(*global.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_GetTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).GetTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Travel_GetTravel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).GetTravel(ctx, req.(*global.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_ListTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).ListTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Travel_ListTravel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).ListTravel(ctx, req.(*ListTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_Thumb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.Action)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).Thumb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Travel_Thumb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).Thumb(ctx, req.(*global.Action))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.Action)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Travel_Collect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).Collect(ctx, req.(*global.Action))
	}
	return interceptor(ctx, in, info, handler)
}

// Travel_ServiceDesc is the grpc.ServiceDesc for Travel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Travel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.travel.v1.Travel",
	HandlerType: (*TravelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveTravel",
			Handler:    _Travel_SaveTravel_Handler,
		},
		{
			MethodName: "DeleteTravel",
			Handler:    _Travel_DeleteTravel_Handler,
		},
		{
			MethodName: "GetTravel",
			Handler:    _Travel_GetTravel_Handler,
		},
		{
			MethodName: "ListTravel",
			Handler:    _Travel_ListTravel_Handler,
		},
		{
			MethodName: "Thumb",
			Handler:    _Travel_Thumb_Handler,
		},
		{
			MethodName: "Collect",
			Handler:    _Travel_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/travel/v1/travel.proto",
}
