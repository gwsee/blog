// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: api/bff/v1/travel.proto

package v1

import (
	global "blog/api/global"
	v1 "blog/api/travel/v1"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Travels_SaveTravel_FullMethodName   = "/api.bff.v1.Travels/SaveTravel"
	Travels_DeleteTravel_FullMethodName = "/api.bff.v1.Travels/DeleteTravel"
	Travels_GetTravel_FullMethodName    = "/api.bff.v1.Travels/GetTravel"
	Travels_ListTravel_FullMethodName   = "/api.bff.v1.Travels/ListTravel"
	Travels_Thumb_FullMethodName        = "/api.bff.v1.Travels/Thumb"
	Travels_Collect_FullMethodName      = "/api.bff.v1.Travels/Collect"
)

// TravelsClient is the client API for Travels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TravelsClient interface {
	SaveTravel(ctx context.Context, in *v1.SaveTravelRequest, opts ...grpc.CallOption) (*global.Empty, error)
	DeleteTravel(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error)
	GetTravel(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*v1.GetTravelReply, error)
	ListTravel(ctx context.Context, in *v1.ListTravelRequest, opts ...grpc.CallOption) (*v1.ListTravelReply, error)
	Thumb(ctx context.Context, in *global.Action, opts ...grpc.CallOption) (*global.Empty, error)
	Collect(ctx context.Context, in *global.Action, opts ...grpc.CallOption) (*global.Empty, error)
}

type travelsClient struct {
	cc grpc.ClientConnInterface
}

func NewTravelsClient(cc grpc.ClientConnInterface) TravelsClient {
	return &travelsClient{cc}
}

func (c *travelsClient) SaveTravel(ctx context.Context, in *v1.SaveTravelRequest, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Travels_SaveTravel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelsClient) DeleteTravel(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Travels_DeleteTravel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelsClient) GetTravel(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*v1.GetTravelReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetTravelReply)
	err := c.cc.Invoke(ctx, Travels_GetTravel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelsClient) ListTravel(ctx context.Context, in *v1.ListTravelRequest, opts ...grpc.CallOption) (*v1.ListTravelReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListTravelReply)
	err := c.cc.Invoke(ctx, Travels_ListTravel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelsClient) Thumb(ctx context.Context, in *global.Action, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Travels_Thumb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelsClient) Collect(ctx context.Context, in *global.Action, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Travels_Collect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TravelsServer is the server API for Travels service.
// All implementations must embed UnimplementedTravelsServer
// for forward compatibility.
type TravelsServer interface {
	SaveTravel(context.Context, *v1.SaveTravelRequest) (*global.Empty, error)
	DeleteTravel(context.Context, *global.ID) (*global.Empty, error)
	GetTravel(context.Context, *global.ID) (*v1.GetTravelReply, error)
	ListTravel(context.Context, *v1.ListTravelRequest) (*v1.ListTravelReply, error)
	Thumb(context.Context, *global.Action) (*global.Empty, error)
	Collect(context.Context, *global.Action) (*global.Empty, error)
	mustEmbedUnimplementedTravelsServer()
}

// UnimplementedTravelsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTravelsServer struct{}

func (UnimplementedTravelsServer) SaveTravel(context.Context, *v1.SaveTravelRequest) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTravel not implemented")
}
func (UnimplementedTravelsServer) DeleteTravel(context.Context, *global.ID) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTravel not implemented")
}
func (UnimplementedTravelsServer) GetTravel(context.Context, *global.ID) (*v1.GetTravelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTravel not implemented")
}
func (UnimplementedTravelsServer) ListTravel(context.Context, *v1.ListTravelRequest) (*v1.ListTravelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTravel not implemented")
}
func (UnimplementedTravelsServer) Thumb(context.Context, *global.Action) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thumb not implemented")
}
func (UnimplementedTravelsServer) Collect(context.Context, *global.Action) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedTravelsServer) mustEmbedUnimplementedTravelsServer() {}
func (UnimplementedTravelsServer) testEmbeddedByValue()                 {}

// UnsafeTravelsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TravelsServer will
// result in compilation errors.
type UnsafeTravelsServer interface {
	mustEmbedUnimplementedTravelsServer()
}

func RegisterTravelsServer(s grpc.ServiceRegistrar, srv TravelsServer) {
	// If the following call pancis, it indicates UnimplementedTravelsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Travels_ServiceDesc, srv)
}

func _Travels_SaveTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.SaveTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelsServer).SaveTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Travels_SaveTravel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelsServer).SaveTravel(ctx, req.(*v1.SaveTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travels_DeleteTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelsServer).DeleteTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Travels_DeleteTravel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelsServer).DeleteTravel(ctx, req.(*global.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travels_GetTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelsServer).GetTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Travels_GetTravel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelsServer).GetTravel(ctx, req.(*global.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travels_ListTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelsServer).ListTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Travels_ListTravel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelsServer).ListTravel(ctx, req.(*v1.ListTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travels_Thumb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.Action)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelsServer).Thumb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Travels_Thumb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelsServer).Thumb(ctx, req.(*global.Action))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travels_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.Action)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelsServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Travels_Collect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelsServer).Collect(ctx, req.(*global.Action))
	}
	return interceptor(ctx, in, info, handler)
}

// Travels_ServiceDesc is the grpc.ServiceDesc for Travels service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Travels_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.bff.v1.Travels",
	HandlerType: (*TravelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveTravel",
			Handler:    _Travels_SaveTravel_Handler,
		},
		{
			MethodName: "DeleteTravel",
			Handler:    _Travels_DeleteTravel_Handler,
		},
		{
			MethodName: "GetTravel",
			Handler:    _Travels_GetTravel_Handler,
		},
		{
			MethodName: "ListTravel",
			Handler:    _Travels_ListTravel_Handler,
		},
		{
			MethodName: "Thumb",
			Handler:    _Travels_Thumb_Handler,
		},
		{
			MethodName: "Collect",
			Handler:    _Travels_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/bff/v1/travel.proto",
}
