// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v3.19.4
// source: api/bff/v1/user.proto

package v1

import (
	global "blog/api/global"
	v1 "blog/api/user/v1"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserDeleteExperience = "/api.bff.v1.User/DeleteExperience"
const OperationUserDeleteProject = "/api.bff.v1.User/DeleteProject"
const OperationUserGetExperience = "/api.bff.v1.User/GetExperience"
const OperationUserGetProject = "/api.bff.v1.User/GetProject"
const OperationUserGetUser = "/api.bff.v1.User/GetUser"
const OperationUserListExperience = "/api.bff.v1.User/ListExperience"
const OperationUserListProject = "/api.bff.v1.User/ListProject"
const OperationUserPhotos = "/api.bff.v1.User/Photos"
const OperationUserSaveExperience = "/api.bff.v1.User/SaveExperience"
const OperationUserSaveProject = "/api.bff.v1.User/SaveProject"
const OperationUserSaveUser = "/api.bff.v1.User/SaveUser"

type UserHTTPServer interface {
	DeleteExperience(context.Context, *global.ID) (*global.Empty, error)
	DeleteProject(context.Context, *global.ID) (*global.Empty, error)
	GetExperience(context.Context, *global.ID) (*v1.GetExperienceReply, error)
	GetProject(context.Context, *global.ID) (*v1.GetProjectReply, error)
	GetUser(context.Context, *global.Empty) (*v1.GetUserReply, error)
	ListExperience(context.Context, *v1.ListExperienceRequest) (*v1.ListExperienceReply, error)
	ListProject(context.Context, *v1.ListProjectRequest) (*v1.ListProjectReply, error)
	Photos(context.Context, *v1.PhotosReq) (*v1.PhotosReply, error)
	// SaveExperience工作经验管理
	SaveExperience(context.Context, *v1.SaveExperienceRequest) (*global.Empty, error)
	// SaveProject项目管理
	SaveProject(context.Context, *v1.SaveProjectRequest) (*global.Empty, error)
	// SaveUser个人信息管理
	SaveUser(context.Context, *v1.SaveUserRequest) (*global.Empty, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user/save", _User_SaveUser0_HTTP_Handler(srv))
	r.POST("/v1/user/get", _User_GetUser0_HTTP_Handler(srv))
	r.POST("/v1/project/save", _User_SaveProject0_HTTP_Handler(srv))
	r.POST("/v1/project/del", _User_DeleteProject0_HTTP_Handler(srv))
	r.POST("/v1/project/get", _User_GetProject0_HTTP_Handler(srv))
	r.POST("/v1/project/list", _User_ListProject0_HTTP_Handler(srv))
	r.POST("/v1/experience/save", _User_SaveExperience0_HTTP_Handler(srv))
	r.POST("/v1/experience/del", _User_DeleteExperience0_HTTP_Handler(srv))
	r.POST("/v1/experience/get", _User_GetExperience0_HTTP_Handler(srv))
	r.POST("/v1/experience/list", _User_ListExperience0_HTTP_Handler(srv))
	r.POST("/v1/photos", _User_Photos0_HTTP_Handler(srv))
}

func _User_SaveUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.SaveUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSaveUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveUser(ctx, req.(*v1.SaveUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _User_GetUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*global.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_SaveProject0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.SaveProjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSaveProject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveProject(ctx, req.(*v1.SaveProjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _User_DeleteProject0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeleteProject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProject(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _User_GetProject0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetProject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProject(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetProjectReply)
		return ctx.Result(200, reply)
	}
}

func _User_ListProject0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListProjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserListProject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProject(ctx, req.(*v1.ListProjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListProjectReply)
		return ctx.Result(200, reply)
	}
}

func _User_SaveExperience0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.SaveExperienceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSaveExperience)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveExperience(ctx, req.(*v1.SaveExperienceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _User_DeleteExperience0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeleteExperience)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteExperience(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _User_GetExperience0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetExperience)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExperience(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetExperienceReply)
		return ctx.Result(200, reply)
	}
}

func _User_ListExperience0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListExperienceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserListExperience)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListExperience(ctx, req.(*v1.ListExperienceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListExperienceReply)
		return ctx.Result(200, reply)
	}
}

func _User_Photos0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.PhotosReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserPhotos)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Photos(ctx, req.(*v1.PhotosReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.PhotosReply)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	DeleteExperience(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *global.Empty, err error)
	DeleteProject(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *global.Empty, err error)
	GetExperience(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *v1.GetExperienceReply, err error)
	GetProject(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *v1.GetProjectReply, err error)
	GetUser(ctx context.Context, req *global.Empty, opts ...http.CallOption) (rsp *v1.GetUserReply, err error)
	ListExperience(ctx context.Context, req *v1.ListExperienceRequest, opts ...http.CallOption) (rsp *v1.ListExperienceReply, err error)
	ListProject(ctx context.Context, req *v1.ListProjectRequest, opts ...http.CallOption) (rsp *v1.ListProjectReply, err error)
	Photos(ctx context.Context, req *v1.PhotosReq, opts ...http.CallOption) (rsp *v1.PhotosReply, err error)
	SaveExperience(ctx context.Context, req *v1.SaveExperienceRequest, opts ...http.CallOption) (rsp *global.Empty, err error)
	SaveProject(ctx context.Context, req *v1.SaveProjectRequest, opts ...http.CallOption) (rsp *global.Empty, err error)
	SaveUser(ctx context.Context, req *v1.SaveUserRequest, opts ...http.CallOption) (rsp *global.Empty, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) DeleteExperience(ctx context.Context, in *global.ID, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/v1/experience/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserDeleteExperience))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) DeleteProject(ctx context.Context, in *global.ID, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/v1/project/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserDeleteProject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) GetExperience(ctx context.Context, in *global.ID, opts ...http.CallOption) (*v1.GetExperienceReply, error) {
	var out v1.GetExperienceReply
	pattern := "/v1/experience/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserGetExperience))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) GetProject(ctx context.Context, in *global.ID, opts ...http.CallOption) (*v1.GetProjectReply, error) {
	var out v1.GetProjectReply
	pattern := "/v1/project/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserGetProject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) GetUser(ctx context.Context, in *global.Empty, opts ...http.CallOption) (*v1.GetUserReply, error) {
	var out v1.GetUserReply
	pattern := "/v1/user/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) ListExperience(ctx context.Context, in *v1.ListExperienceRequest, opts ...http.CallOption) (*v1.ListExperienceReply, error) {
	var out v1.ListExperienceReply
	pattern := "/v1/experience/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserListExperience))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) ListProject(ctx context.Context, in *v1.ListProjectRequest, opts ...http.CallOption) (*v1.ListProjectReply, error) {
	var out v1.ListProjectReply
	pattern := "/v1/project/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserListProject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) Photos(ctx context.Context, in *v1.PhotosReq, opts ...http.CallOption) (*v1.PhotosReply, error) {
	var out v1.PhotosReply
	pattern := "/v1/photos"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserPhotos))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) SaveExperience(ctx context.Context, in *v1.SaveExperienceRequest, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/v1/experience/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSaveExperience))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) SaveProject(ctx context.Context, in *v1.SaveProjectRequest, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/v1/project/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSaveProject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) SaveUser(ctx context.Context, in *v1.SaveUserRequest, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/v1/user/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSaveUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
