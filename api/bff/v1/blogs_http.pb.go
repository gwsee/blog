// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.28.2
// source: api/bff/v1/blogs.proto

package v1

import (
	v1 "blog/api/blogs/v1"
	global "blog/api/global"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBlogsCreateBlogs = "/api.bff.v1.Blogs/CreateBlogs"
const OperationBlogsDeleteBlogs = "/api.bff.v1.Blogs/DeleteBlogs"
const OperationBlogsGetBlogs = "/api.bff.v1.Blogs/GetBlogs"
const OperationBlogsListBlogs = "/api.bff.v1.Blogs/ListBlogs"
const OperationBlogsUpdateBlogs = "/api.bff.v1.Blogs/UpdateBlogs"

type BlogsHTTPServer interface {
	CreateBlogs(context.Context, *v1.CreateBlogsRequest) (*global.Response, error)
	DeleteBlogs(context.Context, *v1.DeleteBlogsRequest) (*global.Response, error)
	GetBlogs(context.Context, *v1.GetBlogsRequest) (*global.Response, error)
	ListBlogs(context.Context, *v1.ListBlogsRequest) (*global.Response, error)
	UpdateBlogs(context.Context, *v1.UpdateBlogsRequest) (*global.Response, error)
}

func RegisterBlogsHTTPServer(s *http.Server, srv BlogsHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/blogs/create", _Blogs_CreateBlogs0_HTTP_Handler(srv))
	r.POST("/v1/blogs/update", _Blogs_UpdateBlogs0_HTTP_Handler(srv))
	r.POST("/v1/blogs/del", _Blogs_DeleteBlogs0_HTTP_Handler(srv))
	r.POST("/v1/blogs/get", _Blogs_GetBlogs0_HTTP_Handler(srv))
	r.POST("/v1/blogs/list", _Blogs_ListBlogs0_HTTP_Handler(srv))
}

func _Blogs_CreateBlogs0_HTTP_Handler(srv BlogsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.CreateBlogsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogsCreateBlogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBlogs(ctx, req.(*v1.CreateBlogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Response)
		return ctx.Result(200, reply)
	}
}

func _Blogs_UpdateBlogs0_HTTP_Handler(srv BlogsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.UpdateBlogsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogsUpdateBlogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBlogs(ctx, req.(*v1.UpdateBlogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Response)
		return ctx.Result(200, reply)
	}
}

func _Blogs_DeleteBlogs0_HTTP_Handler(srv BlogsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.DeleteBlogsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogsDeleteBlogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBlogs(ctx, req.(*v1.DeleteBlogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Response)
		return ctx.Result(200, reply)
	}
}

func _Blogs_GetBlogs0_HTTP_Handler(srv BlogsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetBlogsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogsGetBlogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBlogs(ctx, req.(*v1.GetBlogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Response)
		return ctx.Result(200, reply)
	}
}

func _Blogs_ListBlogs0_HTTP_Handler(srv BlogsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListBlogsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogsListBlogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBlogs(ctx, req.(*v1.ListBlogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Response)
		return ctx.Result(200, reply)
	}
}

type BlogsHTTPClient interface {
	CreateBlogs(ctx context.Context, req *v1.CreateBlogsRequest, opts ...http.CallOption) (rsp *global.Response, err error)
	DeleteBlogs(ctx context.Context, req *v1.DeleteBlogsRequest, opts ...http.CallOption) (rsp *global.Response, err error)
	GetBlogs(ctx context.Context, req *v1.GetBlogsRequest, opts ...http.CallOption) (rsp *global.Response, err error)
	ListBlogs(ctx context.Context, req *v1.ListBlogsRequest, opts ...http.CallOption) (rsp *global.Response, err error)
	UpdateBlogs(ctx context.Context, req *v1.UpdateBlogsRequest, opts ...http.CallOption) (rsp *global.Response, err error)
}

type BlogsHTTPClientImpl struct {
	cc *http.Client
}

func NewBlogsHTTPClient(client *http.Client) BlogsHTTPClient {
	return &BlogsHTTPClientImpl{client}
}

func (c *BlogsHTTPClientImpl) CreateBlogs(ctx context.Context, in *v1.CreateBlogsRequest, opts ...http.CallOption) (*global.Response, error) {
	var out global.Response
	pattern := "/v1/blogs/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogsCreateBlogs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogsHTTPClientImpl) DeleteBlogs(ctx context.Context, in *v1.DeleteBlogsRequest, opts ...http.CallOption) (*global.Response, error) {
	var out global.Response
	pattern := "/v1/blogs/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogsDeleteBlogs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogsHTTPClientImpl) GetBlogs(ctx context.Context, in *v1.GetBlogsRequest, opts ...http.CallOption) (*global.Response, error) {
	var out global.Response
	pattern := "/v1/blogs/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogsGetBlogs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogsHTTPClientImpl) ListBlogs(ctx context.Context, in *v1.ListBlogsRequest, opts ...http.CallOption) (*global.Response, error) {
	var out global.Response
	pattern := "/v1/blogs/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogsListBlogs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogsHTTPClientImpl) UpdateBlogs(ctx context.Context, in *v1.UpdateBlogsRequest, opts ...http.CallOption) (*global.Response, error) {
	var out global.Response
	pattern := "/v1/blogs/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogsUpdateBlogs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationBlogsCommentCreateBlogsComment = "/api.bff.v1.BlogsComment/CreateBlogsComment"
const OperationBlogsCommentDeleteBlogsComment = "/api.bff.v1.BlogsComment/DeleteBlogsComment"
const OperationBlogsCommentGetBlogsComment = "/api.bff.v1.BlogsComment/GetBlogsComment"
const OperationBlogsCommentListBlogsComment = "/api.bff.v1.BlogsComment/ListBlogsComment"
const OperationBlogsCommentUpdateBlogsComment = "/api.bff.v1.BlogsComment/UpdateBlogsComment"

type BlogsCommentHTTPServer interface {
	CreateBlogsComment(context.Context, *v1.CreateBlogsCommentRequest) (*global.Response, error)
	DeleteBlogsComment(context.Context, *v1.DeleteBlogsCommentRequest) (*global.Response, error)
	GetBlogsComment(context.Context, *v1.GetBlogsCommentRequest) (*global.Response, error)
	ListBlogsComment(context.Context, *v1.ListBlogsCommentRequest) (*global.Response, error)
	UpdateBlogsComment(context.Context, *v1.UpdateBlogsCommentRequest) (*global.Response, error)
}

func RegisterBlogsCommentHTTPServer(s *http.Server, srv BlogsCommentHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/blogs_comment/create", _BlogsComment_CreateBlogsComment0_HTTP_Handler(srv))
	r.POST("/v1/blogs_comment/update", _BlogsComment_UpdateBlogsComment0_HTTP_Handler(srv))
	r.POST("/v1/blogs_comment/del", _BlogsComment_DeleteBlogsComment0_HTTP_Handler(srv))
	r.POST("/v1/blogs_comment/get", _BlogsComment_GetBlogsComment0_HTTP_Handler(srv))
	r.POST("/v1/blogs_comment/list", _BlogsComment_ListBlogsComment0_HTTP_Handler(srv))
}

func _BlogsComment_CreateBlogsComment0_HTTP_Handler(srv BlogsCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.CreateBlogsCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogsCommentCreateBlogsComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBlogsComment(ctx, req.(*v1.CreateBlogsCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Response)
		return ctx.Result(200, reply)
	}
}

func _BlogsComment_UpdateBlogsComment0_HTTP_Handler(srv BlogsCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.UpdateBlogsCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogsCommentUpdateBlogsComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBlogsComment(ctx, req.(*v1.UpdateBlogsCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Response)
		return ctx.Result(200, reply)
	}
}

func _BlogsComment_DeleteBlogsComment0_HTTP_Handler(srv BlogsCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.DeleteBlogsCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogsCommentDeleteBlogsComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBlogsComment(ctx, req.(*v1.DeleteBlogsCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Response)
		return ctx.Result(200, reply)
	}
}

func _BlogsComment_GetBlogsComment0_HTTP_Handler(srv BlogsCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetBlogsCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogsCommentGetBlogsComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBlogsComment(ctx, req.(*v1.GetBlogsCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Response)
		return ctx.Result(200, reply)
	}
}

func _BlogsComment_ListBlogsComment0_HTTP_Handler(srv BlogsCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListBlogsCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogsCommentListBlogsComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBlogsComment(ctx, req.(*v1.ListBlogsCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Response)
		return ctx.Result(200, reply)
	}
}

type BlogsCommentHTTPClient interface {
	CreateBlogsComment(ctx context.Context, req *v1.CreateBlogsCommentRequest, opts ...http.CallOption) (rsp *global.Response, err error)
	DeleteBlogsComment(ctx context.Context, req *v1.DeleteBlogsCommentRequest, opts ...http.CallOption) (rsp *global.Response, err error)
	GetBlogsComment(ctx context.Context, req *v1.GetBlogsCommentRequest, opts ...http.CallOption) (rsp *global.Response, err error)
	ListBlogsComment(ctx context.Context, req *v1.ListBlogsCommentRequest, opts ...http.CallOption) (rsp *global.Response, err error)
	UpdateBlogsComment(ctx context.Context, req *v1.UpdateBlogsCommentRequest, opts ...http.CallOption) (rsp *global.Response, err error)
}

type BlogsCommentHTTPClientImpl struct {
	cc *http.Client
}

func NewBlogsCommentHTTPClient(client *http.Client) BlogsCommentHTTPClient {
	return &BlogsCommentHTTPClientImpl{client}
}

func (c *BlogsCommentHTTPClientImpl) CreateBlogsComment(ctx context.Context, in *v1.CreateBlogsCommentRequest, opts ...http.CallOption) (*global.Response, error) {
	var out global.Response
	pattern := "/v1/blogs_comment/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogsCommentCreateBlogsComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogsCommentHTTPClientImpl) DeleteBlogsComment(ctx context.Context, in *v1.DeleteBlogsCommentRequest, opts ...http.CallOption) (*global.Response, error) {
	var out global.Response
	pattern := "/v1/blogs_comment/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogsCommentDeleteBlogsComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogsCommentHTTPClientImpl) GetBlogsComment(ctx context.Context, in *v1.GetBlogsCommentRequest, opts ...http.CallOption) (*global.Response, error) {
	var out global.Response
	pattern := "/v1/blogs_comment/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogsCommentGetBlogsComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogsCommentHTTPClientImpl) ListBlogsComment(ctx context.Context, in *v1.ListBlogsCommentRequest, opts ...http.CallOption) (*global.Response, error) {
	var out global.Response
	pattern := "/v1/blogs_comment/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogsCommentListBlogsComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogsCommentHTTPClientImpl) UpdateBlogsComment(ctx context.Context, in *v1.UpdateBlogsCommentRequest, opts ...http.CallOption) (*global.Response, error) {
	var out global.Response
	pattern := "/v1/blogs_comment/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogsCommentUpdateBlogsComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
