// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.28.2
// source: api/bff/v1/palaces.proto

package v1

import (
	global "blog/api/global"
	v1 "blog/api/palaces/v1"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPalacesCreatePalaces = "/api.bff.v1.Palaces/CreatePalaces"
const OperationPalacesDeleteMemo = "/api.bff.v1.Palaces/DeleteMemo"
const OperationPalacesDeletePalaces = "/api.bff.v1.Palaces/DeletePalaces"
const OperationPalacesDeleteTodo = "/api.bff.v1.Palaces/DeleteTodo"
const OperationPalacesDeleteTodoDone = "/api.bff.v1.Palaces/DeleteTodoDone"
const OperationPalacesDeleteTodoRecord = "/api.bff.v1.Palaces/DeleteTodoRecord"
const OperationPalacesDoneMemo = "/api.bff.v1.Palaces/DoneMemo"
const OperationPalacesDoneTodo = "/api.bff.v1.Palaces/DoneTodo"
const OperationPalacesGetPalaces = "/api.bff.v1.Palaces/GetPalaces"
const OperationPalacesListMemo = "/api.bff.v1.Palaces/ListMemo"
const OperationPalacesListPalaces = "/api.bff.v1.Palaces/ListPalaces"
const OperationPalacesListTodo = "/api.bff.v1.Palaces/ListTodo"
const OperationPalacesListTodoDone = "/api.bff.v1.Palaces/ListTodoDone"
const OperationPalacesSaveMemo = "/api.bff.v1.Palaces/SaveMemo"
const OperationPalacesSaveTodo = "/api.bff.v1.Palaces/SaveTodo"
const OperationPalacesUpdatePalaces = "/api.bff.v1.Palaces/UpdatePalaces"

type PalacesHTTPServer interface {
	CreatePalaces(context.Context, *v1.CreatePalacesRequest) (*v1.CreatePalacesReply, error)
	DeleteMemo(context.Context, *global.ID) (*global.Empty, error)
	DeletePalaces(context.Context, *v1.DeletePalacesRequest) (*v1.DeletePalacesReply, error)
	DeleteTodo(context.Context, *global.ID) (*global.Empty, error)
	DeleteTodoDone(context.Context, *global.ID) (*global.Empty, error)
	// DeleteTodoRecord删除所有某个todo的记录
	DeleteTodoRecord(context.Context, *global.ID) (*global.Empty, error)
	DoneMemo(context.Context, *global.State) (*global.Empty, error)
	DoneTodo(context.Context, *global.ID) (*global.Empty, error)
	GetPalaces(context.Context, *v1.GetPalacesRequest) (*v1.GetPalacesReply, error)
	ListMemo(context.Context, *v1.ListMemoRequest) (*v1.ListMemoReply, error)
	ListPalaces(context.Context, *v1.ListPalacesRequest) (*v1.ListPalacesReply, error)
	ListTodo(context.Context, *v1.ListTodoRequest) (*v1.ListTodoReply, error)
	ListTodoDone(context.Context, *v1.ListTodoRequest) (*v1.ListTodoReply, error)
	SaveMemo(context.Context, *v1.SaveMemoRequest) (*global.Empty, error)
	SaveTodo(context.Context, *v1.SaveTodoItem) (*global.Empty, error)
	UpdatePalaces(context.Context, *v1.UpdatePalacesRequest) (*v1.UpdatePalacesReply, error)
}

func RegisterPalacesHTTPServer(s *http.Server, srv PalacesHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/palaces/create", _Palaces_CreatePalaces0_HTTP_Handler(srv))
	r.POST("/v1/palaces/update", _Palaces_UpdatePalaces0_HTTP_Handler(srv))
	r.POST("/v1/palaces/delete", _Palaces_DeletePalaces0_HTTP_Handler(srv))
	r.POST("/v1/palaces/get", _Palaces_GetPalaces0_HTTP_Handler(srv))
	r.POST("/v1/palaces/list", _Palaces_ListPalaces0_HTTP_Handler(srv))
	r.POST("/v1/palaces/memo/save", _Palaces_SaveMemo0_HTTP_Handler(srv))
	r.POST("/v1/palaces/memo/done", _Palaces_DoneMemo0_HTTP_Handler(srv))
	r.POST("/v1/palaces/memo/delete", _Palaces_DeleteMemo0_HTTP_Handler(srv))
	r.POST("/v1/palaces/memo/list", _Palaces_ListMemo0_HTTP_Handler(srv))
	r.POST("/v1/palaces/todo/save", _Palaces_SaveTodo0_HTTP_Handler(srv))
	r.POST("/v1/palaces/todo/done", _Palaces_DoneTodo0_HTTP_Handler(srv))
	r.POST("/v1/palaces/todo/delete", _Palaces_DeleteTodo0_HTTP_Handler(srv))
	r.POST("/v1/palaces/todo-done/delete", _Palaces_DeleteTodoDone0_HTTP_Handler(srv))
	r.POST("/v1/palaces/todo-record/delete", _Palaces_DeleteTodoRecord0_HTTP_Handler(srv))
	r.POST("/v1/palaces/todo/list", _Palaces_ListTodo0_HTTP_Handler(srv))
	r.POST("/v1/palaces/todo-done/list", _Palaces_ListTodoDone0_HTTP_Handler(srv))
}

func _Palaces_CreatePalaces0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.CreatePalacesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesCreatePalaces)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePalaces(ctx, req.(*v1.CreatePalacesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CreatePalacesReply)
		return ctx.Result(200, reply)
	}
}

func _Palaces_UpdatePalaces0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.UpdatePalacesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesUpdatePalaces)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePalaces(ctx, req.(*v1.UpdatePalacesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdatePalacesReply)
		return ctx.Result(200, reply)
	}
}

func _Palaces_DeletePalaces0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.DeletePalacesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesDeletePalaces)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePalaces(ctx, req.(*v1.DeletePalacesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeletePalacesReply)
		return ctx.Result(200, reply)
	}
}

func _Palaces_GetPalaces0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetPalacesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesGetPalaces)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPalaces(ctx, req.(*v1.GetPalacesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetPalacesReply)
		return ctx.Result(200, reply)
	}
}

func _Palaces_ListPalaces0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListPalacesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesListPalaces)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPalaces(ctx, req.(*v1.ListPalacesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListPalacesReply)
		return ctx.Result(200, reply)
	}
}

func _Palaces_SaveMemo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.SaveMemoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesSaveMemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveMemo(ctx, req.(*v1.SaveMemoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_DoneMemo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.State
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesDoneMemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DoneMemo(ctx, req.(*global.State))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_DeleteMemo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesDeleteMemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMemo(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_ListMemo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListMemoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesListMemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMemo(ctx, req.(*v1.ListMemoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListMemoReply)
		return ctx.Result(200, reply)
	}
}

func _Palaces_SaveTodo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.SaveTodoItem
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesSaveTodo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveTodo(ctx, req.(*v1.SaveTodoItem))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_DoneTodo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesDoneTodo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DoneTodo(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_DeleteTodo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesDeleteTodo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTodo(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_DeleteTodoDone0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesDeleteTodoDone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTodoDone(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_DeleteTodoRecord0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in global.ID
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesDeleteTodoRecord)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTodoRecord(ctx, req.(*global.ID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*global.Empty)
		return ctx.Result(200, reply)
	}
}

func _Palaces_ListTodo0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListTodoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesListTodo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTodo(ctx, req.(*v1.ListTodoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListTodoReply)
		return ctx.Result(200, reply)
	}
}

func _Palaces_ListTodoDone0_HTTP_Handler(srv PalacesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListTodoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPalacesListTodoDone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTodoDone(ctx, req.(*v1.ListTodoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListTodoReply)
		return ctx.Result(200, reply)
	}
}

type PalacesHTTPClient interface {
	CreatePalaces(ctx context.Context, req *v1.CreatePalacesRequest, opts ...http.CallOption) (rsp *v1.CreatePalacesReply, err error)
	DeleteMemo(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *global.Empty, err error)
	DeletePalaces(ctx context.Context, req *v1.DeletePalacesRequest, opts ...http.CallOption) (rsp *v1.DeletePalacesReply, err error)
	DeleteTodo(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *global.Empty, err error)
	DeleteTodoDone(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *global.Empty, err error)
	DeleteTodoRecord(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *global.Empty, err error)
	DoneMemo(ctx context.Context, req *global.State, opts ...http.CallOption) (rsp *global.Empty, err error)
	DoneTodo(ctx context.Context, req *global.ID, opts ...http.CallOption) (rsp *global.Empty, err error)
	GetPalaces(ctx context.Context, req *v1.GetPalacesRequest, opts ...http.CallOption) (rsp *v1.GetPalacesReply, err error)
	ListMemo(ctx context.Context, req *v1.ListMemoRequest, opts ...http.CallOption) (rsp *v1.ListMemoReply, err error)
	ListPalaces(ctx context.Context, req *v1.ListPalacesRequest, opts ...http.CallOption) (rsp *v1.ListPalacesReply, err error)
	ListTodo(ctx context.Context, req *v1.ListTodoRequest, opts ...http.CallOption) (rsp *v1.ListTodoReply, err error)
	ListTodoDone(ctx context.Context, req *v1.ListTodoRequest, opts ...http.CallOption) (rsp *v1.ListTodoReply, err error)
	SaveMemo(ctx context.Context, req *v1.SaveMemoRequest, opts ...http.CallOption) (rsp *global.Empty, err error)
	SaveTodo(ctx context.Context, req *v1.SaveTodoItem, opts ...http.CallOption) (rsp *global.Empty, err error)
	UpdatePalaces(ctx context.Context, req *v1.UpdatePalacesRequest, opts ...http.CallOption) (rsp *v1.UpdatePalacesReply, err error)
}

type PalacesHTTPClientImpl struct {
	cc *http.Client
}

func NewPalacesHTTPClient(client *http.Client) PalacesHTTPClient {
	return &PalacesHTTPClientImpl{client}
}

func (c *PalacesHTTPClientImpl) CreatePalaces(ctx context.Context, in *v1.CreatePalacesRequest, opts ...http.CallOption) (*v1.CreatePalacesReply, error) {
	var out v1.CreatePalacesReply
	pattern := "/v1/palaces/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesCreatePalaces))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) DeleteMemo(ctx context.Context, in *global.ID, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/v1/palaces/memo/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesDeleteMemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) DeletePalaces(ctx context.Context, in *v1.DeletePalacesRequest, opts ...http.CallOption) (*v1.DeletePalacesReply, error) {
	var out v1.DeletePalacesReply
	pattern := "/v1/palaces/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesDeletePalaces))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) DeleteTodo(ctx context.Context, in *global.ID, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/v1/palaces/todo/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesDeleteTodo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) DeleteTodoDone(ctx context.Context, in *global.ID, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/v1/palaces/todo-done/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesDeleteTodoDone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) DeleteTodoRecord(ctx context.Context, in *global.ID, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/v1/palaces/todo-record/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesDeleteTodoRecord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) DoneMemo(ctx context.Context, in *global.State, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/v1/palaces/memo/done"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesDoneMemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) DoneTodo(ctx context.Context, in *global.ID, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/v1/palaces/todo/done"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesDoneTodo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) GetPalaces(ctx context.Context, in *v1.GetPalacesRequest, opts ...http.CallOption) (*v1.GetPalacesReply, error) {
	var out v1.GetPalacesReply
	pattern := "/v1/palaces/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesGetPalaces))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) ListMemo(ctx context.Context, in *v1.ListMemoRequest, opts ...http.CallOption) (*v1.ListMemoReply, error) {
	var out v1.ListMemoReply
	pattern := "/v1/palaces/memo/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesListMemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) ListPalaces(ctx context.Context, in *v1.ListPalacesRequest, opts ...http.CallOption) (*v1.ListPalacesReply, error) {
	var out v1.ListPalacesReply
	pattern := "/v1/palaces/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesListPalaces))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) ListTodo(ctx context.Context, in *v1.ListTodoRequest, opts ...http.CallOption) (*v1.ListTodoReply, error) {
	var out v1.ListTodoReply
	pattern := "/v1/palaces/todo/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesListTodo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) ListTodoDone(ctx context.Context, in *v1.ListTodoRequest, opts ...http.CallOption) (*v1.ListTodoReply, error) {
	var out v1.ListTodoReply
	pattern := "/v1/palaces/todo-done/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesListTodoDone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) SaveMemo(ctx context.Context, in *v1.SaveMemoRequest, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/v1/palaces/memo/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesSaveMemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) SaveTodo(ctx context.Context, in *v1.SaveTodoItem, opts ...http.CallOption) (*global.Empty, error) {
	var out global.Empty
	pattern := "/v1/palaces/todo/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesSaveTodo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PalacesHTTPClientImpl) UpdatePalaces(ctx context.Context, in *v1.UpdatePalacesRequest, opts ...http.CallOption) (*v1.UpdatePalacesReply, error) {
	var out v1.UpdatePalacesReply
	pattern := "/v1/palaces/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPalacesUpdatePalaces))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
