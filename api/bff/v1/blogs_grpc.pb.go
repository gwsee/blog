// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: api/bff/v1/blogs.proto

package v1

import (
	v1 "blog/api/blogs/v1"
	global "blog/api/global"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Blogs_CreateBlogs_FullMethodName  = "/api.bff.v1.Blogs/CreateBlogs"
	Blogs_UpdateBlogs_FullMethodName  = "/api.bff.v1.Blogs/UpdateBlogs"
	Blogs_DeleteBlogs_FullMethodName  = "/api.bff.v1.Blogs/DeleteBlogs"
	Blogs_GetBlogs_FullMethodName     = "/api.bff.v1.Blogs/GetBlogs"
	Blogs_ListBlogs_FullMethodName    = "/api.bff.v1.Blogs/ListBlogs"
	Blogs_HotBlogs_FullMethodName     = "/api.bff.v1.Blogs/HotBlogs"
	Blogs_ListBlogTags_FullMethodName = "/api.bff.v1.Blogs/ListBlogTags"
	Blogs_Thumb_FullMethodName        = "/api.bff.v1.Blogs/Thumb"
	Blogs_Collect_FullMethodName      = "/api.bff.v1.Blogs/Collect"
)

// BlogsClient is the client API for Blogs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogsClient interface {
	CreateBlogs(ctx context.Context, in *v1.CreateBlogsRequest, opts ...grpc.CallOption) (*global.Empty, error)
	UpdateBlogs(ctx context.Context, in *v1.UpdateBlogsRequest, opts ...grpc.CallOption) (*global.Empty, error)
	DeleteBlogs(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error)
	GetBlogs(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*v1.GetBlogsReply, error)
	ListBlogs(ctx context.Context, in *v1.ListBlogsRequest, opts ...grpc.CallOption) (*v1.ListBlogsReply, error)
	HotBlogs(ctx context.Context, in *global.PageInfo, opts ...grpc.CallOption) (*v1.ListBlogsReply, error)
	ListBlogTags(ctx context.Context, in *v1.ListBlogsRequest, opts ...grpc.CallOption) (*v1.ListBlogTagsReply, error)
	// 点赞
	Thumb(ctx context.Context, in *global.Action, opts ...grpc.CallOption) (*global.Empty, error)
	// 收藏
	Collect(ctx context.Context, in *global.Action, opts ...grpc.CallOption) (*global.Empty, error)
}

type blogsClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogsClient(cc grpc.ClientConnInterface) BlogsClient {
	return &blogsClient{cc}
}

func (c *blogsClient) CreateBlogs(ctx context.Context, in *v1.CreateBlogsRequest, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Blogs_CreateBlogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) UpdateBlogs(ctx context.Context, in *v1.UpdateBlogsRequest, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Blogs_UpdateBlogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) DeleteBlogs(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Blogs_DeleteBlogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) GetBlogs(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*v1.GetBlogsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetBlogsReply)
	err := c.cc.Invoke(ctx, Blogs_GetBlogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) ListBlogs(ctx context.Context, in *v1.ListBlogsRequest, opts ...grpc.CallOption) (*v1.ListBlogsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListBlogsReply)
	err := c.cc.Invoke(ctx, Blogs_ListBlogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) HotBlogs(ctx context.Context, in *global.PageInfo, opts ...grpc.CallOption) (*v1.ListBlogsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListBlogsReply)
	err := c.cc.Invoke(ctx, Blogs_HotBlogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) ListBlogTags(ctx context.Context, in *v1.ListBlogsRequest, opts ...grpc.CallOption) (*v1.ListBlogTagsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListBlogTagsReply)
	err := c.cc.Invoke(ctx, Blogs_ListBlogTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Thumb(ctx context.Context, in *global.Action, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Blogs_Thumb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Collect(ctx context.Context, in *global.Action, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, Blogs_Collect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogsServer is the server API for Blogs service.
// All implementations must embed UnimplementedBlogsServer
// for forward compatibility.
type BlogsServer interface {
	CreateBlogs(context.Context, *v1.CreateBlogsRequest) (*global.Empty, error)
	UpdateBlogs(context.Context, *v1.UpdateBlogsRequest) (*global.Empty, error)
	DeleteBlogs(context.Context, *global.ID) (*global.Empty, error)
	GetBlogs(context.Context, *global.ID) (*v1.GetBlogsReply, error)
	ListBlogs(context.Context, *v1.ListBlogsRequest) (*v1.ListBlogsReply, error)
	HotBlogs(context.Context, *global.PageInfo) (*v1.ListBlogsReply, error)
	ListBlogTags(context.Context, *v1.ListBlogsRequest) (*v1.ListBlogTagsReply, error)
	// 点赞
	Thumb(context.Context, *global.Action) (*global.Empty, error)
	// 收藏
	Collect(context.Context, *global.Action) (*global.Empty, error)
	mustEmbedUnimplementedBlogsServer()
}

// UnimplementedBlogsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlogsServer struct{}

func (UnimplementedBlogsServer) CreateBlogs(context.Context, *v1.CreateBlogsRequest) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlogs not implemented")
}
func (UnimplementedBlogsServer) UpdateBlogs(context.Context, *v1.UpdateBlogsRequest) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlogs not implemented")
}
func (UnimplementedBlogsServer) DeleteBlogs(context.Context, *global.ID) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlogs not implemented")
}
func (UnimplementedBlogsServer) GetBlogs(context.Context, *global.ID) (*v1.GetBlogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogs not implemented")
}
func (UnimplementedBlogsServer) ListBlogs(context.Context, *v1.ListBlogsRequest) (*v1.ListBlogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlogs not implemented")
}
func (UnimplementedBlogsServer) HotBlogs(context.Context, *global.PageInfo) (*v1.ListBlogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotBlogs not implemented")
}
func (UnimplementedBlogsServer) ListBlogTags(context.Context, *v1.ListBlogsRequest) (*v1.ListBlogTagsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlogTags not implemented")
}
func (UnimplementedBlogsServer) Thumb(context.Context, *global.Action) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thumb not implemented")
}
func (UnimplementedBlogsServer) Collect(context.Context, *global.Action) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedBlogsServer) mustEmbedUnimplementedBlogsServer() {}
func (UnimplementedBlogsServer) testEmbeddedByValue()               {}

// UnsafeBlogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogsServer will
// result in compilation errors.
type UnsafeBlogsServer interface {
	mustEmbedUnimplementedBlogsServer()
}

func RegisterBlogsServer(s grpc.ServiceRegistrar, srv BlogsServer) {
	// If the following call pancis, it indicates UnimplementedBlogsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Blogs_ServiceDesc, srv)
}

func _Blogs_CreateBlogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateBlogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).CreateBlogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blogs_CreateBlogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).CreateBlogs(ctx, req.(*v1.CreateBlogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_UpdateBlogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateBlogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).UpdateBlogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blogs_UpdateBlogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).UpdateBlogs(ctx, req.(*v1.UpdateBlogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_DeleteBlogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).DeleteBlogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blogs_DeleteBlogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).DeleteBlogs(ctx, req.(*global.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_GetBlogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).GetBlogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blogs_GetBlogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).GetBlogs(ctx, req.(*global.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_ListBlogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListBlogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).ListBlogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blogs_ListBlogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).ListBlogs(ctx, req.(*v1.ListBlogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_HotBlogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).HotBlogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blogs_HotBlogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).HotBlogs(ctx, req.(*global.PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_ListBlogTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListBlogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).ListBlogTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blogs_ListBlogTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).ListBlogTags(ctx, req.(*v1.ListBlogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Thumb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.Action)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Thumb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blogs_Thumb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Thumb(ctx, req.(*global.Action))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.Action)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blogs_Collect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Collect(ctx, req.(*global.Action))
	}
	return interceptor(ctx, in, info, handler)
}

// Blogs_ServiceDesc is the grpc.ServiceDesc for Blogs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blogs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.bff.v1.Blogs",
	HandlerType: (*BlogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlogs",
			Handler:    _Blogs_CreateBlogs_Handler,
		},
		{
			MethodName: "UpdateBlogs",
			Handler:    _Blogs_UpdateBlogs_Handler,
		},
		{
			MethodName: "DeleteBlogs",
			Handler:    _Blogs_DeleteBlogs_Handler,
		},
		{
			MethodName: "GetBlogs",
			Handler:    _Blogs_GetBlogs_Handler,
		},
		{
			MethodName: "ListBlogs",
			Handler:    _Blogs_ListBlogs_Handler,
		},
		{
			MethodName: "HotBlogs",
			Handler:    _Blogs_HotBlogs_Handler,
		},
		{
			MethodName: "ListBlogTags",
			Handler:    _Blogs_ListBlogTags_Handler,
		},
		{
			MethodName: "Thumb",
			Handler:    _Blogs_Thumb_Handler,
		},
		{
			MethodName: "Collect",
			Handler:    _Blogs_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/bff/v1/blogs.proto",
}

const (
	BlogsComment_CreateBlogsComment_FullMethodName = "/api.bff.v1.BlogsComment/CreateBlogsComment"
	BlogsComment_UpdateBlogsComment_FullMethodName = "/api.bff.v1.BlogsComment/UpdateBlogsComment"
	BlogsComment_DeleteBlogsComment_FullMethodName = "/api.bff.v1.BlogsComment/DeleteBlogsComment"
	BlogsComment_GetBlogsComment_FullMethodName    = "/api.bff.v1.BlogsComment/GetBlogsComment"
	BlogsComment_ListBlogsComment_FullMethodName   = "/api.bff.v1.BlogsComment/ListBlogsComment"
)

// BlogsCommentClient is the client API for BlogsComment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogsCommentClient interface {
	CreateBlogsComment(ctx context.Context, in *v1.CreateBlogsCommentRequest, opts ...grpc.CallOption) (*global.Empty, error)
	UpdateBlogsComment(ctx context.Context, in *v1.UpdateBlogsCommentRequest, opts ...grpc.CallOption) (*global.Empty, error)
	DeleteBlogsComment(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error)
	GetBlogsComment(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*v1.GetBlogsCommentReply, error)
	ListBlogsComment(ctx context.Context, in *v1.ListBlogsCommentRequest, opts ...grpc.CallOption) (*v1.ListBlogsCommentReply, error)
}

type blogsCommentClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogsCommentClient(cc grpc.ClientConnInterface) BlogsCommentClient {
	return &blogsCommentClient{cc}
}

func (c *blogsCommentClient) CreateBlogsComment(ctx context.Context, in *v1.CreateBlogsCommentRequest, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, BlogsComment_CreateBlogsComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsCommentClient) UpdateBlogsComment(ctx context.Context, in *v1.UpdateBlogsCommentRequest, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, BlogsComment_UpdateBlogsComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsCommentClient) DeleteBlogsComment(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*global.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(global.Empty)
	err := c.cc.Invoke(ctx, BlogsComment_DeleteBlogsComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsCommentClient) GetBlogsComment(ctx context.Context, in *global.ID, opts ...grpc.CallOption) (*v1.GetBlogsCommentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetBlogsCommentReply)
	err := c.cc.Invoke(ctx, BlogsComment_GetBlogsComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsCommentClient) ListBlogsComment(ctx context.Context, in *v1.ListBlogsCommentRequest, opts ...grpc.CallOption) (*v1.ListBlogsCommentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListBlogsCommentReply)
	err := c.cc.Invoke(ctx, BlogsComment_ListBlogsComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogsCommentServer is the server API for BlogsComment service.
// All implementations must embed UnimplementedBlogsCommentServer
// for forward compatibility.
type BlogsCommentServer interface {
	CreateBlogsComment(context.Context, *v1.CreateBlogsCommentRequest) (*global.Empty, error)
	UpdateBlogsComment(context.Context, *v1.UpdateBlogsCommentRequest) (*global.Empty, error)
	DeleteBlogsComment(context.Context, *global.ID) (*global.Empty, error)
	GetBlogsComment(context.Context, *global.ID) (*v1.GetBlogsCommentReply, error)
	ListBlogsComment(context.Context, *v1.ListBlogsCommentRequest) (*v1.ListBlogsCommentReply, error)
	mustEmbedUnimplementedBlogsCommentServer()
}

// UnimplementedBlogsCommentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlogsCommentServer struct{}

func (UnimplementedBlogsCommentServer) CreateBlogsComment(context.Context, *v1.CreateBlogsCommentRequest) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlogsComment not implemented")
}
func (UnimplementedBlogsCommentServer) UpdateBlogsComment(context.Context, *v1.UpdateBlogsCommentRequest) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlogsComment not implemented")
}
func (UnimplementedBlogsCommentServer) DeleteBlogsComment(context.Context, *global.ID) (*global.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlogsComment not implemented")
}
func (UnimplementedBlogsCommentServer) GetBlogsComment(context.Context, *global.ID) (*v1.GetBlogsCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogsComment not implemented")
}
func (UnimplementedBlogsCommentServer) ListBlogsComment(context.Context, *v1.ListBlogsCommentRequest) (*v1.ListBlogsCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlogsComment not implemented")
}
func (UnimplementedBlogsCommentServer) mustEmbedUnimplementedBlogsCommentServer() {}
func (UnimplementedBlogsCommentServer) testEmbeddedByValue()                      {}

// UnsafeBlogsCommentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogsCommentServer will
// result in compilation errors.
type UnsafeBlogsCommentServer interface {
	mustEmbedUnimplementedBlogsCommentServer()
}

func RegisterBlogsCommentServer(s grpc.ServiceRegistrar, srv BlogsCommentServer) {
	// If the following call pancis, it indicates UnimplementedBlogsCommentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlogsComment_ServiceDesc, srv)
}

func _BlogsComment_CreateBlogsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateBlogsCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsCommentServer).CreateBlogsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsComment_CreateBlogsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsCommentServer).CreateBlogsComment(ctx, req.(*v1.CreateBlogsCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsComment_UpdateBlogsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateBlogsCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsCommentServer).UpdateBlogsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsComment_UpdateBlogsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsCommentServer).UpdateBlogsComment(ctx, req.(*v1.UpdateBlogsCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsComment_DeleteBlogsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsCommentServer).DeleteBlogsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsComment_DeleteBlogsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsCommentServer).DeleteBlogsComment(ctx, req.(*global.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsComment_GetBlogsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsCommentServer).GetBlogsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsComment_GetBlogsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsCommentServer).GetBlogsComment(ctx, req.(*global.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsComment_ListBlogsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListBlogsCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsCommentServer).ListBlogsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsComment_ListBlogsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsCommentServer).ListBlogsComment(ctx, req.(*v1.ListBlogsCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogsComment_ServiceDesc is the grpc.ServiceDesc for BlogsComment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogsComment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.bff.v1.BlogsComment",
	HandlerType: (*BlogsCommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlogsComment",
			Handler:    _BlogsComment_CreateBlogsComment_Handler,
		},
		{
			MethodName: "UpdateBlogsComment",
			Handler:    _BlogsComment_UpdateBlogsComment_Handler,
		},
		{
			MethodName: "DeleteBlogsComment",
			Handler:    _BlogsComment_DeleteBlogsComment_Handler,
		},
		{
			MethodName: "GetBlogsComment",
			Handler:    _BlogsComment_GetBlogsComment_Handler,
		},
		{
			MethodName: "ListBlogsComment",
			Handler:    _BlogsComment_ListBlogsComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/bff/v1/blogs.proto",
}
