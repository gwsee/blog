// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.28.2
// source: api/bff/v1/account.proto

package v1

import (
	v1 "blog/api/account/v1"
	global "blog/api/global"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAccountCreateAccount = "/api.bff.v1.Account/CreateAccount"
const OperationAccountLoginByAccount = "/api.bff.v1.Account/LoginByAccount"
const OperationAccountResetPassword = "/api.bff.v1.Account/ResetPassword"

type AccountHTTPServer interface {
	CreateAccount(context.Context, *v1.CreateAccountRequest) (*global.Response, error)
	LoginByAccount(context.Context, *v1.LoginByAccountRequest) (*global.Response, error)
	ResetPassword(context.Context, *v1.ResetPasswordRequest) (*global.Response, error)
}

func RegisterAccountHTTPServer(s *http.Server, srv AccountHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/register", _Account_CreateAccount0_HTTP_Handler(srv))
	r.POST("/v1/reset_password", _Account_ResetPassword0_HTTP_Handler(srv))
	r.POST("/v1/login", _Account_LoginByAccount0_HTTP_Handler(srv))
}

func _Account_CreateAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) (err error) {
		var in v1.CreateAccountRequest
		reply := new(global.Response)
		defer func() {
			reply.Resp(ctx, err)
		}()
		if err = ctx.Bind(&in); err != nil {
			return err
		}
		if err = ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountCreateAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAccount(ctx, req.(*v1.CreateAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply = out.(*global.Response)
		return
	}
}

func _Account_ResetPassword0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) (err error) {
		var in v1.ResetPasswordRequest
		reply := new(global.Response)
		defer func() {
			reply.Resp(ctx, err)
		}()
		if err = ctx.Bind(&in); err != nil {
			return err
		}
		if err = ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountResetPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResetPassword(ctx, req.(*v1.ResetPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply = out.(*global.Response)
		return
	}
}

func _Account_LoginByAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) (err error) {
		var in v1.LoginByAccountRequest
		reply := new(global.Response)
		defer func() {
			reply.Resp(ctx, err)
		}()
		if err = ctx.Bind(&in); err != nil {
			return err
		}
		if err = ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountLoginByAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByAccount(ctx, req.(*v1.LoginByAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply = out.(*global.Response)
		return
	}
}

type AccountHTTPClient interface {
	CreateAccount(ctx context.Context, req *v1.CreateAccountRequest, opts ...http.CallOption) (rsp *global.Response, err error)
	LoginByAccount(ctx context.Context, req *v1.LoginByAccountRequest, opts ...http.CallOption) (rsp *global.Response, err error)
	ResetPassword(ctx context.Context, req *v1.ResetPasswordRequest, opts ...http.CallOption) (rsp *global.Response, err error)
}

type AccountHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountHTTPClient(client *http.Client) AccountHTTPClient {
	return &AccountHTTPClientImpl{client}
}

func (c *AccountHTTPClientImpl) CreateAccount(ctx context.Context, in *v1.CreateAccountRequest, opts ...http.CallOption) (*global.Response, error) {
	var out global.Response
	pattern := "/v1/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountCreateAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AccountHTTPClientImpl) LoginByAccount(ctx context.Context, in *v1.LoginByAccountRequest, opts ...http.CallOption) (*global.Response, error) {
	var out global.Response
	pattern := "/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountLoginByAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AccountHTTPClientImpl) ResetPassword(ctx context.Context, in *v1.ResetPasswordRequest, opts ...http.CallOption) (*global.Response, error) {
	var out global.Response
	pattern := "/v1/reset_password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountResetPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
